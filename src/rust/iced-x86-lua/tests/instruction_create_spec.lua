-- SPDX-License-Identifier: MIT
-- Copyright (C) 2018-present iced project and contributors

local from_hex = require("iced_test_utils").from_hex
local has_int64 = require("iced_test_utils").has_int64

describe("Instruction: create", function()
	local Code = require("iced_x86.Code")
	local Instruction = require("iced_x86.Instruction")

	it("db", function()
		-- stylua: ignore
		local tests = {
			{ Instruction:db(from_hex("77")), from_hex("77") },
			{ Instruction:db(from_hex("77A9")), from_hex("77A9") },
			{ Instruction:db(from_hex("77A9CE")), from_hex("77A9CE") },
			{ Instruction:db(from_hex("77A9CE9D")), from_hex("77A9CE9D") },
			{ Instruction:db(from_hex("77A9CE9D55")), from_hex("77A9CE9D55") },
			{ Instruction:db(from_hex("77A9CE9D5505")), from_hex("77A9CE9D5505") },
			{ Instruction:db(from_hex("77A9CE9D550542")), from_hex("77A9CE9D550542") },
			{ Instruction:db(from_hex("77A9CE9D5505426C")), from_hex("77A9CE9D5505426C") },
			{ Instruction:db(from_hex("77A9CE9D5505426C86")), from_hex("77A9CE9D5505426C86") },
			{ Instruction:db(from_hex("77A9CE9D5505426C8632")), from_hex("77A9CE9D5505426C8632") },
			{ Instruction:db(from_hex("77A9CE9D5505426C8632FE")), from_hex("77A9CE9D5505426C8632FE") },
			{ Instruction:db(from_hex("77A9CE9D5505426C8632FE4F")), from_hex("77A9CE9D5505426C8632FE4F") },
			{ Instruction:db(from_hex("77A9CE9D5505426C8632FE4F34")), from_hex("77A9CE9D5505426C8632FE4F34") },
			{ Instruction:db(from_hex("77A9CE9D5505426C8632FE4F3427")), from_hex("77A9CE9D5505426C8632FE4F3427") },
			{ Instruction:db(from_hex("77A9CE9D5505426C8632FE4F3427AA")), from_hex("77A9CE9D5505426C8632FE4F3427AA") },
			{ Instruction:db(from_hex("77A9CE9D5505426C8632FE4F3427AA08")), from_hex("77A9CE9D5505426C8632FE4F3427AA08") },

			{ Instruction:db(0x77), from_hex("77") },
			{ Instruction:db(0x77, 0xA9), from_hex("77A9") },
			{ Instruction:db(0x77, 0xA9, 0xCE), from_hex("77A9CE") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D), from_hex("77A9CE9D") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55), from_hex("77A9CE9D55") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05), from_hex("77A9CE9D5505") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42), from_hex("77A9CE9D550542") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C), from_hex("77A9CE9D5505426C") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86), from_hex("77A9CE9D5505426C86") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32), from_hex("77A9CE9D5505426C8632") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE), from_hex("77A9CE9D5505426C8632FE") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F), from_hex("77A9CE9D5505426C8632FE4F") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34), from_hex("77A9CE9D5505426C8632FE4F34") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27), from_hex("77A9CE9D5505426C8632FE4F3427") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA), from_hex("77A9CE9D5505426C8632FE4F3427AA") },
			{ Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA, 0x08), from_hex("77A9CE9D5505426C8632FE4F3427AA08") },

			{ Instruction:db(-0x80), from_hex("80") },
			{ Instruction:db(0xFF, -0x80), from_hex("FF80") },
			{ Instruction:db(0xFE, 0xFF, -0x80), from_hex("FEFF80") },
			{ Instruction:db(0xFD, 0xFE, 0xFF, -0x80), from_hex("FDFEFF80") },
			{ Instruction:db(0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("FCFDFEFF80") },
			{ Instruction:db(0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("FBFCFDFEFF80") },
			{ Instruction:db(0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("FAFBFCFDFEFF80") },
			{ Instruction:db(0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F3F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F2F3F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80), from_hex("F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db(0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF), from_hex("F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF") },

			{ Instruction:db(0xFF), from_hex("FF") },
			{ Instruction:db(0x7F, 0xFF), from_hex("7FFF") },
			{ Instruction:db(0xFE, 0x7F, 0xFF), from_hex("FE7FFF") },
			{ Instruction:db(0xFD, 0xFE, 0x7F, 0xFF), from_hex("FDFE7FFF") },
			{ Instruction:db(0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("FCFDFE7FFF") },
			{ Instruction:db(0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("FBFCFDFE7FFF") },
			{ Instruction:db(0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F4F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F3F4F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F2F3F4F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db(0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF), from_hex("F1F2F3F4F5F6F7F8F9FAFBFCFDFE7FFF") },

			{ Instruction:db({ 0x77 }), from_hex("77") },
			{ Instruction:db({ 0x77, 0xA9 }), from_hex("77A9") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE }), from_hex("77A9CE") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D }), from_hex("77A9CE9D") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55 }), from_hex("77A9CE9D55") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05 }), from_hex("77A9CE9D5505") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42 }), from_hex("77A9CE9D550542") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C }), from_hex("77A9CE9D5505426C") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86 }), from_hex("77A9CE9D5505426C86") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32 }), from_hex("77A9CE9D5505426C8632") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE }), from_hex("77A9CE9D5505426C8632FE") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F }), from_hex("77A9CE9D5505426C8632FE4F") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34 }), from_hex("77A9CE9D5505426C8632FE4F34") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27 }), from_hex("77A9CE9D5505426C8632FE4F3427") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA }), from_hex("77A9CE9D5505426C8632FE4F3427AA") },
			{ Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA, 0x08 }), from_hex("77A9CE9D5505426C8632FE4F3427AA08") },

			{ Instruction:db({ -0x80 }), from_hex("80") },
			{ Instruction:db({ 0xFF, -0x80 }), from_hex("FF80") },
			{ Instruction:db({ 0xFE, 0xFF, -0x80 }), from_hex("FEFF80") },
			{ Instruction:db({ 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("FDFEFF80") },
			{ Instruction:db({ 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("FCFDFEFF80") },
			{ Instruction:db({ 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("FBFCFDFEFF80") },
			{ Instruction:db({ 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F3F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F2F3F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x80 }), from_hex("F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF80") },
			{ Instruction:db({ 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF }), from_hex("F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF") },

			{ Instruction:db({ 0xFF }), from_hex("FF") },
			{ Instruction:db({ 0x7F, 0xFF }), from_hex("7FFF") },
			{ Instruction:db({ 0xFE, 0x7F, 0xFF }), from_hex("FE7FFF") },
			{ Instruction:db({ 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("FDFE7FFF") },
			{ Instruction:db({ 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("FCFDFE7FFF") },
			{ Instruction:db({ 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("FBFCFDFE7FFF") },
			{ Instruction:db({ 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F4F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F3F4F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F2F3F4F5F6F7F8F9FAFBFCFDFE7FFF") },
			{ Instruction:db({ 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x7F, 0xFF }), from_hex("F1F2F3F4F5F6F7F8F9FAFBFCFDFE7FFF") },
		}
		for _, tc in ipairs(tests) do
			local instr = tc[1]
			local expected = tc[2]
			assert.equals(Code.DeclareByte, instr:code())
			assert.equals(#expected, instr:declare_data_len())
			for i = 1, #expected do
				local value = expected:byte(i)
				assert.equals(value, instr:get_declare_byte_value(i - 1))
			end
		end
	end)

	-- stylua: ignore
	it("db: fail", function()
		assert.has_error(function() Instruction:db("") end)
									Instruction:db(from_hex("00"))
									Instruction:db(from_hex("0000"))
									Instruction:db(from_hex("000000"))
									Instruction:db(from_hex("00000000"))
									Instruction:db(from_hex("0000000000"))
									Instruction:db(from_hex("000000000000"))
									Instruction:db(from_hex("00000000000000"))
									Instruction:db(from_hex("0000000000000000"))
									Instruction:db(from_hex("000000000000000000"))
									Instruction:db(from_hex("00000000000000000000"))
									Instruction:db(from_hex("0000000000000000000000"))
									Instruction:db(from_hex("000000000000000000000000"))
									Instruction:db(from_hex("00000000000000000000000000"))
									Instruction:db(from_hex("0000000000000000000000000000"))
									Instruction:db(from_hex("000000000000000000000000000000"))
									Instruction:db(from_hex("00000000000000000000000000000000"))
		assert.has_error(function() Instruction:db(from_hex("0000000000000000000000000000000000")) end)

		assert.has_error(function() Instruction:db() end)
									Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA, 0x08)
		assert.has_error(function() Instruction:db(0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA, 0x08, 0x00) end)

		assert.has_error(function() Instruction:db(-0x81) end)
		assert.has_error(function() Instruction:db(0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)
		assert.has_error(function() Instruction:db(0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81) end)

		assert.has_error(function() Instruction:db(0x100) end)
		assert.has_error(function() Instruction:db(0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)
		assert.has_error(function() Instruction:db(0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100) end)

		assert.has_error(function() Instruction:db({ }) end)
									Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA, 0x08 })
		assert.has_error(function() Instruction:db({ 0x77, 0xA9, 0xCE, 0x9D, 0x55, 0x05, 0x42, 0x6C, 0x86, 0x32, 0xFE, 0x4F, 0x34, 0x27, 0xAA, 0x08, 0x00 }) end)

		assert.has_error(function() Instruction:db({ -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)
		assert.has_error(function() Instruction:db({ 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, -0x81 }) end)

		assert.has_error(function() Instruction:db({ 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)
		assert.has_error(function() Instruction:db({ 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100 }) end)

		assert.has_error(function() Instruction:db(true) end)
		assert.has_error(function() Instruction:db(0xFF, true) end)
		assert.has_error(function() Instruction:db(0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)
		assert.has_error(function() Instruction:db(0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true) end)

		assert.has_error(function() Instruction:db({ true }) end)
		assert.has_error(function() Instruction:db({ 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)
		assert.has_error(function() Instruction:db({ 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, true }) end)

									Instruction:db(from_hex("77"))
		assert.has_error(function() Instruction:db(from_hex("77"), "") end)

									Instruction:db({ 0x77 })
		assert.has_error(function() Instruction:db({ 0x77 }, {}) end)
	end)

	it("dw", function()
		-- stylua: ignore
		local tests = {
			{ Instruction:dw(from_hex("A977")), { 0x77A9 } },
			{ Instruction:dw(from_hex("A9779DCE")), { 0x77A9, 0xCE9D } },
			{ Instruction:dw(from_hex("A9779DCE0555")), { 0x77A9, 0xCE9D, 0x5505 } },
			{ Instruction:dw(from_hex("A9779DCE05556C42")), { 0x77A9, 0xCE9D, 0x5505, 0x426C } },
			{ Instruction:dw(from_hex("A9779DCE05556C423286")), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632 } },
			{ Instruction:dw(from_hex("A9779DCE05556C4232864FFE")), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F } },
			{ Instruction:dw(from_hex("A9779DCE05556C4232864FFE2734")), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427 } },
			{ Instruction:dw(from_hex("A9779DCE05556C4232864FFE273408AA")), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427, 0xAA08 } },

			{ Instruction:dw(0x77A9), { 0x77A9 } },
			{ Instruction:dw(0x77A9, 0xCE9D), { 0x77A9, 0xCE9D } },
			{ Instruction:dw(0x77A9, 0xCE9D, 0x5505), { 0x77A9, 0xCE9D, 0x5505 } },
			{ Instruction:dw(0x77A9, 0xCE9D, 0x5505, 0x426C), { 0x77A9, 0xCE9D, 0x5505, 0x426C } },
			{ Instruction:dw(0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632 } },
			{ Instruction:dw(0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F } },
			{ Instruction:dw(0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427 } },
			{ Instruction:dw(0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427, 0xAA08), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427, 0xAA08 } },

			{ Instruction:dw(-0x8000), { 0x8000 } },
			{ Instruction:dw(0xFFFF, -0x8000), { 0xFFFF, 0x8000 } },
			{ Instruction:dw(0xFFFE, 0xFFFF, -0x8000), { 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw(0xFFFD, 0xFFFE, 0xFFFF, -0x8000), { 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw(0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000), { 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw(0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000), { 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw(0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000), { 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw(0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000), { 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw(0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF), { 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF } },

			{ Instruction:dw(0xFFFF), { 0xFFFF } },
			{ Instruction:dw(0x7FFF, 0xFFFF), { 0x7FFF, 0xFFFF } },
			{ Instruction:dw(0xFFFE, 0x7FFF, 0xFFFF), { 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw(0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF), { 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw(0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF), { 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw(0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF), { 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw(0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF), { 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw(0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF), { 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },

			{ Instruction:dw({ 0x77A9 }), { 0x77A9 } },
			{ Instruction:dw({ 0x77A9, 0xCE9D }), { 0x77A9, 0xCE9D } },
			{ Instruction:dw({ 0x77A9, 0xCE9D, 0x5505 }), { 0x77A9, 0xCE9D, 0x5505 } },
			{ Instruction:dw({ 0x77A9, 0xCE9D, 0x5505, 0x426C }), { 0x77A9, 0xCE9D, 0x5505, 0x426C } },
			{ Instruction:dw({ 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632 }), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632 } },
			{ Instruction:dw({ 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F }), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F } },
			{ Instruction:dw({ 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427 }), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427 } },
			{ Instruction:dw({ 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427, 0xAA08 }), { 0x77A9, 0xCE9D, 0x5505, 0x426C, 0x8632, 0xFE4F, 0x3427, 0xAA08 } },

			{ Instruction:dw({ -0x8000 }), { 0x8000 } },
			{ Instruction:dw({ 0xFFFF, -0x8000 }), { 0xFFFF, 0x8000 } },
			{ Instruction:dw({ 0xFFFE, 0xFFFF, -0x8000 }), { 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw({ 0xFFFD, 0xFFFE, 0xFFFF, -0x8000 }), { 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw({ 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000 }), { 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw({ 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000 }), { 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw({ 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000 }), { 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw({ 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8000 }), { 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x8000 } },
			{ Instruction:dw({ 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF }), { 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF } },

			{ Instruction:dw({ 0xFFFF }), { 0xFFFF } },
			{ Instruction:dw({ 0x7FFF, 0xFFFF }), { 0x7FFF, 0xFFFF } },
			{ Instruction:dw({ 0xFFFE, 0x7FFF, 0xFFFF }), { 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw({ 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF }), { 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw({ 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF }), { 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw({ 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF }), { 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw({ 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF }), { 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
			{ Instruction:dw({ 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF }), { 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x7FFF, 0xFFFF } },
		}
		for _, tc in ipairs(tests) do
			local instr = tc[1]
			local expected = tc[2]
			assert.equals(Code.DeclareWord, instr:code())
			assert.equals(#expected, instr:declare_data_len())
			for i, value in ipairs(expected) do
				assert.equals(value, instr:get_declare_word_value(i - 1))
			end
		end
	end)

	-- stylua: ignore
	it("dw: fail", function()
		assert.has_error(function() Instruction:dw("") end)
		assert.has_error(function() Instruction:dw(from_hex("00")) end)
									Instruction:dw(from_hex("0000"))
		assert.has_error(function() Instruction:dw(from_hex("000000")) end)
									Instruction:dw(from_hex("00000000"))
		assert.has_error(function() Instruction:dw(from_hex("0000000000")) end)
									Instruction:dw(from_hex("000000000000"))
		assert.has_error(function() Instruction:dw(from_hex("00000000000000")) end)
									Instruction:dw(from_hex("0000000000000000"))
		assert.has_error(function() Instruction:dw(from_hex("000000000000000000")) end)
									Instruction:dw(from_hex("00000000000000000000"))
		assert.has_error(function() Instruction:dw(from_hex("0000000000000000000000")) end)
									Instruction:dw(from_hex("000000000000000000000000"))
		assert.has_error(function() Instruction:dw(from_hex("00000000000000000000000000")) end)
									Instruction:dw(from_hex("0000000000000000000000000000"))
		assert.has_error(function() Instruction:dw(from_hex("000000000000000000000000000000")) end)
									Instruction:dw(from_hex("00000000000000000000000000000000"))
		assert.has_error(function() Instruction:dw(from_hex("0000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dw(from_hex("000000000000000000000000000000000000")) end)

		assert.has_error(function() Instruction:dw(-0x8001) end)
		assert.has_error(function() Instruction:dw(0xFFFF, -0x8001) end)
		assert.has_error(function() Instruction:dw(0xFFFE, 0xFFFF, -0x8001) end)
		assert.has_error(function() Instruction:dw(0xFFFD, 0xFFFE, 0xFFFF, -0x8001) end)
		assert.has_error(function() Instruction:dw(0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001) end)
		assert.has_error(function() Instruction:dw(0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001) end)
		assert.has_error(function() Instruction:dw(0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001) end)
		assert.has_error(function() Instruction:dw(0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001) end)

		assert.has_error(function() Instruction:dw(0x10000) end)
		assert.has_error(function() Instruction:dw(0xFFFF, 0x10000) end)
		assert.has_error(function() Instruction:dw(0xFFFE, 0xFFFF, 0x10000) end)
		assert.has_error(function() Instruction:dw(0xFFFD, 0xFFFE, 0xFFFF, 0x10000) end)
		assert.has_error(function() Instruction:dw(0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000) end)
		assert.has_error(function() Instruction:dw(0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000) end)
		assert.has_error(function() Instruction:dw(0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000) end)
		assert.has_error(function() Instruction:dw(0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000) end)

		assert.has_error(function() Instruction:dw({ -0x8001 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFF, -0x8001 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFE, 0xFFFF, -0x8001 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFD, 0xFFFE, 0xFFFF, -0x8001 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, -0x8001 }) end)

		assert.has_error(function() Instruction:dw({ 0x10000 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFF, 0x10000 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFE, 0xFFFF, 0x10000 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFD, 0xFFFE, 0xFFFF, 0x10000 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000 }) end)
		assert.has_error(function() Instruction:dw({ 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, 0x10000 }) end)

		assert.has_error(function() Instruction:dw(true) end)
		assert.has_error(function() Instruction:dw(0xFFFF, true) end)
		assert.has_error(function() Instruction:dw(0xFFFE, 0xFFFF, true) end)
		assert.has_error(function() Instruction:dw(0xFFFD, 0xFFFE, 0xFFFF, true) end)
		assert.has_error(function() Instruction:dw(0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true) end)
		assert.has_error(function() Instruction:dw(0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true) end)
		assert.has_error(function() Instruction:dw(0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true) end)
		assert.has_error(function() Instruction:dw(0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true) end)

		assert.has_error(function() Instruction:dw({ true }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFF, true }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFE, 0xFFFF, true }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFD, 0xFFFE, 0xFFFF, true }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true }) end)
		assert.has_error(function() Instruction:dw({ 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true }) end)
		assert.has_error(function() Instruction:dw({ 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF, true }) end)

									Instruction:dw(from_hex("7788"))
		assert.has_error(function() Instruction:dw(from_hex("7788"), "") end)

									Instruction:dw({ 0x7788 })
		assert.has_error(function() Instruction:dw({ 0x7788 }, {}) end)
	end)

	it("dd", function()
		-- stylua: ignore
		local tests = {
			{ Instruction:dd(from_hex("9DCEA977")), { 0x77A9CE9D } },
			{ Instruction:dd(from_hex("9DCEA9776C420555")), { 0x77A9CE9D, 0x5505426C } },
			{ Instruction:dd(from_hex("9DCEA9776C4205554FFE3286")), { 0x77A9CE9D, 0x5505426C, 0x8632FE4F } },
			{ Instruction:dd(from_hex("9DCEA9776C4205554FFE328608AA2734")), { 0x77A9CE9D, 0x5505426C, 0x8632FE4F, 0x3427AA08 } },

			{ Instruction:dd(0x77A9CE9D), { 0x77A9CE9D } },
			{ Instruction:dd(0x77A9CE9D, 0x5505426C), { 0x77A9CE9D, 0x5505426C } },
			{ Instruction:dd(0x77A9CE9D, 0x5505426C, 0x8632FE4F), { 0x77A9CE9D, 0x5505426C, 0x8632FE4F } },
			{ Instruction:dd(0x77A9CE9D, 0x5505426C, 0x8632FE4F, 0x3427AA08), { 0x77A9CE9D, 0x5505426C, 0x8632FE4F, 0x3427AA08 } },

			{ Instruction:dd(-0x80000000), { 0x80000000 } },
			{ Instruction:dd(0xFFFFFFFF, -0x80000000), { 0xFFFFFFFF, 0x80000000 } },
			{ Instruction:dd(0xFFFFFFFE, 0xFFFFFFFF, -0x80000000), { 0xFFFFFFFE, 0xFFFFFFFF, 0x80000000 } },
			{ Instruction:dd(0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, -0x80000000), { 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, 0x80000000 } },
			{ Instruction:dd(0xFFFFFFFC, 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF), { 0xFFFFFFFC, 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF } },

			{ Instruction:dd(0xFFFFFFFF), { 0xFFFFFFFF } },
			{ Instruction:dd(0x7FFFFFFF, 0xFFFFFFFF), { 0x7FFFFFFF, 0xFFFFFFFF } },
			{ Instruction:dd(0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF), { 0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF } },
			{ Instruction:dd(0xFFFFFFFD, 0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF), { 0xFFFFFFFD, 0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF } },

			{ Instruction:dd({ 0x77A9CE9D }), { 0x77A9CE9D } },
			{ Instruction:dd({ 0x77A9CE9D, 0x5505426C }), { 0x77A9CE9D, 0x5505426C } },
			{ Instruction:dd({ 0x77A9CE9D, 0x5505426C, 0x8632FE4F }), { 0x77A9CE9D, 0x5505426C, 0x8632FE4F } },
			{ Instruction:dd({ 0x77A9CE9D, 0x5505426C, 0x8632FE4F, 0x3427AA08 }), { 0x77A9CE9D, 0x5505426C, 0x8632FE4F, 0x3427AA08 } },

			{ Instruction:dd({ -0x80000000 }), { 0x80000000 } },
			{ Instruction:dd({ 0xFFFFFFFF, -0x80000000 }), { 0xFFFFFFFF, 0x80000000 } },
			{ Instruction:dd({ 0xFFFFFFFE, 0xFFFFFFFF, -0x80000000 }), { 0xFFFFFFFE, 0xFFFFFFFF, 0x80000000 } },
			{ Instruction:dd({ 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, -0x80000000 }), { 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, 0x80000000 } },
			{ Instruction:dd({ 0xFFFFFFFC, 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF }), { 0xFFFFFFFC, 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF } },

			{ Instruction:dd({ 0xFFFFFFFF }), { 0xFFFFFFFF } },
			{ Instruction:dd({ 0x7FFFFFFF, 0xFFFFFFFF }), { 0x7FFFFFFF, 0xFFFFFFFF } },
			{ Instruction:dd({ 0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF }), { 0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF } },
			{ Instruction:dd({ 0xFFFFFFFD, 0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF }), { 0xFFFFFFFD, 0xFFFFFFFE, 0x7FFFFFFF, 0xFFFFFFFF } },
		}
		for _, tc in ipairs(tests) do
			local instr = tc[1]
			local expected = tc[2]
			assert.equals(Code.DeclareDword, instr:code())
			assert.equals(#expected, instr:declare_data_len())
			for i, value in ipairs(expected) do
				assert.equals(value, instr:get_declare_dword_value(i - 1))
			end
		end
	end)

	-- stylua: ignore
	it("dd: fail", function()
		assert.has_error(function() Instruction:dd("") end)
		assert.has_error(function() Instruction:dd(from_hex("00")) end)
		assert.has_error(function() Instruction:dd(from_hex("0000")) end)
		assert.has_error(function() Instruction:dd(from_hex("000000")) end)
									Instruction:dd(from_hex("00000000"))
		assert.has_error(function() Instruction:dd(from_hex("0000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("00000000000000")) end)
									Instruction:dd(from_hex("0000000000000000"))
		assert.has_error(function() Instruction:dd(from_hex("000000000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("00000000000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("0000000000000000000000")) end)
									Instruction:dd(from_hex("000000000000000000000000"))
		assert.has_error(function() Instruction:dd(from_hex("00000000000000000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("0000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("000000000000000000000000000000")) end)
									Instruction:dd(from_hex("00000000000000000000000000000000"))
		assert.has_error(function() Instruction:dd(from_hex("0000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("00000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dd(from_hex("0000000000000000000000000000000000000000")) end)

		assert.has_error(function() Instruction:dd(-0x80000001) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFF, -0x80000001) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFE, 0xFFFFFFFF, -0x80000001) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, -0x80000001) end)

		assert.has_error(function() Instruction:dd(0x100000000) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFF, 0x100000000) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFE, 0xFFFFFFFF, 0x100000000) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, 0x100000000) end)

		assert.has_error(function() Instruction:dd({ -0x80000001 }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFF, -0x80000001 }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFE, 0xFFFFFFFF, -0x80000001 }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, -0x80000001 }) end)

		assert.has_error(function() Instruction:dd({ 0x100000000 }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFF, 0x100000000 }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFE, 0xFFFFFFFF, 0x100000000 }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, 0x100000000 }) end)

		assert.has_error(function() Instruction:dd(true) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFF, true) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFE, 0xFFFFFFFF, true) end)
		assert.has_error(function() Instruction:dd(0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, true) end)

		assert.has_error(function() Instruction:dd({ true }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFF, true }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFE, 0xFFFFFFFF, true }) end)
		assert.has_error(function() Instruction:dd({ 0xFFFFFFFD, 0xFFFFFFFE, 0xFFFFFFFF, true }) end)

									Instruction:dd(from_hex("778899AA"))
		assert.has_error(function() Instruction:dd(from_hex("778899AA"), "") end)

									Instruction:dd({ 0x778899AA })
		assert.has_error(function() Instruction:dd({ 0x778899AA }, {}) end)
	end)

	it("dq", function()
		-- stylua: ignore
		local tests = {
			{ Instruction:dq(from_hex("123456789A000000")), { 0x9A78563412 } },
			{ Instruction:dq(from_hex("123456789A000000BCDEF01234000000")), { 0x9A78563412, 0x3412F0DEBC } },

			{ Instruction:dq(0x9A78563412), { 0x9A78563412 } },
			{ Instruction:dq(0x9A78563412, 0x3412F0DEBC), { 0x9A78563412, 0x3412F0DEBC } },
			{ Instruction:dq(-0x12345678), { -0x12345678 } },

			{ Instruction:dq({ 0x9A78563412 }), { 0x9A78563412 } },
			{ Instruction:dq({ 0x9A78563412, 0x3412F0DEBC }), { 0x9A78563412, 0x3412F0DEBC } },
			{ Instruction:dq({ -0x12345678 }), { -0x12345678 } },
		}
		-- stylua: ignore
		if has_int64 then
			tests[#tests + 1] = { Instruction:dq(from_hex("6C4205559DCEA977")), { 0x77A9CE9D5505426C } }
			tests[#tests + 1] = { Instruction:dq(from_hex("6C4205559DCEA97708AA27344FFE3286")), { 0x77A9CE9D5505426C, 0x8632FE4F3427AA08 } }

			tests[#tests + 1] = { Instruction:dq(0x77A9CE9D5505426C), { 0x77A9CE9D5505426C } }
			tests[#tests + 1] = { Instruction:dq(0x77A9CE9D5505426C, 0x8632FE4F3427AA08), { 0x77A9CE9D5505426C, 0x8632FE4F3427AA08 } }

			tests[#tests + 1] = { Instruction:dq(-0x8000000000000000), { 0x8000000000000000 } }
			tests[#tests + 1] = { Instruction:dq(0xFFFFFFFFFFFFFFFF, -0x8000000000000000), { 0xFFFFFFFFFFFFFFFF, 0x8000000000000000 } }
			tests[#tests + 1] = { Instruction:dq(0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF), { 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF } }

			tests[#tests + 1] = { Instruction:dq(0xFFFFFFFFFFFFFFFF), { 0xFFFFFFFFFFFFFFFF } }
			tests[#tests + 1] = { Instruction:dq(0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), { 0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF } }

			tests[#tests + 1] = { Instruction:dq({ 0x77A9CE9D5505426C }), { 0x77A9CE9D5505426C } }
			tests[#tests + 1] = { Instruction:dq({ 0x77A9CE9D5505426C, 0x8632FE4F3427AA08 }), { 0x77A9CE9D5505426C, 0x8632FE4F3427AA08 } }

			tests[#tests + 1] = { Instruction:dq({ -0x8000000000000000 }), { 0x8000000000000000 } }
			tests[#tests + 1] = { Instruction:dq({ 0xFFFFFFFFFFFFFFFF, -0x8000000000000000 }), { 0xFFFFFFFFFFFFFFFF, 0x8000000000000000 } }
			tests[#tests + 1] = { Instruction:dq({ 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF }), { 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF } }

			tests[#tests + 1] = { Instruction:dq({ 0xFFFFFFFFFFFFFFFF }), { 0xFFFFFFFFFFFFFFFF } }
			tests[#tests + 1] = { Instruction:dq({ 0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF }), { 0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF } }
		end
		for _, tc in ipairs(tests) do
			local instr = tc[1]
			local expected = tc[2]
			assert.equals(Code.DeclareQword, instr:code())
			assert.equals(#expected, instr:declare_data_len())
			for i, value in ipairs(expected) do
				assert.equals(value, instr:get_declare_qword_value(i - 1))
			end
		end
	end)

	-- stylua: ignore
	it("dq: fail", function()
		assert.has_error(function() Instruction:dq("") end)
		assert.has_error(function() Instruction:dq(from_hex("00")) end)
		assert.has_error(function() Instruction:dq(from_hex("0000")) end)
		assert.has_error(function() Instruction:dq(from_hex("000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("00000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("0000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("00000000000000")) end)
									Instruction:dq(from_hex("0000000000000000"))
		assert.has_error(function() Instruction:dq(from_hex("000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("00000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("0000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("00000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("0000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("000000000000000000000000000000")) end)
									Instruction:dq(from_hex("00000000000000000000000000000000"))
		assert.has_error(function() Instruction:dq(from_hex("0000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("00000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("0000000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("000000000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("00000000000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("0000000000000000000000000000000000000000000000")) end)
		assert.has_error(function() Instruction:dq(from_hex("000000000000000000000000000000000000000000000000")) end)

		assert.has_error(function() Instruction:dq(true) end)
		assert.has_error(function() Instruction:dq(0, true) end)

		assert.has_error(function() Instruction:dq({ true }) end)
		assert.has_error(function() Instruction:dq({ 0, true }) end)

									Instruction:dq(from_hex("778899AABBCCDDEE"))
		assert.has_error(function() Instruction:dq(from_hex("778899AABBCCDDEE"), "") end)

									Instruction:dq({ 0x778899AABBCCDDEE })
		assert.has_error(function() Instruction:dq({ 0x778899AABBCCDDEE }, {}) end)
	end)
end)
