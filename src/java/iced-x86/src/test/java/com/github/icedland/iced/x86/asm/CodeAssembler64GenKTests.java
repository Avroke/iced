// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler64GenKTests extends CodeAssemblerTestsBase {
	CodeAssembler64GenKTests() {
		super(64);
	}

	@Test
	void kaddb_kr_kr_kr() {
		testAssembler(c -> c.kaddb(k2, k3, k4), Instruction.create(Code.VEX_KADDB_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kaddd_kr_kr_kr() {
		testAssembler(c -> c.kaddd(k2, k3, k4), Instruction.create(Code.VEX_KADDD_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kaddq_kr_kr_kr() {
		testAssembler(c -> c.kaddq(k2, k3, k4), Instruction.create(Code.VEX_KADDQ_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kaddw_kr_kr_kr() {
		testAssembler(c -> c.kaddw(k2, k3, k4), Instruction.create(Code.VEX_KADDW_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandb_kr_kr_kr() {
		testAssembler(c -> c.kandb(k2, k3, k4), Instruction.create(Code.VEX_KANDB_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandd_kr_kr_kr() {
		testAssembler(c -> c.kandd(k2, k3, k4), Instruction.create(Code.VEX_KANDD_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandnb_kr_kr_kr() {
		testAssembler(c -> c.kandnb(k2, k3, k4), Instruction.create(Code.VEX_KANDNB_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandnd_kr_kr_kr() {
		testAssembler(c -> c.kandnd(k2, k3, k4), Instruction.create(Code.VEX_KANDND_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandnq_kr_kr_kr() {
		testAssembler(c -> c.kandnq(k2, k3, k4), Instruction.create(Code.VEX_KANDNQ_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandnw_kr_kr_kr() {
		testAssembler(c -> c.kandnw(k2, k3, k4), Instruction.create(Code.VEX_KANDNW_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandq_kr_kr_kr() {
		testAssembler(c -> c.kandq(k2, k3, k4), Instruction.create(Code.VEX_KANDQ_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kandw_kr_kr_kr() {
		testAssembler(c -> c.kandw(k2, k3, k4), Instruction.create(Code.VEX_KANDW_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kmovb_kr_r32() {
		testAssembler(c -> c.kmovb(k2, ebx), Instruction.create(Code.VEX_KMOVB_KR_R32, ICRegisters.k2, ICRegisters.ebx));
	}

	@Test
	void kmovb_r32_kr() {
		testAssembler(c -> c.kmovb(edx, k3), Instruction.create(Code.VEX_KMOVB_R32_KR, ICRegisters.edx, ICRegisters.k3));
	}

	@Test
	void kmovb_kr_kr() {
		testAssembler(c -> c.kmovb(k2, k3), Instruction.create(Code.VEX_KMOVB_KR_KM8, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kmovb_m_kr() {
		testAssembler(c -> c.kmovb(mem_ptr(0x0L).base(rcx), k3), Instruction.create(Code.VEX_KMOVB_M8_KR, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.k3));
	}

	@Test
	void kmovb_kr_m() {
		testAssembler(c -> c.kmovb(k2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_KMOVB_KR_KM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void kmovd_kr_r32() {
		testAssembler(c -> c.kmovd(k2, ebx), Instruction.create(Code.VEX_KMOVD_KR_R32, ICRegisters.k2, ICRegisters.ebx));
	}

	@Test
	void kmovd_r32_kr() {
		testAssembler(c -> c.kmovd(edx, k3), Instruction.create(Code.VEX_KMOVD_R32_KR, ICRegisters.edx, ICRegisters.k3));
	}

	@Test
	void kmovd_kr_kr() {
		testAssembler(c -> c.kmovd(k2, k3), Instruction.create(Code.VEX_KMOVD_KR_KM32, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kmovd_m_kr() {
		testAssembler(c -> c.kmovd(mem_ptr(0x0L).base(rcx), k3), Instruction.create(Code.VEX_KMOVD_M32_KR, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.k3));
	}

	@Test
	void kmovd_kr_m() {
		testAssembler(c -> c.kmovd(k2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_KMOVD_KR_KM32, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void kmovq_kr_r64() {
		testAssembler(c -> c.kmovq(k2, rbx), Instruction.create(Code.VEX_KMOVQ_KR_R64, ICRegisters.k2, ICRegisters.rbx));
	}

	@Test
	void kmovq_r64_kr() {
		testAssembler(c -> c.kmovq(rdx, k3), Instruction.create(Code.VEX_KMOVQ_R64_KR, ICRegisters.rdx, ICRegisters.k3));
	}

	@Test
	void kmovq_kr_kr() {
		testAssembler(c -> c.kmovq(k2, k3), Instruction.create(Code.VEX_KMOVQ_KR_KM64, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kmovq_m_kr() {
		testAssembler(c -> c.kmovq(mem_ptr(0x0L).base(rcx), k3), Instruction.create(Code.VEX_KMOVQ_M64_KR, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.k3));
	}

	@Test
	void kmovq_kr_m() {
		testAssembler(c -> c.kmovq(k2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_KMOVQ_KR_KM64, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void kmovw_kr_r32() {
		testAssembler(c -> c.kmovw(k2, ebx), Instruction.create(Code.VEX_KMOVW_KR_R32, ICRegisters.k2, ICRegisters.ebx));
	}

	@Test
	void kmovw_r32_kr() {
		testAssembler(c -> c.kmovw(edx, k3), Instruction.create(Code.VEX_KMOVW_R32_KR, ICRegisters.edx, ICRegisters.k3));
	}

	@Test
	void kmovw_kr_kr() {
		testAssembler(c -> c.kmovw(k2, k3), Instruction.create(Code.VEX_KMOVW_KR_KM16, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kmovw_m_kr() {
		testAssembler(c -> c.kmovw(mem_ptr(0x0L).base(rcx), k3), Instruction.create(Code.VEX_KMOVW_M16_KR, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.k3));
	}

	@Test
	void kmovw_kr_m() {
		testAssembler(c -> c.kmovw(k2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_KMOVW_KR_KM16, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void knotb_kr_kr() {
		testAssembler(c -> c.knotb(k2, k3), Instruction.create(Code.VEX_KNOTB_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void knotd_kr_kr() {
		testAssembler(c -> c.knotd(k2, k3), Instruction.create(Code.VEX_KNOTD_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void knotq_kr_kr() {
		testAssembler(c -> c.knotq(k2, k3), Instruction.create(Code.VEX_KNOTQ_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void knotw_kr_kr() {
		testAssembler(c -> c.knotw(k2, k3), Instruction.create(Code.VEX_KNOTW_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void korb_kr_kr_kr() {
		testAssembler(c -> c.korb(k2, k3, k4), Instruction.create(Code.VEX_KORB_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kord_kr_kr_kr() {
		testAssembler(c -> c.kord(k2, k3, k4), Instruction.create(Code.VEX_KORD_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void korq_kr_kr_kr() {
		testAssembler(c -> c.korq(k2, k3, k4), Instruction.create(Code.VEX_KORQ_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kortestb_kr_kr() {
		testAssembler(c -> c.kortestb(k2, k3), Instruction.create(Code.VEX_KORTESTB_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kortestd_kr_kr() {
		testAssembler(c -> c.kortestd(k2, k3), Instruction.create(Code.VEX_KORTESTD_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kortestq_kr_kr() {
		testAssembler(c -> c.kortestq(k2, k3), Instruction.create(Code.VEX_KORTESTQ_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kortestw_kr_kr() {
		testAssembler(c -> c.kortestw(k2, k3), Instruction.create(Code.VEX_KORTESTW_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void korw_kr_kr_kr() {
		testAssembler(c -> c.korw(k2, k3, k4), Instruction.create(Code.VEX_KORW_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kshiftlb_kr_kr_i() {
		testAssembler(c -> c.kshiftlb(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTLB_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void kshiftld_kr_kr_i() {
		testAssembler(c -> c.kshiftld(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTLD_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void kshiftlq_kr_kr_i() {
		testAssembler(c -> c.kshiftlq(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTLQ_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void kshiftlw_kr_kr_i() {
		testAssembler(c -> c.kshiftlw(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTLW_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void kshiftrb_kr_kr_i() {
		testAssembler(c -> c.kshiftrb(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTRB_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void kshiftrd_kr_kr_i() {
		testAssembler(c -> c.kshiftrd(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTRD_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void kshiftrq_kr_kr_i() {
		testAssembler(c -> c.kshiftrq(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTRQ_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void kshiftrw_kr_kr_i() {
		testAssembler(c -> c.kshiftrw(k2, k3, -5), Instruction.create(Code.VEX_KSHIFTRW_KR_KR_IMM8, ICRegisters.k2, ICRegisters.k3, -5));
	}

	@Test
	void ktestb_kr_kr() {
		testAssembler(c -> c.ktestb(k2, k3), Instruction.create(Code.VEX_KTESTB_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void ktestd_kr_kr() {
		testAssembler(c -> c.ktestd(k2, k3), Instruction.create(Code.VEX_KTESTD_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void ktestq_kr_kr() {
		testAssembler(c -> c.ktestq(k2, k3), Instruction.create(Code.VEX_KTESTQ_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void ktestw_kr_kr() {
		testAssembler(c -> c.ktestw(k2, k3), Instruction.create(Code.VEX_KTESTW_KR_KR, ICRegisters.k2, ICRegisters.k3));
	}

	@Test
	void kunpckbw_kr_kr_kr() {
		testAssembler(c -> c.kunpckbw(k2, k3, k4), Instruction.create(Code.VEX_KUNPCKBW_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kunpckdq_kr_kr_kr() {
		testAssembler(c -> c.kunpckdq(k2, k3, k4), Instruction.create(Code.VEX_KUNPCKDQ_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kunpckwd_kr_kr_kr() {
		testAssembler(c -> c.kunpckwd(k2, k3, k4), Instruction.create(Code.VEX_KUNPCKWD_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxnorb_kr_kr_kr() {
		testAssembler(c -> c.kxnorb(k2, k3, k4), Instruction.create(Code.VEX_KXNORB_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxnord_kr_kr_kr() {
		testAssembler(c -> c.kxnord(k2, k3, k4), Instruction.create(Code.VEX_KXNORD_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxnorq_kr_kr_kr() {
		testAssembler(c -> c.kxnorq(k2, k3, k4), Instruction.create(Code.VEX_KXNORQ_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxnorw_kr_kr_kr() {
		testAssembler(c -> c.kxnorw(k2, k3, k4), Instruction.create(Code.VEX_KXNORW_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxorb_kr_kr_kr() {
		testAssembler(c -> c.kxorb(k2, k3, k4), Instruction.create(Code.VEX_KXORB_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxord_kr_kr_kr() {
		testAssembler(c -> c.kxord(k2, k3, k4), Instruction.create(Code.VEX_KXORD_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxorq_kr_kr_kr() {
		testAssembler(c -> c.kxorq(k2, k3, k4), Instruction.create(Code.VEX_KXORQ_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

	@Test
	void kxorw_kr_kr_kr() {
		testAssembler(c -> c.kxorw(k2, k3, k4), Instruction.create(Code.VEX_KXORW_KR_KR_KR, ICRegisters.k2, ICRegisters.k3, ICRegisters.k4));
	}

/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_1() {
	testAssemblerDeclareByte(c -> c.db((byte)1), new byte[] {(byte)1});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_2() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2), new byte[] {(byte)1, (byte)2});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_3() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3), new byte[] {(byte)1, (byte)2, (byte)3});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_4() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_5() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_6() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_7() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_8() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_9() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_10() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_11() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_12() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_13() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_14() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_15() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_16() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_1() {
	testAssemblerDeclareWord(c -> c.dw((short)1), new short[] {(short)1});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_2() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2), new short[] {(short)1, (short)2});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_3() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3), new short[] {(short)1, (short)2, (short)3});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_4() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4), new short[] {(short)1, (short)2, (short)3, (short)4});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_5() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_6() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_7() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_8() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_1() {
	testAssemblerDeclareDword(c -> c.dd((int)1), new int[] {(int)1});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_2() {
	testAssemblerDeclareDword(c -> c.dd((int)1, (int)2), new int[] {(int)1, (int)2});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_3() {
	testAssemblerDeclareDword(c -> c.dd((int)1, (int)2, (int)3), new int[] {(int)1, (int)2, (int)3});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_4() {
	testAssemblerDeclareDword(c -> c.dd((int)1, (int)2, (int)3, (int)4), new int[] {(int)1, (int)2, (int)3, (int)4});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_1() {
	testAssemblerDeclareDword(c -> c.dd((float)1), new float[] {(float)1});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_2() {
	testAssemblerDeclareDword(c -> c.dd((float)1, (float)2), new float[] {(float)1, (float)2});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_3() {
	testAssemblerDeclareDword(c -> c.dd((float)1, (float)2, (float)3), new float[] {(float)1, (float)2, (float)3});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_4() {
	testAssemblerDeclareDword(c -> c.dd((float)1, (float)2, (float)3, (float)4), new float[] {(float)1, (float)2, (float)3, (float)4});
}
/**
 * Creates a dq asm directive with the type long.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_long_1() {
	testAssemblerDeclareQword(c -> c.dq((long)1), new long[] {(long)1});
}
/**
 * Creates a dq asm directive with the type long.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_long_2() {
	testAssemblerDeclareQword(c -> c.dq((long)1, (long)2), new long[] {(long)1, (long)2});
}
/**
 * Creates a dq asm directive with the type double.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_double_1() {
	testAssemblerDeclareQword(c -> c.dq((double)1), new double[] {(double)1});
}
/**
 * Creates a dq asm directive with the type double.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_double_2() {
	testAssemblerDeclareQword(c -> c.dq((double)1, (double)2), new double[] {(double)1, (double)2});
}
}
