// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler64GenJTests extends CodeAssemblerTestsBase {
	CodeAssembler64GenJTests() {
		super(64);
	}

	@Test
	void ja_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.ja(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.ja(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void ja_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.ja(0x31D0L), Instruction.createBranch(Code.JA_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.ja(0x31D0L), Instruction.createBranch(Code.JA_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jae_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jae_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jae(0x31D0L), Instruction.createBranch(Code.JAE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jae(0x31D0L), Instruction.createBranch(Code.JAE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jb_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jb_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jb(0x31D0L), Instruction.createBranch(Code.JB_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jb(0x31D0L), Instruction.createBranch(Code.JB_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jbe_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jbe_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jbe(0x31D0L), Instruction.createBranch(Code.JBE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jbe(0x31D0L), Instruction.createBranch(Code.JBE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jc_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jc_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jc(0x31D0L), Instruction.createBranch(Code.JB_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jc(0x31D0L), Instruction.createBranch(Code.JB_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void je_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.je(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.je(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void je_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.je(0x31D0L), Instruction.createBranch(Code.JE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.je(0x31D0L), Instruction.createBranch(Code.JE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jg_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jg(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jg(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jg_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jg(0x31D0L), Instruction.createBranch(Code.JG_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jg(0x31D0L), Instruction.createBranch(Code.JG_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jge_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jge_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jge(0x31D0L), Instruction.createBranch(Code.JGE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jge(0x31D0L), Instruction.createBranch(Code.JGE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jl_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jl_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jl(0x31D0L), Instruction.createBranch(Code.JL_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jl(0x31D0L), Instruction.createBranch(Code.JL_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jle_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jle_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jle(0x31D0L), Instruction.createBranch(Code.JLE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jle(0x31D0L), Instruction.createBranch(Code.JLE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jmp_r16() {
		testAssembler(c -> c.jmp(dx), Instruction.create(Code.JMP_RM16, ICRegisters.dx), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.AMD);
	}

	@Test
	void jmp_r64() {
		testAssembler(c -> c.jmp(rdx), Instruction.create(Code.JMP_RM64, ICRegisters.rdx));
	}

	@Test
	void jmp_m() {
		{ /* if (dst.size == MemoryOperandSize.TBYTE) */
			testAssembler(c -> c.jmp(tword_ptr(0x0L).base(rdx)), Instruction.create(Code.JMP_M1664, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.jmp(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.JMP_RM64, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.FWORD) */
			testAssembler(c -> c.jmp(fword_ptr(0x0L).base(rdx)), Instruction.create(Code.JMP_M1632, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			{ /* if (getBitness() >= 32) */
				// Skipping JMP_RM32 - Not supported by current bitness
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.jmp(word_ptr(0x0L).base(rdx)), Instruction.create(Code.JMP_RM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.AMD);
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.jmp(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.JMP_RM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.AMD);
			});
		}
	}

	@Test
	void jmp_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jmp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JMP_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jmp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JMP_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jmp_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jmp(0x31D0L), Instruction.createBranch(Code.JMP_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jmp(0x31D0L), Instruction.createBranch(Code.JMP_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jna_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jna(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jna(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jna_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jna(0x31D0L), Instruction.createBranch(Code.JBE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jna(0x31D0L), Instruction.createBranch(Code.JBE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnae_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnae_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnae(0x31D0L), Instruction.createBranch(Code.JB_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnae(0x31D0L), Instruction.createBranch(Code.JB_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnb_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnb_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnb(0x31D0L), Instruction.createBranch(Code.JAE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnb(0x31D0L), Instruction.createBranch(Code.JAE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnbe_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnbe_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnbe(0x31D0L), Instruction.createBranch(Code.JA_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnbe(0x31D0L), Instruction.createBranch(Code.JA_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnc_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnc_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnc(0x31D0L), Instruction.createBranch(Code.JAE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnc(0x31D0L), Instruction.createBranch(Code.JAE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jne_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jne(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jne(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jne_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jne(0x31D0L), Instruction.createBranch(Code.JNE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jne(0x31D0L), Instruction.createBranch(Code.JNE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jng_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jng(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jng(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jng_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jng(0x31D0L), Instruction.createBranch(Code.JLE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jng(0x31D0L), Instruction.createBranch(Code.JLE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnge_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnge_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnge(0x31D0L), Instruction.createBranch(Code.JL_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnge(0x31D0L), Instruction.createBranch(Code.JL_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnl_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnl_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnl(0x31D0L), Instruction.createBranch(Code.JGE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnl(0x31D0L), Instruction.createBranch(Code.JGE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnle_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnle_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnle(0x31D0L), Instruction.createBranch(Code.JG_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnle(0x31D0L), Instruction.createBranch(Code.JG_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jno_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jno(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNO_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jno(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNO_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jno_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jno(0x31D0L), Instruction.createBranch(Code.JNO_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jno(0x31D0L), Instruction.createBranch(Code.JNO_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnp_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnp_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnp(0x31D0L), Instruction.createBranch(Code.JNP_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnp(0x31D0L), Instruction.createBranch(Code.JNP_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jns_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jns(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNS_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jns(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNS_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jns_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jns(0x31D0L), Instruction.createBranch(Code.JNS_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jns(0x31D0L), Instruction.createBranch(Code.JNS_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnz_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jnz_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jnz(0x31D0L), Instruction.createBranch(Code.JNE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jnz(0x31D0L), Instruction.createBranch(Code.JNE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jo_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JO_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JO_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jo_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jo(0x31D0L), Instruction.createBranch(Code.JO_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jo(0x31D0L), Instruction.createBranch(Code.JO_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jp_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jp_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jp(0x31D0L), Instruction.createBranch(Code.JP_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jp(0x31D0L), Instruction.createBranch(Code.JP_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jpe_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jpe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jpe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jpe_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jpe(0x31D0L), Instruction.createBranch(Code.JP_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jpe(0x31D0L), Instruction.createBranch(Code.JP_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jpo_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jpo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jpo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jpo_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jpo(0x31D0L), Instruction.createBranch(Code.JNP_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jpo(0x31D0L), Instruction.createBranch(Code.JNP_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jrcxz_l() {
		testAssembler(c -> c.jrcxz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JRCXZ_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.BRANCH);
	}

	@Test
	void jrcxz_lu64() {
		testAssembler(c -> c.jrcxz(0x31D0L), Instruction.createBranch(Code.JRCXZ_REL8_64, 0x31D0L), TestInstrFlags.BRANCH_U64);
	}

	@Test
	void js_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.js(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JS_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.js(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JS_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void js_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.js(0x31D0L), Instruction.createBranch(Code.JS_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.js(0x31D0L), Instruction.createBranch(Code.JS_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jz_l() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL8_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL32_64, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void jz_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ /* if (getBitness() == 64) */
				testAssembler(c -> c.jz(0x31D0L), Instruction.createBranch(Code.JE_REL8_64, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
			} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (getBitness() == 64) */
			testAssembler(c -> c.jz(0x31D0L), Instruction.createBranch(Code.JE_REL32_64, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_1() {
	testAssemblerDeclareByte(c -> c.db((byte)1), new byte[] {(byte)1});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_2() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2), new byte[] {(byte)1, (byte)2});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_3() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3), new byte[] {(byte)1, (byte)2, (byte)3});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_4() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_5() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_6() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_7() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_8() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_9() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_10() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_11() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_12() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_13() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_14() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_15() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15});
}
/**
 * Creates a db asm directive with the type byte.<!-- -->
 */
@Test
void testAssemblerDeclareByte_db_byte_16() {
	testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_1() {
	testAssemblerDeclareWord(c -> c.dw((short)1), new short[] {(short)1});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_2() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2), new short[] {(short)1, (short)2});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_3() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3), new short[] {(short)1, (short)2, (short)3});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_4() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4), new short[] {(short)1, (short)2, (short)3, (short)4});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_5() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_6() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_7() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7});
}
/**
 * Creates a dw asm directive with the type short.<!-- -->
 */
@Test
void testAssemblerDeclareWord_dw_short_8() {
	testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_1() {
	testAssemblerDeclareDword(c -> c.dd((int)1), new int[] {(int)1});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_2() {
	testAssemblerDeclareDword(c -> c.dd((int)1, (int)2), new int[] {(int)1, (int)2});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_3() {
	testAssemblerDeclareDword(c -> c.dd((int)1, (int)2, (int)3), new int[] {(int)1, (int)2, (int)3});
}
/**
 * Creates a dd asm directive with the type int.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_int_4() {
	testAssemblerDeclareDword(c -> c.dd((int)1, (int)2, (int)3, (int)4), new int[] {(int)1, (int)2, (int)3, (int)4});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_1() {
	testAssemblerDeclareDword(c -> c.dd((float)1), new float[] {(float)1});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_2() {
	testAssemblerDeclareDword(c -> c.dd((float)1, (float)2), new float[] {(float)1, (float)2});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_3() {
	testAssemblerDeclareDword(c -> c.dd((float)1, (float)2, (float)3), new float[] {(float)1, (float)2, (float)3});
}
/**
 * Creates a dd asm directive with the type float.<!-- -->
 */
@Test
void testAssemblerDeclareDword_dd_float_4() {
	testAssemblerDeclareDword(c -> c.dd((float)1, (float)2, (float)3, (float)4), new float[] {(float)1, (float)2, (float)3, (float)4});
}
/**
 * Creates a dq asm directive with the type long.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_long_1() {
	testAssemblerDeclareQword(c -> c.dq((long)1), new long[] {(long)1});
}
/**
 * Creates a dq asm directive with the type long.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_long_2() {
	testAssemblerDeclareQword(c -> c.dq((long)1, (long)2), new long[] {(long)1, (long)2});
}
/**
 * Creates a dq asm directive with the type double.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_double_1() {
	testAssemblerDeclareQword(c -> c.dq((double)1), new double[] {(double)1});
}
/**
 * Creates a dq asm directive with the type double.<!-- -->
 */
@Test
void testAssemblerDeclareQword_dq_double_2() {
	testAssemblerDeclareQword(c -> c.dq((double)1, (double)2), new double[] {(double)1, (double)2});
}
}
