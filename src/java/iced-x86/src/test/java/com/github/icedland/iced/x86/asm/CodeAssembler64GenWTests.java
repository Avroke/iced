// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler64GenWTests extends CodeAssemblerTestsBase {
	CodeAssembler64GenWTests() {
		super(64);
	}

	@Test
	void wait_() {
		testAssembler(c -> c.wait_(), Instruction.create(Code.WAIT));
	}

	@Test
	void wbinvd() {
		testAssembler(c -> c.wbinvd(), Instruction.create(Code.WBINVD));
	}

	@Test
	void wbnoinvd() {
		testAssembler(c -> c.wbnoinvd(), Instruction.create(Code.WBNOINVD));
	}

	@Test
	void wrfsbase_r32() {
		testAssembler(c -> c.wrfsbase(edx), Instruction.create(Code.WRFSBASE_R32, ICRegisters.edx));
	}

	@Test
	void wrfsbase_r64() {
		testAssembler(c -> c.wrfsbase(rdx), Instruction.create(Code.WRFSBASE_R64, ICRegisters.rdx));
	}

	@Test
	void wrgsbase_r32() {
		testAssembler(c -> c.wrgsbase(edx), Instruction.create(Code.WRGSBASE_R32, ICRegisters.edx));
	}

	@Test
	void wrgsbase_r64() {
		testAssembler(c -> c.wrgsbase(rdx), Instruction.create(Code.WRGSBASE_R64, ICRegisters.rdx));
	}

	@Test
	void wrmsr() {
		testAssembler(c -> c.wrmsr(), Instruction.create(Code.WRMSR));
	}

	@Test
	void wrpkru() {
		testAssembler(c -> c.wrpkru(), Instruction.create(Code.WRPKRU));
	}

	@Test
	void wrssd_m_r32() {
		testAssembler(c -> c.wrssd(mem_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.WRSSD_M32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void wrssq_m_r64() {
		testAssembler(c -> c.wrssq(mem_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.WRSSQ_M64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void wrudbg() {
		testAssembler(c -> c.wrudbg(), Instruction.create(Code.WRUDBG), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.UDBG);
	}

	@Test
	void wrussd_m_r32() {
		testAssembler(c -> c.wrussd(mem_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.WRUSSD_M32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void wrussq_m_r64() {
		testAssembler(c -> c.wrussq(mem_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.WRUSSQ_M64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_1() {
		testAssemblerDeclareByte(c -> c.db((byte)1), new byte[] {(byte)1});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_2() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2), new byte[] {(byte)1, (byte)2});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_3() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3), new byte[] {(byte)1, (byte)2, (byte)3});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_4() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_5() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_6() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_7() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_8() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_9() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_10() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_11() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_12() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_13() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_14() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_15() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15});
	}

	/**
	 * Creates a db asm directive with the type byte.<!-- -->
	 */
	@Test
	void testAssemblerDeclareByte_db_byte_16() {
		testAssemblerDeclareByte(c -> c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16});
	}
	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_1() {
		testAssemblerDeclareWord(c -> c.dw((short)1), new short[] {(short)1});
	}

	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_2() {
		testAssemblerDeclareWord(c -> c.dw((short)1, (short)2), new short[] {(short)1, (short)2});
	}

	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_3() {
		testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3), new short[] {(short)1, (short)2, (short)3});
	}

	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_4() {
		testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4), new short[] {(short)1, (short)2, (short)3, (short)4});
	}

	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_5() {
		testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5});
	}

	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_6() {
		testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6});
	}

	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_7() {
		testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7});
	}

	/**
	 * Creates a dw asm directive with the type short.<!-- -->
	 */
	@Test
	void testAssemblerDeclareWord_dw_short_8() {
		testAssemblerDeclareWord(c -> c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8});
	}
	/**
	 * Creates a dd asm directive with the type int.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_int_1() {
		testAssemblerDeclareDword(c -> c.dd((int)1), new int[] {(int)1});
	}

	/**
	 * Creates a dd asm directive with the type int.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_int_2() {
		testAssemblerDeclareDword(c -> c.dd((int)1, (int)2), new int[] {(int)1, (int)2});
	}

	/**
	 * Creates a dd asm directive with the type int.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_int_3() {
		testAssemblerDeclareDword(c -> c.dd((int)1, (int)2, (int)3), new int[] {(int)1, (int)2, (int)3});
	}

	/**
	 * Creates a dd asm directive with the type int.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_int_4() {
		testAssemblerDeclareDword(c -> c.dd((int)1, (int)2, (int)3, (int)4), new int[] {(int)1, (int)2, (int)3, (int)4});
	}

	/**
	 * Creates a dd asm directive with the type float.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_float_1() {
		testAssemblerDeclareDword(c -> c.dd((float)1), new float[] {(float)1});
	}

	/**
	 * Creates a dd asm directive with the type float.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_float_2() {
		testAssemblerDeclareDword(c -> c.dd((float)1, (float)2), new float[] {(float)1, (float)2});
	}

	/**
	 * Creates a dd asm directive with the type float.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_float_3() {
		testAssemblerDeclareDword(c -> c.dd((float)1, (float)2, (float)3), new float[] {(float)1, (float)2, (float)3});
	}

	/**
	 * Creates a dd asm directive with the type float.<!-- -->
	 */
	@Test
	void testAssemblerDeclareDword_dd_float_4() {
		testAssemblerDeclareDword(c -> c.dd((float)1, (float)2, (float)3, (float)4), new float[] {(float)1, (float)2, (float)3, (float)4});
	}
	/**
	 * Creates a dq asm directive with the type long.<!-- -->
	 */
	@Test
	void testAssemblerDeclareQword_dq_long_1() {
		testAssemblerDeclareQword(c -> c.dq((long)1), new long[] {(long)1});
	}

	/**
	 * Creates a dq asm directive with the type long.<!-- -->
	 */
	@Test
	void testAssemblerDeclareQword_dq_long_2() {
		testAssemblerDeclareQword(c -> c.dq((long)1, (long)2), new long[] {(long)1, (long)2});
	}

	/**
	 * Creates a dq asm directive with the type double.<!-- -->
	 */
	@Test
	void testAssemblerDeclareQword_dq_double_1() {
		testAssemblerDeclareQword(c -> c.dq((double)1), new double[] {(double)1});
	}

	/**
	 * Creates a dq asm directive with the type double.<!-- -->
	 */
	@Test
	void testAssemblerDeclareQword_dq_double_2() {
		testAssemblerDeclareQword(c -> c.dq((double)1, (double)2), new double[] {(double)1, (double)2});
	}
}
