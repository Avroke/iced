// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

package com.github.icedland.iced.x86.dec;

/**
 * Decoder options
 */
public final class DecoderOptions {
	private DecoderOptions() {
	}

	/**
	 * No option is enabled
	 */
	public static final int NONE = 0x0000_0000;
	/**
	 * Disable some checks for invalid encodings of instructions, eg.<!-- --> most instructions can&apos;t use a <code>LOCK</code> prefix so if one is found, they&apos;re decoded as {@link com.github.icedland.iced.x86.Code#INVALID} unless this option is enabled.<!-- -->
	 */
	public static final int NO_INVALID_CHECK = 0x0000_0001;
	/**
	 * AMD decoder: allow 16-bit branch/ret instructions in 64-bit mode, no <code>o64 CALL/JMP FAR [mem], o64 LSS/LFS/LGS</code>, <code>UD0</code> has no modr/m byte, decode <code>LOCK MOV CR</code>.<!-- --> The AMD decoder can still decode Intel instructions.<!-- -->
	 */
	public static final int AMD = 0x0000_0002;
	/**
	 * Decode opcodes <code>0F0D</code> and <code>0F18-0F1F</code> as reserved-nop instructions (eg.<!-- --> {@link com.github.icedland.iced.x86.Code#RESERVEDNOP_RM32_R32_0F1D})
	 */
	public static final int FORCE_RESERVED_NOP = 0x0000_0004;
	/**
	 * Decode <code>UMOV</code> instructions
	 */
	public static final int UMOV = 0x0000_0008;
	/**
	 * Decode <code>XBTS</code>/<code>IBTS</code>
	 */
	public static final int XBTS = 0x0000_0010;
	/**
	 * Decode <code>0FA6</code>/<code>0FA7</code> as <code>CMPXCHG</code>
	 */
	public static final int CMPXCHG486A = 0x0000_0020;
	/**
	 * Decode some old removed FPU instructions (eg.<!-- --> <code>FRSTPM</code>)
	 */
	public static final int OLD_FPU = 0x0000_0040;
	/**
	 * Decode <code>PCOMMIT</code>
	 */
	public static final int PCOMMIT = 0x0000_0080;
	/**
	 * Decode 286 <code>STOREALL</code>/<code>LOADALL</code> (<code>0F04</code> and <code>0F05</code>)
	 */
	public static final int LOADALL286 = 0x0000_0100;
	/**
	 * Decode 386 <code>LOADALL</code>
	 */
	public static final int LOADALL386 = 0x0000_0200;
	/**
	 * Decode <code>CL1INVMB</code>
	 */
	public static final int CL1INVMB = 0x0000_0400;
	/**
	 * Decode <code>MOV r32,tr</code> and <code>MOV tr,r32</code>
	 */
	public static final int MOV_TR = 0x0000_0800;
	/**
	 * Decode <code>JMPE</code> instructions
	 */
	public static final int JMPE = 0x0000_1000;
	/**
	 * Don&apos;t decode <code>PAUSE</code>, decode <code>NOP</code> instead
	 */
	public static final int NO_PAUSE = 0x0000_2000;
	/**
	 * Don&apos;t decode <code>WBNOINVD</code>, decode <code>WBINVD</code> instead
	 */
	public static final int NO_WBNOINVD = 0x0000_4000;
	/**
	 * Decode undocumented Intel <code>RDUDBG</code> and <code>WRUDBG</code> instructions
	 */
	public static final int UDBG = 0x0000_8000;
	/**
	 * Don&apos;t decode <code>TZCNT</code>, decode <code>BSF</code> instead
	 */
	public static final int NO_MPFX_0FBC = 0x0001_0000;
	/**
	 * Don&apos;t decode <code>LZCNT</code>, decode <code>BSR</code> instead
	 */
	public static final int NO_MPFX_0FBD = 0x0002_0000;
	/**
	 * Don&apos;t decode <code>LAHF</code> and <code>SAHF</code> in 64-bit mode
	 */
	public static final int NO_LAHF_SAHF_64 = 0x0004_0000;
	/**
	 * Decode <code>MPX</code> instructions
	 */
	public static final int MPX = 0x0008_0000;
	/**
	 * Decode most Cyrix instructions: <code>FPU</code>, <code>EMMI</code>, <code>SMM</code>, <code>DDI</code>
	 */
	public static final int CYRIX = 0x0010_0000;
	/**
	 * Decode Cyrix <code>SMINT 0F7E</code> (Cyrix 6x86 or earlier)
	 */
	public static final int CYRIX_SMINT_0F7E = 0x0020_0000;
	/**
	 * Decode Cyrix <code>DMI</code> instructions (AMD Geode GX/LX)
	 */
	public static final int CYRIX_DMI = 0x0040_0000;
	/**
	 * Decode Centaur <code>ALTINST</code>
	 */
	public static final int ALTINST = 0x0080_0000;
	/**
	 * Decode Intel Knights Corner instructions
	 */
	public static final int KNC = 0x0100_0000;
}
