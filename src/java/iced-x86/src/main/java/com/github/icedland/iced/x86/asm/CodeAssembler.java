// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

package com.github.icedland.iced.x86.asm;

import java.util.ArrayList;
import java.util.List;
import com.github.icedland.iced.x86.Code;
import com.github.icedland.iced.x86.CodeWriter;
import com.github.icedland.iced.x86.Instruction;
import com.github.icedland.iced.x86.MemoryOperand;
import com.github.icedland.iced.x86.Mnemonic;
import com.github.icedland.iced.x86.Register;
import com.github.icedland.iced.x86.enc.BlockEncoder;
import com.github.icedland.iced.x86.enc.BlockEncoderOptions;
import com.github.icedland.iced.x86.enc.BlockEncoderResult;
import com.github.icedland.iced.x86.enc.InstructionBlock;

/**
 * High-Level CodeAssembler
 */
public class CodeAssembler {
	final int bitness;
	final ArrayList<Instruction> instructions;
	long currentLabelId;
	CodeLabel currentLabel;
	CodeLabel currentAnonLabel;
	CodeLabel nextAnonLabel;
	boolean definedAnonLabel;
	int prefixFlags;
	boolean preferVex;
	boolean preferShortBranch;

	/**
	 * Creates a new instance of this assembler
	 *
	 * @param bitness The assembler instruction set bitness, either 16, 32 or 64 bit.
	 */
	public CodeAssembler(int bitness) {
		switch (bitness) {
		case 16:
		case 32:
		case 64:
			break;
		default:
			throw new IllegalArgumentException("bitness");
		}
		this.bitness = bitness;
		this.instructions = new ArrayList<Instruction>();
		this.currentLabelId = 0;
		this.currentLabel = null;
		this.currentAnonLabel = null;
		this.nextAnonLabel = null;
		this.definedAnonLabel = false;
		this.prefixFlags = PrefixFlags.NONE;
		this.preferVex = true;
		this.preferShortBranch = true;
	}

	/**
	 * Gets the bitness
	 */
	public int getBitness() {
		return bitness;
	}

	/**
	 * <code>true</code> to prefer VEX encoding over EVEX. This is the default.
	 *
	 * @see #vex()
	 * @see #evex()
	 */
	public boolean getPreferVex() {
		return preferVex;
	}

	/**
	 * <code>true</code> to prefer VEX encoding over EVEX. This is the default.
	 *
	 * @see #vex()
	 * @see #evex()
	 */
	public void getPreferVex(boolean value) {
		preferVex = value;
	}

	/**
	 * <code>true</code> to prefer short branch encoding. This is the default.
	 */
	public boolean getPreferShortBranch() {
		return preferShortBranch;
	}

	/**
	 * <code>true</code> to prefer short branch encoding. This is the default.
	 */
	public void setPreferShortBranch(boolean value) {
		preferShortBranch = value;
	}

	boolean getInstructionPreferVex() {
		if ((prefixFlags & (PrefixFlags.PREFER_VEX | PrefixFlags.PREFER_EVEX)) != 0)
			return (prefixFlags & PrefixFlags.PREFER_VEX) != 0;
		return getPreferVex();
	}

	/**
	 * Gets the instructions.
	 */
	public List<Instruction> getInstructions() {
		return instructions;
	}

	/**
	 * Reset the current set of instructions and labels added to this instance.
	 */
	public void reset() {
		instructions.clear();
		currentLabelId = 0;
		currentLabel = null;
		currentAnonLabel = null;
		nextAnonLabel = null;
		definedAnonLabel = false;
		prefixFlags = PrefixFlags.NONE;
	}

	/**
	 * Creates a label.
	 */
	public CodeLabel createLabel() {
		return createLabel(null);
	}

	/**
	 * Creates a label.
	 *
	 * @param name Optional name of the label.
	 */
	public CodeLabel createLabel(String name) {
		currentLabelId++;
		CodeLabel label = new CodeLabel(name, currentLabelId);
		return label;
	}

	/**
	 * Gets the current label used by this instance or <code>null</code> if none.
	 */
	public CodeLabel getCurrentLabel() {
		return currentLabel;
	}

	/**
	 * Use the specified label.
	 *
	 * @param label Label to use
	 */
	public void label(CodeLabel label) {
		if (label == null)
			throw new IllegalArgumentException("Invalid label. Must be created via createLabel()");
		if (label.getInstructionIndex() >= 0)
			throw new IllegalArgumentException(String.format(
					"Cannot reuse label. The specified label is already associated with an instruction at index %d.", label.getInstructionIndex()));
		if (currentLabel != null)
			throw new IllegalArgumentException("At most one label per instruction is allowed");
		label.setInstructionIndex(instructions.size());
		currentLabel = label;
	}

	/**
	 * Creates an anonymous label that can be referenced by using {@link #b()} (backward anonymous label)
	 * and {@link #f()} (forward anonymous label).
	 */
	public void anonymousLabel() {
		if (definedAnonLabel)
			throw new UnsupportedOperationException("At most one anonymous label per instruction is allowed");
		if (nextAnonLabel == null)
			currentAnonLabel = createLabel();
		else
			currentAnonLabel = nextAnonLabel;
		nextAnonLabel = null;
		definedAnonLabel = true;
	}

	/**
	 * References the previous anonymous label created by {@link #anonymousLabel()}
	 */
	public CodeLabel b() {
		if (currentAnonLabel == null)
			throw new UnsupportedOperationException("No anonymous label has been created yet");
		return currentAnonLabel;
	}

	/**
	 * References the next anonymous label created by a future call to {@link anonymousLabel()}
	 */
	public CodeLabel f() {
		if (nextAnonLabel == null)
			nextAnonLabel = createLabel();
		return nextAnonLabel;
	}

	/**
	 * Add an instruction directly to the flow of instructions.
	 *
	 * @param instruction
	 */
	public void addInstruction(Instruction instruction) {
		if (currentLabel != null && definedAnonLabel)
			throw new UnsupportedOperationException("You can't create both an anonymous label and a normal label");
		if (currentLabel != null)
			instruction.setIP(currentLabel.id);
		else if (definedAnonLabel)
			instruction.setIP(currentAnonLabel.id);

		// Setup prefixes
		if (prefixFlags != PrefixFlags.NONE) {
			if ((prefixFlags & PrefixFlags.LOCK) != 0)
				instruction.setLockPrefix(true);
			if ((prefixFlags & PrefixFlags.REPE) != 0)
				instruction.setRepePrefix(true);
			else if ((prefixFlags & PrefixFlags.REPNE) != 0)
				instruction.setRepnePrefix(true);
			if ((prefixFlags & PrefixFlags.NOTRACK) != 0)
				instruction.setSegmentPrefix(Register.DS);
		}

		instructions.add(instruction);
		currentLabel = null;
		definedAnonLabel = false;
		prefixFlags = PrefixFlags.NONE;
	}

	/**
	 * Add an instruction directly to the flow of instructions.
	 *
	 * @param instruction
	 * @param flags       Operand flags (an {@link AsmOperandFlags} flags value)
	 */
	void addInstruction(Instruction instruction, int flags) {
		if (flags != AsmOperandFlags.NONE) {
			if ((flags & AsmOperandFlags.BROADCAST) != 0)
				instruction.setBroadcast(true);
			if ((flags & AsmOperandFlags.ZEROING) != 0)
				instruction.setZeroingMasking(true);
			if ((flags & AsmOperandFlags.REGISTER_MASK) != 0) {
				// register mask is shift by 2 (starts at index 1 for K1)
				instruction.setOpMask(Register.K0 + ((flags & AsmOperandFlags.REGISTER_MASK) >>> 6));
			}
			if ((flags & AsmOperandFlags.SUPPRESS_ALL_EXCEPTIONS) != 0)
				instruction.setSuppressAllExceptions(true);
			if ((flags & AsmOperandFlags.ROUNDING_CONTROL_MASK) != 0)
				instruction.setRoundingControl((flags & AsmOperandFlags.ROUNDING_CONTROL_MASK) >>> 3);
		}
		addInstruction(instruction);
	}

	/**
	 * Add lock prefix before the next instruction.
	 */
	public CodeAssembler lock() {
		prefixFlags |= PrefixFlags.LOCK;
		return this;
	}

	/**
	 * Add xacquire prefix before the next instruction.
	 */
	public CodeAssembler xacquire() {
		prefixFlags |= PrefixFlags.REPNE;
		return this;
	}

	/**
	 * Add xrelease prefix before the next instruction.
	 */
	public CodeAssembler xrelease() {
		prefixFlags |= PrefixFlags.REPE;
		return this;
	}

	/**
	 * Add rep prefix before the next instruction.
	 */
	public CodeAssembler rep() {
		prefixFlags |= PrefixFlags.REPE;
		return this;
	}

	/**
	 * Add repe/repz prefix before the next instruction.
	 */
	public CodeAssembler repe() {
		prefixFlags |= PrefixFlags.REPE;
		return this;
	}

	/**
	 * Add repe/repz prefix before the next instruction.
	 */
	public CodeAssembler repz() {
		return repe();
	}

	/**
	 * Add repne/repnz prefix before the next instruction.
	 */
	public CodeAssembler repne() {
		prefixFlags |= PrefixFlags.REPNE;
		return this;
	}

	/**
	 * Add repne/repnz prefix before the next instruction.
	 */
	public CodeAssembler repnz() {
		return repne();
	}

	/**
	 * Add bnd prefix before the next instruction.
	 */
	public CodeAssembler bnd() {
		prefixFlags |= PrefixFlags.REPNE;
		return this;
	}

	/**
	 * Add notrack prefix before the next instruction.
	 */
	public CodeAssembler notrack() {
		prefixFlags |= PrefixFlags.NOTRACK;
		return this;
	}

	/**
	 * Prefer VEX encoding if the next instruction can be VEX and EVEX encoded
	 */
	public CodeAssembler vex() {
		prefixFlags |= PrefixFlags.PREFER_VEX;
		return this;
	}

	/**
	 * Prefer EVEX encoding if the next instruction can be VEX and EVEX encoded
	 */
	public CodeAssembler evex() {
		prefixFlags |= PrefixFlags.PREFER_EVEX;
		return this;
	}

	/**
	 * Adds data
	 *
	 * @param array Data
	 */
	public void db(byte[] array) {
		db(array, 0, array.length);
	}

	/**
	 * Adds data
	 *
	 * @param array  Data
	 * @param index  Start index
	 * @param length Length in bytes
	 */
	public void db(byte[] array, int index, int length) {
		if (index < 0)
			throw new IllegalArgumentException("index");
		if (length < 0 || (long)(index + length) > (long)array.length)
			throw new IllegalArgumentException("length");
		final int MAX_LENGTH = 16;
		int cycles = length / MAX_LENGTH;
		int rest = length % MAX_LENGTH;
		int currentPosition = index;
		for (int i = 0; i < cycles; i++) {
			addInstruction(Instruction.createDeclareByte(array, currentPosition, MAX_LENGTH));
			currentPosition += MAX_LENGTH;
		}
		if (rest > 0)
			addInstruction(Instruction.createDeclareByte(array, currentPosition, rest));
	}

	/** call selector:offset instruction */
	public void call(int selector, int offset) {
		addInstruction(Instruction.createBranch(getBitness() >= 32 ? Code.CALL_PTR1632 : Code.CALL_PTR1616, selector, offset));
	}

	/** jmp selector:offset instruction */
	public void jmp(int selector, int offset) {
		addInstruction(Instruction.createBranch(getBitness() >= 32 ? Code.JMP_PTR1632 : Code.JMP_PTR1616, selector, offset));
	}

	/** xlatb instruction */
	public void xlatb() {
		int baseReg;
		switch (getBitness()) {
		case 64:
			baseReg = Register.RBX;
			break;
		case 32:
			baseReg = Register.EBX;
			break;
		default:
			assert getBitness() == 16 : getBitness();
			baseReg = Register.BX;
			break;
		}
		addInstruction(Instruction.create(Code.XLAT_M8, new MemoryOperand(baseReg, Register.AL)));
	}

	/**
	 * Generates multibyte <code>NOP</code> instructions
	 *
	 * @param sizeInBytes Size in bytes of all nops
	 */
	public void nop(int sizeInBytes) {
		if (sizeInBytes < 0)
			throw new IllegalArgumentException("sizeInBytes");
		if (this.prefixFlags != PrefixFlags.NONE)
			throw new UnsupportedOperationException("No prefixes are allowed");
		if (sizeInBytes == 0)
			return;

		final int MAX_MULTIBYTE_NOP_INSTRUCTION_LENGTH = 9;

		int cycles = sizeInBytes / MAX_MULTIBYTE_NOP_INSTRUCTION_LENGTH;
		int rest = sizeInBytes % MAX_MULTIBYTE_NOP_INSTRUCTION_LENGTH;

		for (int i = 0; i < cycles; i++)
			appendNop(MAX_MULTIBYTE_NOP_INSTRUCTION_LENGTH);
		if (rest > 0)
			appendNop(rest);
	}

	private void appendNop(int amount) {
		switch (amount) {
		case 1:
			db(0x90); // NOP
			break;
		case 2:
			db(0x66, 0x90); // 66 NOP
			break;
		case 3:
			db(0x0F, 0x1F, 0x00); // NOP dword ptr [eax] or NOP word ptr [bx+si]
			break;
		case 4:
			db(0x0F, 0x1F, 0x40, 0x00); // NOP dword ptr [eax + 00] or NOP word ptr [bx+si]
			break;
		case 5:
			if (getBitness() != 16)
				db(0x0F, 0x1F, 0x44, 0x00, 0x00); // NOP dword ptr [eax + eax*1 + 00]
			else
				db(0x0F, 0x1F, 0x80, 0x00, 0x00); // NOP word ptr[bx + si]
			break;
		case 6:
			if (getBitness() != 16)
				db(0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00); // 66 NOP dword ptr [eax + eax*1 + 00]
			else
				db(0x66, 0x0F, 0x1F, 0x80, 0x00, 0x00); // NOP dword ptr [bx+si]
			break;
		case 7:
			if (getBitness() != 16)
				db(0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00); // NOP dword ptr [eax + 00000000]
			else
				db(0x67, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00); // NOP dword ptr [eax+eax]
			break;
		case 8:
			if (getBitness() != 16)
				db(0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00); // NOP dword ptr [eax + eax*1 + 00000000]
			else
				db(0x67, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00); // NOP word ptr [eax]
			break;
		case 9:
			if (getBitness() != 16)
				db(0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00); // 66 NOP dword ptr [eax + eax*1 + 00000000]
			else
				db(0x67, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00); // NOP word ptr [eax+eax]
			break;
		default:
			throw new UnsupportedOperationException();
		}
	}

	/**
	 * Tries to assemble the instructions of this assembler with the specified options.
	 * <p>
	 * Returns a {@link CodeAssemblerResult} on success, and a {@link String} with the error
	 * message on failure.
	 *
	 * @param writer The code writer.
	 * @param rip    Base address.
	 */
	public Object assemble(CodeWriter writer, long rip) {
		return assemble(writer, rip, BlockEncoderOptions.NONE);
	}

	/**
	 * Tries to assemble the instructions of this assembler with the specified options.
	 * <p>
	 * Returns a {@link CodeAssemblerResult} on success, and a {@link String} with the error
	 * message on failure.
	 *
	 * @param writer  The code writer.
	 * @param rip     Base address.
	 * @param options Encoding options (a {@link com.github.icedland.iced.x86.enc.BlockEncoderOptions} flags value)
	 */
	public Object assemble(CodeWriter writer, long rip, int options) {
		if (writer == null)
			throw new NullPointerException("writer");

		// Protect against using a prefix without actually using it
		if (prefixFlags != PrefixFlags.NONE)
			return String.format("Unused prefixes %d. You must emit an instruction after using an instruction prefix.", prefixFlags);

		// Protect against a label emitted without being attached to an instruction
		if (currentLabel != null)
			return String.format("Unused label %s. You must emit an instruction after emitting a label.", currentLabel.toString());

		if (definedAnonLabel)
			return "Unused anonymous label. You must emit an instruction after emitting a label.";

		if (nextAnonLabel != null)
			return "Found an @F anonymous label reference but there was no call to anonymousLabel()";

		InstructionBlock[] blocks = new InstructionBlock[] { new InstructionBlock(writer, instructions, rip) };
		Object result = BlockEncoder.tryEncode(getBitness(), blocks, options);
		if (result instanceof BlockEncoderResult[])
			return new CodeAssemblerResult((BlockEncoderResult[])result);
		else
			return (String)result;
	}

	IllegalArgumentException noOpCodeFoundFor(int mnemonic, Object... argNames) {
		StringBuilder builder = new StringBuilder();
		builder.append(String.format("Unable to calculate an OpCode for Mnemonic %d", mnemonic));
		for (int i = 0; i < argNames.length; i++) {
			builder.append(i == 0 ? " " : ", ");
			builder.append(argNames[i]);
		}

		builder.append(String.format("`. Combination of arguments and/or current bitness %d is not compatible with any existing OpCode encoding.",
				getBitness()));
		return new IllegalArgumentException(builder.toString());
	}

	static final class PrefixFlags {
		static final int NONE = 0;
		static final int LOCK = 0x01;
		static final int REPE = 0x02;
		static final int REPNE = 0x04;
		static final int NOTRACK = 0x08;
		static final int PREFER_VEX = 0x10;
		static final int PREFER_EVEX = 0x20;
	}

	// GENERATOR-BEGIN: Code
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	/**
	 * <code>AAA</code> instruction<hr>
	 * <p>
	 * <code>AAA</code><p>
	 * <code>37</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void aaa() {
		addInstruction(Instruction.create(Code.AAA));
	}

	/**
	 * <code>AAD</code> instruction<hr>
	 * <p>
	 * <code>AAD imm8</code><p>
	 * <code>D5 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void aad(int imm) {
		addInstruction(Instruction.create(Code.AAD_IMM8, imm));
	}

	/**
	 * <code>AAM</code> instruction<hr>
	 * <p>
	 * <code>AAM imm8</code><p>
	 * <code>D4 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void aam(int imm) {
		addInstruction(Instruction.create(Code.AAM_IMM8, imm));
	}

	/**
	 * <code>AAS</code> instruction<hr>
	 * <p>
	 * <code>AAS</code><p>
	 * <code>3F</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void aas() {
		addInstruction(Instruction.create(Code.AAS));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m8, r8</code><p>
	 * <code>10 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ADC_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m8, r8</code><p>
	 * <code>10 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ADC_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m16, r16</code><p>
	 * <code>o16 11 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.ADC_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m16, r16</code><p>
	 * <code>o16 11 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.ADC_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m32, r32</code><p>
	 * <code>o32 11 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ADC_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m32, r32</code><p>
	 * <code>o32 11 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ADC_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m64, r64</code><p>
	 * <code>o64 11 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void adc(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.ADC_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m64, r64</code><p>
	 * <code>o64 11 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void adc(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.ADC_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r8, r/m8</code><p>
	 * <code>12 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADC_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r16, r/m16</code><p>
	 * <code>o16 13 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADC_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r32, r/m32</code><p>
	 * <code>o32 13 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADC_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r64, r/m64</code><p>
	 * <code>o64 13 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void adc(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADC_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC AL, imm8</code><p>
	 * <code>14 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m8, imm8</code><p>
	 * <code>80 /2 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.ADC_AL_IMM8 : Code.ADC_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC AX, imm16</code><p>
	 * <code>o16 15 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m16, imm16</code><p>
	 * <code>o16 81 /2 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m16, imm8</code><p>
	 * <code>o16 83 /2 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.ADC_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.ADC_RM16_IMM8 : Code.ADC_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC EAX, imm32</code><p>
	 * <code>o32 15 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m32, imm32</code><p>
	 * <code>o32 81 /2 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m32, imm8</code><p>
	 * <code>o32 83 /2 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.ADC_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.ADC_RM32_IMM8 : Code.ADC_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC RAX, imm32</code><p>
	 * <code>o64 15 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m64, imm32</code><p>
	 * <code>o64 81 /2 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m64, imm8</code><p>
	 * <code>o64 83 /2 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void adc(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.ADC_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.ADC_RM64_IMM8 : Code.ADC_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADC</code> instruction<hr>
	 * <p>
	 * <code>ADC r/m64, imm32</code><p>
	 * <code>o64 81 /2 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m64, imm8</code><p>
	 * <code>o64 83 /2 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m32, imm32</code><p>
	 * <code>o32 81 /2 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m32, imm8</code><p>
	 * <code>o32 83 /2 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m16, imm16</code><p>
	 * <code>o16 81 /2 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m16, imm8</code><p>
	 * <code>o16 83 /2 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADC r/m8, imm8</code><p>
	 * <code>80 /2 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adc(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.ADC_RM64_IMM8 : Code.ADC_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.ADC_RM32_IMM8 : Code.ADC_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.ADC_RM16_IMM8 : Code.ADC_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.ADC_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.ADC, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ADCX</code> instruction<hr>
	 * <p>
	 * <code>ADCX r32, r/m32</code><p>
	 * <code>66 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adcx(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ADCX_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>ADCX</code> instruction<hr>
	 * <p>
	 * <code>ADCX r64, r/m64</code><p>
	 * <code>66 o64 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>64-bit</code>
	 */
	public void adcx(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.ADCX_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>ADCX</code> instruction<hr>
	 * <p>
	 * <code>ADCX r32, r/m32</code><p>
	 * <code>66 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adcx(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADCX_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADCX</code> instruction<hr>
	 * <p>
	 * <code>ADCX r64, r/m64</code><p>
	 * <code>66 o64 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>64-bit</code>
	 */
	public void adcx(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADCX_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m8, r8</code><p>
	 * <code>00 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ADD_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m8, r8</code><p>
	 * <code>00 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ADD_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m16, r16</code><p>
	 * <code>o16 01 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.ADD_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m16, r16</code><p>
	 * <code>o16 01 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.ADD_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m32, r32</code><p>
	 * <code>o32 01 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ADD_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m32, r32</code><p>
	 * <code>o32 01 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ADD_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m64, r64</code><p>
	 * <code>o64 01 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void add(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.ADD_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m64, r64</code><p>
	 * <code>o64 01 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void add(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.ADD_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r8, r/m8</code><p>
	 * <code>02 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADD_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r16, r/m16</code><p>
	 * <code>o16 03 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADD_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r32, r/m32</code><p>
	 * <code>o32 03 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADD_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r64, r/m64</code><p>
	 * <code>o64 03 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void add(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADD_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD AL, imm8</code><p>
	 * <code>04 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m8, imm8</code><p>
	 * <code>80 /0 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.ADD_AL_IMM8 : Code.ADD_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD AX, imm16</code><p>
	 * <code>o16 05 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m16, imm16</code><p>
	 * <code>o16 81 /0 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m16, imm8</code><p>
	 * <code>o16 83 /0 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.ADD_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.ADD_RM16_IMM8 : Code.ADD_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD EAX, imm32</code><p>
	 * <code>o32 05 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m32, imm32</code><p>
	 * <code>o32 81 /0 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m32, imm8</code><p>
	 * <code>o32 83 /0 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.ADD_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.ADD_RM32_IMM8 : Code.ADD_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD RAX, imm32</code><p>
	 * <code>o64 05 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m64, imm32</code><p>
	 * <code>o64 81 /0 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m64, imm8</code><p>
	 * <code>o64 83 /0 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void add(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.ADD_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.ADD_RM64_IMM8 : Code.ADD_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ADD</code> instruction<hr>
	 * <p>
	 * <code>ADD r/m64, imm32</code><p>
	 * <code>o64 81 /0 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m64, imm8</code><p>
	 * <code>o64 83 /0 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m32, imm32</code><p>
	 * <code>o32 81 /0 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m32, imm8</code><p>
	 * <code>o32 83 /0 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m16, imm16</code><p>
	 * <code>o16 81 /0 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m16, imm8</code><p>
	 * <code>o16 83 /0 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ADD r/m8, imm8</code><p>
	 * <code>80 /0 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void add(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.ADD_RM64_IMM8 : Code.ADD_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.ADD_RM32_IMM8 : Code.ADD_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.ADD_RM16_IMM8 : Code.ADD_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.ADD_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.ADD, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ADDPD</code> instruction<hr>
	 * <p>
	 * <code>ADDPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 58 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ADDPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ADDPD</code> instruction<hr>
	 * <p>
	 * <code>ADDPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 58 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADDPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADDPS</code> instruction<hr>
	 * <p>
	 * <code>ADDPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 58 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ADDPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ADDPS</code> instruction<hr>
	 * <p>
	 * <code>ADDPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 58 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADDPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADDSD</code> instruction<hr>
	 * <p>
	 * <code>ADDSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 58 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ADDSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>ADDSD</code> instruction<hr>
	 * <p>
	 * <code>ADDSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 58 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADDSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADDSS</code> instruction<hr>
	 * <p>
	 * <code>ADDSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 58 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ADDSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>ADDSS</code> instruction<hr>
	 * <p>
	 * <code>ADDSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 58 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADDSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>ADDSUBPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F D0 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addsubpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ADDSUBPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>ADDSUBPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F D0 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addsubpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADDSUBPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>ADDSUBPS xmm1, xmm2/m128</code><p>
	 * <code>F2 0F D0 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addsubps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ADDSUBPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>ADDSUBPS xmm1, xmm2/m128</code><p>
	 * <code>F2 0F D0 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void addsubps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADDSUBPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADOX</code> instruction<hr>
	 * <p>
	 * <code>ADOX r32, r/m32</code><p>
	 * <code>F3 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adox(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ADOX_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>ADOX</code> instruction<hr>
	 * <p>
	 * <code>ADOX r64, r/m64</code><p>
	 * <code>F3 o64 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>64-bit</code>
	 */
	public void adox(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.ADOX_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>ADOX</code> instruction<hr>
	 * <p>
	 * <code>ADOX r32, r/m32</code><p>
	 * <code>F3 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void adox(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADOX_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ADOX</code> instruction<hr>
	 * <p>
	 * <code>ADOX r64, r/m64</code><p>
	 * <code>F3 o64 0F 38 F6 /r</code><p>
	 * <code>ADX</code><p>
	 * <code>64-bit</code>
	 */
	public void adox(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ADOX_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESDEC</code> instruction<hr>
	 * <p>
	 * <code>AESDEC xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DE /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdec(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.AESDEC_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>AESDEC</code> instruction<hr>
	 * <p>
	 * <code>AESDEC xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DE /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdec(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESDEC_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESDEC128KL</code> instruction<hr>
	 * <p>
	 * <code>AESDEC128KL xmm, m384</code><p>
	 * <code>F3 0F 38 DD !(11):rrr:bbb</code><p>
	 * <code>AESKLE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdec128kl(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESDEC128KL_XMM_M384, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESDEC256KL</code> instruction<hr>
	 * <p>
	 * <code>AESDEC256KL xmm, m512</code><p>
	 * <code>F3 0F 38 DF !(11):rrr:bbb</code><p>
	 * <code>AESKLE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdec256kl(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESDEC256KL_XMM_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>AESDECLAST xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DF /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdeclast(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.AESDECLAST_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>AESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>AESDECLAST xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DF /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdeclast(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESDECLAST_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESDECWIDE128KL</code> instruction<hr>
	 * <p>
	 * <code>AESDECWIDE128KL m384, &lt;XMM0-7&gt;</code><p>
	 * <code>F3 0F 38 D8 !(11):001:bbb</code><p>
	 * <code>AESKLE and WIDE_KL</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdecwide128kl(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.AESDECWIDE128KL_M384, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESDECWIDE256KL</code> instruction<hr>
	 * <p>
	 * <code>AESDECWIDE256KL m512, &lt;XMM0-7&gt;</code><p>
	 * <code>F3 0F 38 D8 !(11):011:bbb</code><p>
	 * <code>AESKLE and WIDE_KL</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesdecwide256kl(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.AESDECWIDE256KL_M512, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESENC</code> instruction<hr>
	 * <p>
	 * <code>AESENC xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DC /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesenc(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.AESENC_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>AESENC</code> instruction<hr>
	 * <p>
	 * <code>AESENC xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DC /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesenc(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESENC_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESENC128KL</code> instruction<hr>
	 * <p>
	 * <code>AESENC128KL xmm, m384</code><p>
	 * <code>F3 0F 38 DC !(11):rrr:bbb</code><p>
	 * <code>AESKLE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesenc128kl(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESENC128KL_XMM_M384, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESENC256KL</code> instruction<hr>
	 * <p>
	 * <code>AESENC256KL xmm, m512</code><p>
	 * <code>F3 0F 38 DE !(11):rrr:bbb</code><p>
	 * <code>AESKLE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesenc256kl(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESENC256KL_XMM_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>AESENCLAST xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DD /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesenclast(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.AESENCLAST_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>AESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>AESENCLAST xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DD /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesenclast(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESENCLAST_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESENCWIDE128KL</code> instruction<hr>
	 * <p>
	 * <code>AESENCWIDE128KL m384, &lt;XMM0-7&gt;</code><p>
	 * <code>F3 0F 38 D8 !(11):000:bbb</code><p>
	 * <code>AESKLE and WIDE_KL</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesencwide128kl(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.AESENCWIDE128KL_M384, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESENCWIDE256KL</code> instruction<hr>
	 * <p>
	 * <code>AESENCWIDE256KL m512, &lt;XMM0-7&gt;</code><p>
	 * <code>F3 0F 38 D8 !(11):010:bbb</code><p>
	 * <code>AESKLE and WIDE_KL</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesencwide256kl(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.AESENCWIDE256KL_M512, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESIMC</code> instruction<hr>
	 * <p>
	 * <code>AESIMC xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DB /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesimc(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.AESIMC_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>AESIMC</code> instruction<hr>
	 * <p>
	 * <code>AESIMC xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 DB /r</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aesimc(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AESIMC_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AESKEYGENASSIST</code> instruction<hr>
	 * <p>
	 * <code>AESKEYGENASSIST xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A DF /r ib</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aeskeygenassist(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.AESKEYGENASSIST_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>AESKEYGENASSIST</code> instruction<hr>
	 * <p>
	 * <code>AESKEYGENASSIST xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A DF /r ib</code><p>
	 * <code>AES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void aeskeygenassist(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.AESKEYGENASSIST_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ALTINST</code> instruction<hr>
	 * <p>
	 * <code>ALTINST</code><p>
	 * <code>0F 3F</code><p>
	 * <code>Centaur AIS</code><p>
	 * <code>16/32-bit</code>
	 */
	public void altinst() {
		addInstruction(Instruction.create(Code.ALTINST));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m8, r8</code><p>
	 * <code>20 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.AND_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m8, r8</code><p>
	 * <code>20 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.AND_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m16, r16</code><p>
	 * <code>o16 21 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.AND_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m16, r16</code><p>
	 * <code>o16 21 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.AND_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m32, r32</code><p>
	 * <code>o32 21 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.AND_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m32, r32</code><p>
	 * <code>o32 21 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.AND_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m64, r64</code><p>
	 * <code>o64 21 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void and(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.AND_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m64, r64</code><p>
	 * <code>o64 21 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void and(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.AND_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r8, r/m8</code><p>
	 * <code>22 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AND_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r16, r/m16</code><p>
	 * <code>o16 23 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AND_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r32, r/m32</code><p>
	 * <code>o32 23 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AND_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r64, r/m64</code><p>
	 * <code>o64 23 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void and(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.AND_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND AL, imm8</code><p>
	 * <code>24 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m8, imm8</code><p>
	 * <code>80 /4 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.AND_AL_IMM8 : Code.AND_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND AX, imm16</code><p>
	 * <code>o16 25 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m16, imm16</code><p>
	 * <code>o16 81 /4 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m16, imm8</code><p>
	 * <code>o16 83 /4 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.AND_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.AND_RM16_IMM8 : Code.AND_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND EAX, imm32</code><p>
	 * <code>o32 25 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m32, imm32</code><p>
	 * <code>o32 81 /4 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m32, imm8</code><p>
	 * <code>o32 83 /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.AND_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.AND_RM32_IMM8 : Code.AND_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND RAX, imm32</code><p>
	 * <code>o64 25 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>AND r/m64, imm32</code><p>
	 * <code>o64 81 /4 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>AND r/m64, imm8</code><p>
	 * <code>o64 83 /4 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void and(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.AND_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.AND_RM64_IMM8 : Code.AND_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>AND</code> instruction<hr>
	 * <p>
	 * <code>AND r/m64, imm32</code><p>
	 * <code>o64 81 /4 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>AND r/m64, imm8</code><p>
	 * <code>o64 83 /4 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>AND r/m32, imm32</code><p>
	 * <code>o32 81 /4 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m32, imm8</code><p>
	 * <code>o32 83 /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m16, imm16</code><p>
	 * <code>o16 81 /4 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m16, imm8</code><p>
	 * <code>o16 83 /4 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>AND r/m8, imm8</code><p>
	 * <code>80 /4 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void and(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.AND_RM64_IMM8 : Code.AND_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.AND_RM32_IMM8 : Code.AND_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.AND_RM16_IMM8 : Code.AND_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.AND_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.AND, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ANDN</code> instruction<hr>
	 * <p>
	 * <code>ANDN r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F2 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andn(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_ANDN_R32_R32_RM32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>ANDN</code> instruction<hr>
	 * <p>
	 * <code>ANDN r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F2 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void andn(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_ANDN_R64_R64_RM64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>ANDN</code> instruction<hr>
	 * <p>
	 * <code>ANDN r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F2 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andn(AsmRegister32 dst, AsmRegister32 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_ANDN_R32_R32_RM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ANDN</code> instruction<hr>
	 * <p>
	 * <code>ANDN r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F2 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void andn(AsmRegister64 dst, AsmRegister64 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_ANDN_R64_R64_RM64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ANDNPD</code> instruction<hr>
	 * <p>
	 * <code>ANDNPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 55 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andnpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ANDNPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ANDNPD</code> instruction<hr>
	 * <p>
	 * <code>ANDNPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 55 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andnpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ANDNPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ANDNPS</code> instruction<hr>
	 * <p>
	 * <code>ANDNPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 55 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andnps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ANDNPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ANDNPS</code> instruction<hr>
	 * <p>
	 * <code>ANDNPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 55 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andnps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ANDNPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ANDPD</code> instruction<hr>
	 * <p>
	 * <code>ANDPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 54 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ANDPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ANDPD</code> instruction<hr>
	 * <p>
	 * <code>ANDPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 54 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ANDPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ANDPS</code> instruction<hr>
	 * <p>
	 * <code>ANDPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 54 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ANDPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ANDPS</code> instruction<hr>
	 * <p>
	 * <code>ANDPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 54 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void andps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ANDPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ARPL</code> instruction<hr>
	 * <p>
	 * <code>ARPL r/m16, r16</code><p>
	 * <code>o16 63 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void arpl(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.ARPL_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>ARPL</code> instruction<hr>
	 * <p>
	 * <code>ARPL r/m16, r16</code><p>
	 * <code>o16 63 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void arpl(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.ARPL_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ARPL</code> instruction<hr>
	 * <p>
	 * <code>ARPL r32/m16, r32</code><p>
	 * <code>o32 63 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void arpl(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ARPL_R32M16_R32, dst.get(), src.get()));
	}

	/**
	 * <code>ARPL</code> instruction<hr>
	 * <p>
	 * <code>ARPL r32/m16, r32</code><p>
	 * <code>o32 63 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void arpl(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ARPL_R32M16_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BB0_RESET</code> instruction<hr>
	 * <p>
	 * <code>BB0_RESET</code><p>
	 * <code>0F 3A</code><p>
	 * <code>Cyrix MediaGX, GXm, GXLV, GX1</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bb0_reset() {
		addInstruction(Instruction.create(Code.BB0_RESET));
	}

	/**
	 * <code>BB1_RESET</code> instruction<hr>
	 * <p>
	 * <code>BB1_RESET</code><p>
	 * <code>0F 3B</code><p>
	 * <code>Cyrix MediaGX, GXm, GXLV, GX1</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bb1_reset() {
		addInstruction(Instruction.create(Code.BB1_RESET));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.0F38.W0 F7 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bextr(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_BEXTR_R32_RM32_R32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.0F38.W0 F7 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bextr(AsmRegister32 dst, AsmMemoryOperand src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_BEXTR_R32_RM32_R32, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.0F38.W1 F7 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void bextr(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_BEXTR_R64_RM64_R64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.0F38.W1 F7 /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void bextr(AsmRegister64 dst, AsmMemoryOperand src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_BEXTR_R64_RM64_R64, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r32, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W0 10 /r id</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bextr(AsmRegister32 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_BEXTR_R32_RM32_IMM32, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r64, r/m64, imm32</code><p>
	 * <code>XOP.L0.XA.W1 10 /r id</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void bextr(AsmRegister64 dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_BEXTR_R64_RM64_IMM32, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r32, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W0 10 /r id</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bextr(AsmRegister32 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_BEXTR_R32_RM32_IMM32, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BEXTR</code> instruction<hr>
	 * <p>
	 * <code>BEXTR r64, r/m64, imm32</code><p>
	 * <code>XOP.L0.XA.W1 10 /r id</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void bextr(AsmRegister64 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_BEXTR_R64_RM64_IMM32, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BLCFILL</code> instruction<hr>
	 * <p>
	 * <code>BLCFILL r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcfill(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_BLCFILL_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLCFILL</code> instruction<hr>
	 * <p>
	 * <code>BLCFILL r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcfill(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_BLCFILL_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLCFILL</code> instruction<hr>
	 * <p>
	 * <code>BLCFILL r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcfill(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCFILL_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCFILL</code> instruction<hr>
	 * <p>
	 * <code>BLCFILL r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcfill(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCFILL_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCI</code> instruction<hr>
	 * <p>
	 * <code>BLCI r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 02 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blci(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_BLCI_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLCI</code> instruction<hr>
	 * <p>
	 * <code>BLCI r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 02 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blci(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_BLCI_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLCI</code> instruction<hr>
	 * <p>
	 * <code>BLCI r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 02 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blci(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCI_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCI</code> instruction<hr>
	 * <p>
	 * <code>BLCI r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 02 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blci(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCI_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCIC</code> instruction<hr>
	 * <p>
	 * <code>BLCIC r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /5</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcic(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_BLCIC_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLCIC</code> instruction<hr>
	 * <p>
	 * <code>BLCIC r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /5</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcic(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_BLCIC_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLCIC</code> instruction<hr>
	 * <p>
	 * <code>BLCIC r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /5</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcic(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCIC_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCIC</code> instruction<hr>
	 * <p>
	 * <code>BLCIC r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /5</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcic(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCIC_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCMSK</code> instruction<hr>
	 * <p>
	 * <code>BLCMSK r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 02 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcmsk(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_BLCMSK_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLCMSK</code> instruction<hr>
	 * <p>
	 * <code>BLCMSK r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 02 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcmsk(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_BLCMSK_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLCMSK</code> instruction<hr>
	 * <p>
	 * <code>BLCMSK r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 02 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcmsk(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCMSK_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCMSK</code> instruction<hr>
	 * <p>
	 * <code>BLCMSK r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 02 /1</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcmsk(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCMSK_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCS</code> instruction<hr>
	 * <p>
	 * <code>BLCS r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /3</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcs(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_BLCS_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLCS</code> instruction<hr>
	 * <p>
	 * <code>BLCS r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /3</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcs(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_BLCS_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLCS</code> instruction<hr>
	 * <p>
	 * <code>BLCS r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /3</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blcs(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCS_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLCS</code> instruction<hr>
	 * <p>
	 * <code>BLCS r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /3</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blcs(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLCS_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLENDPD</code> instruction<hr>
	 * <p>
	 * <code>BLENDPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0D /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendpd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.BLENDPD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>BLENDPD</code> instruction<hr>
	 * <p>
	 * <code>BLENDPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0D /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendpd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.BLENDPD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BLENDPS</code> instruction<hr>
	 * <p>
	 * <code>BLENDPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0C /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.BLENDPS_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>BLENDPS</code> instruction<hr>
	 * <p>
	 * <code>BLENDPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0C /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.BLENDPS_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BLENDVPD</code> instruction<hr>
	 * <p>
	 * <code>BLENDVPD xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>66 0F 38 15 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendvpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.BLENDVPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>BLENDVPD</code> instruction<hr>
	 * <p>
	 * <code>BLENDVPD xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>66 0F 38 15 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendvpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BLENDVPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLENDVPS</code> instruction<hr>
	 * <p>
	 * <code>BLENDVPS xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>66 0F 38 14 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendvps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.BLENDVPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>BLENDVPS</code> instruction<hr>
	 * <p>
	 * <code>BLENDVPS xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>66 0F 38 14 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blendvps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BLENDVPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSFILL</code> instruction<hr>
	 * <p>
	 * <code>BLSFILL r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /2</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsfill(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_BLSFILL_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLSFILL</code> instruction<hr>
	 * <p>
	 * <code>BLSFILL r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /2</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blsfill(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_BLSFILL_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLSFILL</code> instruction<hr>
	 * <p>
	 * <code>BLSFILL r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /2</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsfill(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLSFILL_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSFILL</code> instruction<hr>
	 * <p>
	 * <code>BLSFILL r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /2</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blsfill(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLSFILL_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSI</code> instruction<hr>
	 * <p>
	 * <code>BLSI r32, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F3 /3</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsi(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VEX_BLSI_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLSI</code> instruction<hr>
	 * <p>
	 * <code>BLSI r64, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F3 /3</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void blsi(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.VEX_BLSI_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLSI</code> instruction<hr>
	 * <p>
	 * <code>BLSI r32, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F3 /3</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsi(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_BLSI_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSI</code> instruction<hr>
	 * <p>
	 * <code>BLSI r64, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F3 /3</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void blsi(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_BLSI_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSIC</code> instruction<hr>
	 * <p>
	 * <code>BLSIC r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsic(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_BLSIC_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLSIC</code> instruction<hr>
	 * <p>
	 * <code>BLSIC r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blsic(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_BLSIC_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLSIC</code> instruction<hr>
	 * <p>
	 * <code>BLSIC r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsic(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLSIC_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSIC</code> instruction<hr>
	 * <p>
	 * <code>BLSIC r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /6</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void blsic(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_BLSIC_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSMSK</code> instruction<hr>
	 * <p>
	 * <code>BLSMSK r32, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F3 /2</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsmsk(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VEX_BLSMSK_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLSMSK</code> instruction<hr>
	 * <p>
	 * <code>BLSMSK r64, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F3 /2</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void blsmsk(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.VEX_BLSMSK_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLSMSK</code> instruction<hr>
	 * <p>
	 * <code>BLSMSK r32, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F3 /2</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsmsk(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_BLSMSK_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSMSK</code> instruction<hr>
	 * <p>
	 * <code>BLSMSK r64, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F3 /2</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void blsmsk(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_BLSMSK_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSR</code> instruction<hr>
	 * <p>
	 * <code>BLSR r32, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F3 /1</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsr(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VEX_BLSR_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BLSR</code> instruction<hr>
	 * <p>
	 * <code>BLSR r64, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F3 /1</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void blsr(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.VEX_BLSR_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BLSR</code> instruction<hr>
	 * <p>
	 * <code>BLSR r32, r/m32</code><p>
	 * <code>VEX.LZ.0F38.W0 F3 /1</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void blsr(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_BLSR_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BLSR</code> instruction<hr>
	 * <p>
	 * <code>BLSR r64, r/m64</code><p>
	 * <code>VEX.LZ.0F38.W1 F3 /1</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void blsr(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_BLSR_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BNDCL</code> instruction<hr>
	 * <p>
	 * <code>BNDCL bnd, r/m32</code><p>
	 * <code>F3 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndcl(AsmRegisterBND dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BNDCL_BND_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BNDCL</code> instruction<hr>
	 * <p>
	 * <code>BNDCL bnd, r/m64</code><p>
	 * <code>F3 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code>
	 */
	public void bndcl(AsmRegisterBND dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BNDCL_BND_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BNDCL</code> instruction<hr>
	 * <p>
	 * <code>BNDCL bnd, r/m64</code><p>
	 * <code>F3 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BNDCL bnd, r/m32</code><p>
	 * <code>F3 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndcl(AsmRegisterBND dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.QWORD) {
			code = Code.BNDCL_BND_RM64;
		} else if (src.size == MemoryOperandSize.DWORD) {
			code = Code.BNDCL_BND_RM32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BNDCL, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BNDCN</code> instruction<hr>
	 * <p>
	 * <code>BNDCN bnd, r/m32</code><p>
	 * <code>F2 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndcn(AsmRegisterBND dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BNDCN_BND_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BNDCN</code> instruction<hr>
	 * <p>
	 * <code>BNDCN bnd, r/m64</code><p>
	 * <code>F2 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code>
	 */
	public void bndcn(AsmRegisterBND dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BNDCN_BND_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BNDCN</code> instruction<hr>
	 * <p>
	 * <code>BNDCN bnd, r/m64</code><p>
	 * <code>F2 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BNDCN bnd, r/m32</code><p>
	 * <code>F2 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndcn(AsmRegisterBND dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.QWORD) {
			code = Code.BNDCN_BND_RM64;
		} else if (src.size == MemoryOperandSize.DWORD) {
			code = Code.BNDCN_BND_RM32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BNDCN, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BNDCU</code> instruction<hr>
	 * <p>
	 * <code>BNDCU bnd, r/m32</code><p>
	 * <code>F2 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndcu(AsmRegisterBND dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BNDCU_BND_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BNDCU</code> instruction<hr>
	 * <p>
	 * <code>BNDCU bnd, r/m64</code><p>
	 * <code>F2 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code>
	 */
	public void bndcu(AsmRegisterBND dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BNDCU_BND_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BNDCU</code> instruction<hr>
	 * <p>
	 * <code>BNDCU bnd, r/m64</code><p>
	 * <code>F2 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BNDCU bnd, r/m32</code><p>
	 * <code>F2 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndcu(AsmRegisterBND dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.QWORD) {
			code = Code.BNDCU_BND_RM64;
		} else if (src.size == MemoryOperandSize.DWORD) {
			code = Code.BNDCU_BND_RM32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BNDCU, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BNDLDX</code> instruction<hr>
	 * <p>
	 * <code>BNDLDX bnd, mib</code><p>
	 * <code>NP 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bndldx(AsmRegisterBND dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BNDLDX_BND_MIB, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BNDMK</code> instruction<hr>
	 * <p>
	 * <code>BNDMK bnd, m64</code><p>
	 * <code>F3 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BNDMK bnd, m32</code><p>
	 * <code>F3 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndmk(AsmRegisterBND dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.QWORD) {
			code = Code.BNDMK_BND_M64;
		} else if (src.size == MemoryOperandSize.DWORD) {
			code = Code.BNDMK_BND_M32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BNDMK, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BNDMOV</code> instruction<hr>
	 * <p>
	 * <code>BNDMOV bnd1, bnd2/m128</code><p>
	 * <code>66 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BNDMOV bnd1, bnd2/m64</code><p>
	 * <code>66 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndmov(AsmRegisterBND dst, AsmRegisterBND src) {
		int code;
		code = getBitness() == 64 ? Code.BNDMOV_BND_BNDM128 : Code.BNDMOV_BND_BNDM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>BNDMOV</code> instruction<hr>
	 * <p>
	 * <code>BNDMOV bnd1/m128, bnd2</code><p>
	 * <code>66 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BNDMOV bnd1/m64, bnd2</code><p>
	 * <code>66 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndmov(AsmMemoryOperand dst, AsmRegisterBND src) {
		int code;
		code = getBitness() == 64 ? Code.BNDMOV_BNDM128_BND : Code.BNDMOV_BNDM64_BND;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BNDMOV</code> instruction<hr>
	 * <p>
	 * <code>BNDMOV bnd1, bnd2/m128</code><p>
	 * <code>66 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BNDMOV bnd1, bnd2/m64</code><p>
	 * <code>66 0F 1A /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bndmov(AsmRegisterBND dst, AsmMemoryOperand src) {
		int code;
		code = getBitness() == 64 ? Code.BNDMOV_BND_BNDM128 : Code.BNDMOV_BND_BNDM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BNDSTX</code> instruction<hr>
	 * <p>
	 * <code>BNDSTX mib, bnd</code><p>
	 * <code>NP 0F 1B /r</code><p>
	 * <code>MPX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bndstx(AsmMemoryOperand dst, AsmRegisterBND src) {
		addInstruction(Instruction.create(Code.BNDSTX_MIB_BND, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BOUND</code> instruction<hr>
	 * <p>
	 * <code>BOUND r16, m16&amp;16</code><p>
	 * <code>o16 62 /r</code><p>
	 * <code>186+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bound(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BOUND_R16_M1616, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BOUND</code> instruction<hr>
	 * <p>
	 * <code>BOUND r32, m32&amp;32</code><p>
	 * <code>o32 62 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void bound(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BOUND_R32_M3232, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BSF</code> instruction<hr>
	 * <p>
	 * <code>BSF r16, r/m16</code><p>
	 * <code>o16 0F BC /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsf(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BSF_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>BSF</code> instruction<hr>
	 * <p>
	 * <code>BSF r32, r/m32</code><p>
	 * <code>o32 0F BC /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsf(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BSF_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BSF</code> instruction<hr>
	 * <p>
	 * <code>BSF r64, r/m64</code><p>
	 * <code>o64 0F BC /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bsf(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BSF_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BSF</code> instruction<hr>
	 * <p>
	 * <code>BSF r16, r/m16</code><p>
	 * <code>o16 0F BC /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsf(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BSF_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BSF</code> instruction<hr>
	 * <p>
	 * <code>BSF r32, r/m32</code><p>
	 * <code>o32 0F BC /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsf(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BSF_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BSF</code> instruction<hr>
	 * <p>
	 * <code>BSF r64, r/m64</code><p>
	 * <code>o64 0F BC /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bsf(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BSF_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BSR</code> instruction<hr>
	 * <p>
	 * <code>BSR r16, r/m16</code><p>
	 * <code>o16 0F BD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsr(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BSR_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>BSR</code> instruction<hr>
	 * <p>
	 * <code>BSR r32, r/m32</code><p>
	 * <code>o32 0F BD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsr(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BSR_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>BSR</code> instruction<hr>
	 * <p>
	 * <code>BSR r64, r/m64</code><p>
	 * <code>o64 0F BD /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bsr(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BSR_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>BSR</code> instruction<hr>
	 * <p>
	 * <code>BSR r16, r/m16</code><p>
	 * <code>o16 0F BD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsr(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BSR_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BSR</code> instruction<hr>
	 * <p>
	 * <code>BSR r32, r/m32</code><p>
	 * <code>o32 0F BD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bsr(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BSR_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BSR</code> instruction<hr>
	 * <p>
	 * <code>BSR r64, r/m64</code><p>
	 * <code>o64 0F BD /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bsr(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.BSR_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>BSWAP</code> instruction<hr>
	 * <p>
	 * <code>BSWAP r16</code><p>
	 * <code>o16 0F C8+rw</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bswap(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.BSWAP_R16, dst.get()));
	}

	/**
	 * <code>BSWAP</code> instruction<hr>
	 * <p>
	 * <code>BSWAP r32</code><p>
	 * <code>o32 0F C8+rd</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bswap(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.BSWAP_R32, dst.get()));
	}

	/**
	 * <code>BSWAP</code> instruction<hr>
	 * <p>
	 * <code>BSWAP r64</code><p>
	 * <code>o64 0F C8+ro</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bswap(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.BSWAP_R64, dst.get()));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m16, r16</code><p>
	 * <code>o16 0F A3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bt(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BT_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m16, r16</code><p>
	 * <code>o16 0F A3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bt(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BT_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m32, r32</code><p>
	 * <code>o32 0F A3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bt(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BT_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m32, r32</code><p>
	 * <code>o32 0F A3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bt(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BT_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m64, r64</code><p>
	 * <code>o64 0F A3 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bt(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BT_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m64, r64</code><p>
	 * <code>o64 0F A3 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bt(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BT_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m16, imm8</code><p>
	 * <code>o16 0F BA /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bt(AsmRegister16 dst, int imm) {
		addInstruction(Instruction.create(Code.BT_RM16_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m32, imm8</code><p>
	 * <code>o32 0F BA /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bt(AsmRegister32 dst, int imm) {
		addInstruction(Instruction.create(Code.BT_RM32_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m64, imm8</code><p>
	 * <code>o64 0F BA /4 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bt(AsmRegister64 dst, int imm) {
		addInstruction(Instruction.create(Code.BT_RM64_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BT</code> instruction<hr>
	 * <p>
	 * <code>BT r/m64, imm8</code><p>
	 * <code>o64 0F BA /4 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BT r/m32, imm8</code><p>
	 * <code>o32 0F BA /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>BT r/m16, imm8</code><p>
	 * <code>o16 0F BA /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bt(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.BT_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.BT_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.BT_RM16_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BT, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m16, r16</code><p>
	 * <code>o16 0F BB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btc(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BTC_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m16, r16</code><p>
	 * <code>o16 0F BB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btc(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BTC_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m32, r32</code><p>
	 * <code>o32 0F BB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btc(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BTC_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m32, r32</code><p>
	 * <code>o32 0F BB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btc(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BTC_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m64, r64</code><p>
	 * <code>o64 0F BB /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void btc(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BTC_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m64, r64</code><p>
	 * <code>o64 0F BB /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void btc(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BTC_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m16, imm8</code><p>
	 * <code>o16 0F BA /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btc(AsmRegister16 dst, int imm) {
		addInstruction(Instruction.create(Code.BTC_RM16_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m32, imm8</code><p>
	 * <code>o32 0F BA /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btc(AsmRegister32 dst, int imm) {
		addInstruction(Instruction.create(Code.BTC_RM32_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m64, imm8</code><p>
	 * <code>o64 0F BA /7 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void btc(AsmRegister64 dst, int imm) {
		addInstruction(Instruction.create(Code.BTC_RM64_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTC</code> instruction<hr>
	 * <p>
	 * <code>BTC r/m64, imm8</code><p>
	 * <code>o64 0F BA /7 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BTC r/m32, imm8</code><p>
	 * <code>o32 0F BA /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>BTC r/m16, imm8</code><p>
	 * <code>o16 0F BA /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btc(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.BTC_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.BTC_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.BTC_RM16_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BTC, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m16, r16</code><p>
	 * <code>o16 0F B3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btr(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BTR_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m16, r16</code><p>
	 * <code>o16 0F B3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btr(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BTR_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m32, r32</code><p>
	 * <code>o32 0F B3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btr(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BTR_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m32, r32</code><p>
	 * <code>o32 0F B3 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btr(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BTR_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m64, r64</code><p>
	 * <code>o64 0F B3 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void btr(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BTR_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m64, r64</code><p>
	 * <code>o64 0F B3 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void btr(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BTR_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m16, imm8</code><p>
	 * <code>o16 0F BA /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btr(AsmRegister16 dst, int imm) {
		addInstruction(Instruction.create(Code.BTR_RM16_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m32, imm8</code><p>
	 * <code>o32 0F BA /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btr(AsmRegister32 dst, int imm) {
		addInstruction(Instruction.create(Code.BTR_RM32_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m64, imm8</code><p>
	 * <code>o64 0F BA /6 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void btr(AsmRegister64 dst, int imm) {
		addInstruction(Instruction.create(Code.BTR_RM64_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTR</code> instruction<hr>
	 * <p>
	 * <code>BTR r/m64, imm8</code><p>
	 * <code>o64 0F BA /6 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BTR r/m32, imm8</code><p>
	 * <code>o32 0F BA /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>BTR r/m16, imm8</code><p>
	 * <code>o16 0F BA /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void btr(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.BTR_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.BTR_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.BTR_RM16_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BTR, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m16, r16</code><p>
	 * <code>o16 0F AB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bts(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BTS_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m16, r16</code><p>
	 * <code>o16 0F AB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bts(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.BTS_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m32, r32</code><p>
	 * <code>o32 0F AB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bts(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BTS_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m32, r32</code><p>
	 * <code>o32 0F AB /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bts(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.BTS_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m64, r64</code><p>
	 * <code>o64 0F AB /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bts(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BTS_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m64, r64</code><p>
	 * <code>o64 0F AB /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bts(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.BTS_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m16, imm8</code><p>
	 * <code>o16 0F BA /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bts(AsmRegister16 dst, int imm) {
		addInstruction(Instruction.create(Code.BTS_RM16_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m32, imm8</code><p>
	 * <code>o32 0F BA /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bts(AsmRegister32 dst, int imm) {
		addInstruction(Instruction.create(Code.BTS_RM32_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m64, imm8</code><p>
	 * <code>o64 0F BA /5 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void bts(AsmRegister64 dst, int imm) {
		addInstruction(Instruction.create(Code.BTS_RM64_IMM8, dst.get(), imm));
	}

	/**
	 * <code>BTS</code> instruction<hr>
	 * <p>
	 * <code>BTS r/m64, imm8</code><p>
	 * <code>o64 0F BA /5 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>BTS r/m32, imm8</code><p>
	 * <code>o32 0F BA /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>BTS r/m16, imm8</code><p>
	 * <code>o16 0F BA /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bts(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.BTS_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.BTS_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.BTS_RM16_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.BTS, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>BZHI</code> instruction<hr>
	 * <p>
	 * <code>BZHI r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.0F38.W0 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bzhi(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_BZHI_R32_RM32_R32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>BZHI</code> instruction<hr>
	 * <p>
	 * <code>BZHI r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.0F38.W0 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void bzhi(AsmRegister32 dst, AsmMemoryOperand src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_BZHI_R32_RM32_R32, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>BZHI</code> instruction<hr>
	 * <p>
	 * <code>BZHI r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.0F38.W1 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void bzhi(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_BZHI_R64_RM64_R64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>BZHI</code> instruction<hr>
	 * <p>
	 * <code>BZHI r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.0F38.W1 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void bzhi(AsmRegister64 dst, AsmMemoryOperand src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_BZHI_R64_RM64_R64, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>CALL</code> instruction<hr>
	 * <p>
	 * <code>CALL r/m16</code><p>
	 * <code>o16 FF /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void call(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.CALL_RM16, dst.get()));
	}

	/**
	 * <code>CALL</code> instruction<hr>
	 * <p>
	 * <code>CALL r/m32</code><p>
	 * <code>o32 FF /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void call(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.CALL_RM32, dst.get()));
	}

	/**
	 * <code>CALL</code> instruction<hr>
	 * <p>
	 * <code>CALL r/m64</code><p>
	 * <code>o64 FF /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void call(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.CALL_RM64, dst.get()));
	}

	/**
	 * <code>CALL</code> instruction<hr>
	 * <p>
	 * <code>CALL m16:64</code><p>
	 * <code>o64 FF /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CALL r/m64</code><p>
	 * <code>o64 FF /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CALL m16:32</code><p>
	 * <code>o32 FF /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CALL r/m32</code><p>
	 * <code>o32 FF /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>CALL m16:16</code><p>
	 * <code>o16 FF /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CALL r/m16</code><p>
	 * <code>o16 FF /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void call(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.TBYTE) {
			code = Code.CALL_M1664;
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.CALL_RM64;
		} else if (dst.size == MemoryOperandSize.FWORD) {
			code = Code.CALL_M1632;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = getBitness() >= 32 ? Code.CALL_RM32 : Code.CALL_M1616;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.CALL_RM16;
		} else {
			throw noOpCodeFoundFor(Mnemonic.CALL, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CALL</code> instruction<hr>
	 * <p>
	 * <code>CALL rel32</code><p>
	 * <code>o64 E8 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CALL rel32</code><p>
	 * <code>o32 E8 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>CALL rel16</code><p>
	 * <code>o16 E8 cw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void call(CodeLabel dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.CALL_REL32_64;
		} else code = getBitness() >= 32 ? Code.CALL_REL32_32 : Code.CALL_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>CALL</code> instruction<hr>
	 * <p>
	 * <code>CALL rel32</code><p>
	 * <code>o64 E8 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CALL rel32</code><p>
	 * <code>o32 E8 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>CALL rel16</code><p>
	 * <code>o16 E8 cw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void call(long dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.CALL_REL32_64;
		} else code = getBitness() >= 32 ? Code.CALL_REL32_32 : Code.CALL_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>CBW</code> instruction<hr>
	 * <p>
	 * <code>CBW</code><p>
	 * <code>o16 98</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cbw() {
		addInstruction(Instruction.create(Code.CBW));
	}

	/**
	 * <code>CCS_ENCRYPT</code> instruction<hr>
	 * <p>
	 * <code>CCS_ENCRYPT</code><p>
	 * <code>a64 F3 0F A7 F0</code><p>
	 * <code>PADLOCK_GMI</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CCS_ENCRYPT</code><p>
	 * <code>a32 F3 0F A7 F0</code><p>
	 * <code>PADLOCK_GMI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CCS_ENCRYPT</code><p>
	 * <code>a16 F3 0F A7 F0</code><p>
	 * <code>PADLOCK_GMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void ccs_encrypt() {
		int code;
		if (getBitness() == 64) {
			code = Code.CCS_ENCRYPT_64;
		} else code = getBitness() >= 32 ? Code.CCS_ENCRYPT_32 : Code.CCS_ENCRYPT_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>CCS_HASH</code> instruction<hr>
	 * <p>
	 * <code>CCS_HASH</code><p>
	 * <code>a64 F3 0F A6 E8</code><p>
	 * <code>PADLOCK_GMI</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CCS_HASH</code><p>
	 * <code>a32 F3 0F A6 E8</code><p>
	 * <code>PADLOCK_GMI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CCS_HASH</code><p>
	 * <code>a16 F3 0F A6 E8</code><p>
	 * <code>PADLOCK_GMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void ccs_hash() {
		int code;
		if (getBitness() == 64) {
			code = Code.CCS_HASH_64;
		} else code = getBitness() >= 32 ? Code.CCS_HASH_32 : Code.CCS_HASH_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>CDQ</code> instruction<hr>
	 * <p>
	 * <code>CDQ</code><p>
	 * <code>o32 99</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cdq() {
		addInstruction(Instruction.create(Code.CDQ));
	}

	/**
	 * <code>CDQE</code> instruction<hr>
	 * <p>
	 * <code>CDQE</code><p>
	 * <code>o64 98</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cdqe() {
		addInstruction(Instruction.create(Code.CDQE));
	}

	/**
	 * <code>CL1INVMB</code> instruction<hr>
	 * <p>
	 * <code>CL1INVMB</code><p>
	 * <code>0F 0A</code><p>
	 * <code>CL1INVMB</code><p>
	 * <code>16/32-bit</code>
	 */
	public void cl1invmb() {
		addInstruction(Instruction.create(Code.CL1INVMB));
	}

	/**
	 * <code>CLAC</code> instruction<hr>
	 * <p>
	 * <code>CLAC</code><p>
	 * <code>NP 0F 01 CA</code><p>
	 * <code>SMAP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clac() {
		addInstruction(Instruction.create(Code.CLAC));
	}

	/**
	 * <code>CLC</code> instruction<hr>
	 * <p>
	 * <code>CLC</code><p>
	 * <code>F8</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clc() {
		addInstruction(Instruction.create(Code.CLC));
	}

	/**
	 * <code>CLD</code> instruction<hr>
	 * <p>
	 * <code>CLD</code><p>
	 * <code>FC</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cld() {
		addInstruction(Instruction.create(Code.CLD));
	}

	/**
	 * <code>CLDEMOTE</code> instruction<hr>
	 * <p>
	 * <code>CLDEMOTE m8</code><p>
	 * <code>NP 0F 1C /0</code><p>
	 * <code>CLDEMOTE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cldemote(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.CLDEMOTE_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CLFLUSH</code> instruction<hr>
	 * <p>
	 * <code>CLFLUSH m8</code><p>
	 * <code>NP 0F AE /7</code><p>
	 * <code>CLFSH</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clflush(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.CLFLUSH_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CLFLUSHOPT</code> instruction<hr>
	 * <p>
	 * <code>CLFLUSHOPT m8</code><p>
	 * <code>66 0F AE /7</code><p>
	 * <code>CLFLUSHOPT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clflushopt(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.CLFLUSHOPT_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CLGI</code> instruction<hr>
	 * <p>
	 * <code>CLGI</code><p>
	 * <code>0F 01 DD</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clgi() {
		addInstruction(Instruction.create(Code.CLGI));
	}

	/**
	 * <code>CLI</code> instruction<hr>
	 * <p>
	 * <code>CLI</code><p>
	 * <code>FA</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cli() {
		addInstruction(Instruction.create(Code.CLI));
	}

	/**
	 * <code>CLRSSBSY</code> instruction<hr>
	 * <p>
	 * <code>CLRSSBSY m64</code><p>
	 * <code>F3 0F AE /6</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clrssbsy(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.CLRSSBSY_M64, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CLTS</code> instruction<hr>
	 * <p>
	 * <code>CLTS</code><p>
	 * <code>0F 06</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clts() {
		addInstruction(Instruction.create(Code.CLTS));
	}

	/**
	 * <code>CLUI</code> instruction<hr>
	 * <p>
	 * <code>CLUI</code><p>
	 * <code>F3 0F 01 EE</code><p>
	 * <code>UINTR</code><p>
	 * <code>64-bit</code>
	 */
	public void clui() {
		addInstruction(Instruction.create(Code.CLUI));
	}

	/**
	 * <code>CLWB</code> instruction<hr>
	 * <p>
	 * <code>CLWB m8</code><p>
	 * <code>66 0F AE /6</code><p>
	 * <code>CLWB</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void clwb(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.CLWB_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CLZERO</code> instruction<hr>
	 * <p>
	 * <code>CLZERO</code><p>
	 * <code>a64 0F 01 FC</code><p>
	 * <code>CLZERO</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CLZERO</code><p>
	 * <code>a32 0F 01 FC</code><p>
	 * <code>CLZERO</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CLZERO</code><p>
	 * <code>a16 0F 01 FC</code><p>
	 * <code>CLZERO</code><p>
	 * <code>16/32-bit</code>
	 */
	public void clzero() {
		int code;
		if (getBitness() == 64) {
			code = Code.CLZEROQ;
		} else code = getBitness() >= 32 ? Code.CLZEROD : Code.CLZEROW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>CMC</code> instruction<hr>
	 * <p>
	 * <code>CMC</code><p>
	 * <code>F5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmc() {
		addInstruction(Instruction.create(Code.CMC));
	}

	/**
	 * <code>CMOVA</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r16, r/m16</code><p>
	 * <code>o16 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmova(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVA_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVA</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r32, r/m32</code><p>
	 * <code>o32 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmova(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVA_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVA</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r64, r/m64</code><p>
	 * <code>o64 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmova(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVA_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVA</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r16, r/m16</code><p>
	 * <code>o16 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmova(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVA_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVA</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r32, r/m32</code><p>
	 * <code>o32 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmova(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVA_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVA</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r64, r/m64</code><p>
	 * <code>o64 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmova(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVA_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r16, r/m16</code><p>
	 * <code>o16 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovae(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r32, r/m32</code><p>
	 * <code>o32 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovae(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r64, r/m64</code><p>
	 * <code>o64 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovae(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r16, r/m16</code><p>
	 * <code>o16 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovae(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r32, r/m32</code><p>
	 * <code>o32 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovae(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r64, r/m64</code><p>
	 * <code>o64 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovae(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVB</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r16, r/m16</code><p>
	 * <code>o16 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovb(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVB_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVB</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r32, r/m32</code><p>
	 * <code>o32 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovb(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVB_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVB</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r64, r/m64</code><p>
	 * <code>o64 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovb(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVB_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVB</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r16, r/m16</code><p>
	 * <code>o16 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovb(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVB</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r32, r/m32</code><p>
	 * <code>o32 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovb(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVB</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r64, r/m64</code><p>
	 * <code>o64 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovb(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r16, r/m16</code><p>
	 * <code>o16 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovbe(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVBE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r32, r/m32</code><p>
	 * <code>o32 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovbe(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVBE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r64, r/m64</code><p>
	 * <code>o64 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovbe(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVBE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r16, r/m16</code><p>
	 * <code>o16 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovbe(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVBE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r32, r/m32</code><p>
	 * <code>o32 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovbe(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVBE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r64, r/m64</code><p>
	 * <code>o64 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovbe(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVBE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVC</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r16, r/m16</code><p>
	 * <code>o16 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovc(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVB_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVC</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r32, r/m32</code><p>
	 * <code>o32 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovc(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVB_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVC</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r64, r/m64</code><p>
	 * <code>o64 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovc(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVB_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVC</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r16, r/m16</code><p>
	 * <code>o16 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovc(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVC</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r32, r/m32</code><p>
	 * <code>o32 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovc(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVC</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r64, r/m64</code><p>
	 * <code>o64 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovc(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVE</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r16, r/m16</code><p>
	 * <code>o16 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmove(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVE</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r32, r/m32</code><p>
	 * <code>o32 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmove(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVE</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r64, r/m64</code><p>
	 * <code>o64 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmove(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVE</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r16, r/m16</code><p>
	 * <code>o16 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmove(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVE</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r32, r/m32</code><p>
	 * <code>o32 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmove(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVE</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r64, r/m64</code><p>
	 * <code>o64 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmove(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVG</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r16, r/m16</code><p>
	 * <code>o16 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovg(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVG_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVG</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r32, r/m32</code><p>
	 * <code>o32 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovg(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVG_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVG</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r64, r/m64</code><p>
	 * <code>o64 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovg(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVG_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVG</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r16, r/m16</code><p>
	 * <code>o16 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovg(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVG_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVG</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r32, r/m32</code><p>
	 * <code>o32 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovg(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVG_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVG</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r64, r/m64</code><p>
	 * <code>o64 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovg(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVG_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r16, r/m16</code><p>
	 * <code>o16 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovge(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVGE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r32, r/m32</code><p>
	 * <code>o32 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovge(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVGE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r64, r/m64</code><p>
	 * <code>o64 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovge(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVGE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r16, r/m16</code><p>
	 * <code>o16 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovge(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVGE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r32, r/m32</code><p>
	 * <code>o32 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovge(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVGE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r64, r/m64</code><p>
	 * <code>o64 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovge(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVGE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVL</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r16, r/m16</code><p>
	 * <code>o16 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovl(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVL_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVL</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r32, r/m32</code><p>
	 * <code>o32 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovl(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVL_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVL</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r64, r/m64</code><p>
	 * <code>o64 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovl(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVL_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVL</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r16, r/m16</code><p>
	 * <code>o16 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovl(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVL_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVL</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r32, r/m32</code><p>
	 * <code>o32 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovl(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVL_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVL</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r64, r/m64</code><p>
	 * <code>o64 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovl(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVL_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r16, r/m16</code><p>
	 * <code>o16 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovle(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVLE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r32, r/m32</code><p>
	 * <code>o32 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovle(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVLE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r64, r/m64</code><p>
	 * <code>o64 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovle(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVLE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r16, r/m16</code><p>
	 * <code>o16 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovle(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVLE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r32, r/m32</code><p>
	 * <code>o32 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovle(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVLE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r64, r/m64</code><p>
	 * <code>o64 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovle(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVLE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNA</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r16, r/m16</code><p>
	 * <code>o16 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovna(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVBE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNA</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r32, r/m32</code><p>
	 * <code>o32 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovna(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVBE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNA</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r64, r/m64</code><p>
	 * <code>o64 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovna(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVBE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNA</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r16, r/m16</code><p>
	 * <code>o16 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovna(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVBE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNA</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r32, r/m32</code><p>
	 * <code>o32 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovna(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVBE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNA</code> instruction<hr>
	 * <p>
	 * <code>CMOVBE r64, r/m64</code><p>
	 * <code>o64 0F 46 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovna(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVBE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r16, r/m16</code><p>
	 * <code>o16 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnae(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVB_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r32, r/m32</code><p>
	 * <code>o32 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnae(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVB_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r64, r/m64</code><p>
	 * <code>o64 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnae(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVB_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r16, r/m16</code><p>
	 * <code>o16 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnae(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r32, r/m32</code><p>
	 * <code>o32 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnae(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNAE</code> instruction<hr>
	 * <p>
	 * <code>CMOVB r64, r/m64</code><p>
	 * <code>o64 0F 42 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnae(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVB_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNB</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r16, r/m16</code><p>
	 * <code>o16 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnb(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNB</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r32, r/m32</code><p>
	 * <code>o32 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnb(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNB</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r64, r/m64</code><p>
	 * <code>o64 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnb(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNB</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r16, r/m16</code><p>
	 * <code>o16 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnb(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNB</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r32, r/m32</code><p>
	 * <code>o32 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnb(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNB</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r64, r/m64</code><p>
	 * <code>o64 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnb(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r16, r/m16</code><p>
	 * <code>o16 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnbe(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVA_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r32, r/m32</code><p>
	 * <code>o32 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnbe(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVA_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r64, r/m64</code><p>
	 * <code>o64 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnbe(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVA_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r16, r/m16</code><p>
	 * <code>o16 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnbe(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVA_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r32, r/m32</code><p>
	 * <code>o32 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnbe(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVA_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNBE</code> instruction<hr>
	 * <p>
	 * <code>CMOVA r64, r/m64</code><p>
	 * <code>o64 0F 47 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnbe(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVA_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNC</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r16, r/m16</code><p>
	 * <code>o16 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnc(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNC</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r32, r/m32</code><p>
	 * <code>o32 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnc(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNC</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r64, r/m64</code><p>
	 * <code>o64 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnc(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVAE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNC</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r16, r/m16</code><p>
	 * <code>o16 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnc(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNC</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r32, r/m32</code><p>
	 * <code>o32 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnc(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNC</code> instruction<hr>
	 * <p>
	 * <code>CMOVAE r64, r/m64</code><p>
	 * <code>o64 0F 43 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnc(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVAE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNE</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r16, r/m16</code><p>
	 * <code>o16 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovne(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVNE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNE</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r32, r/m32</code><p>
	 * <code>o32 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovne(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVNE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNE</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r64, r/m64</code><p>
	 * <code>o64 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovne(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVNE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNE</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r16, r/m16</code><p>
	 * <code>o16 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovne(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNE</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r32, r/m32</code><p>
	 * <code>o32 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovne(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNE</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r64, r/m64</code><p>
	 * <code>o64 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovne(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNG</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r16, r/m16</code><p>
	 * <code>o16 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovng(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVLE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNG</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r32, r/m32</code><p>
	 * <code>o32 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovng(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVLE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNG</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r64, r/m64</code><p>
	 * <code>o64 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovng(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVLE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNG</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r16, r/m16</code><p>
	 * <code>o16 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovng(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVLE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNG</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r32, r/m32</code><p>
	 * <code>o32 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovng(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVLE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNG</code> instruction<hr>
	 * <p>
	 * <code>CMOVLE r64, r/m64</code><p>
	 * <code>o64 0F 4E /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovng(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVLE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r16, r/m16</code><p>
	 * <code>o16 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnge(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVL_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r32, r/m32</code><p>
	 * <code>o32 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnge(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVL_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r64, r/m64</code><p>
	 * <code>o64 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnge(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVL_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r16, r/m16</code><p>
	 * <code>o16 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnge(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVL_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r32, r/m32</code><p>
	 * <code>o32 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnge(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVL_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNGE</code> instruction<hr>
	 * <p>
	 * <code>CMOVL r64, r/m64</code><p>
	 * <code>o64 0F 4C /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnge(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVL_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNL</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r16, r/m16</code><p>
	 * <code>o16 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnl(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVGE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNL</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r32, r/m32</code><p>
	 * <code>o32 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnl(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVGE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNL</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r64, r/m64</code><p>
	 * <code>o64 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnl(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVGE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNL</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r16, r/m16</code><p>
	 * <code>o16 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnl(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVGE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNL</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r32, r/m32</code><p>
	 * <code>o32 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnl(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVGE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNL</code> instruction<hr>
	 * <p>
	 * <code>CMOVGE r64, r/m64</code><p>
	 * <code>o64 0F 4D /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnl(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVGE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r16, r/m16</code><p>
	 * <code>o16 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnle(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVG_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r32, r/m32</code><p>
	 * <code>o32 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnle(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVG_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r64, r/m64</code><p>
	 * <code>o64 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnle(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVG_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r16, r/m16</code><p>
	 * <code>o16 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnle(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVG_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r32, r/m32</code><p>
	 * <code>o32 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnle(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVG_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNLE</code> instruction<hr>
	 * <p>
	 * <code>CMOVG r64, r/m64</code><p>
	 * <code>o64 0F 4F /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnle(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVG_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNO r16, r/m16</code><p>
	 * <code>o16 0F 41 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovno(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVNO_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNO r32, r/m32</code><p>
	 * <code>o32 0F 41 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovno(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVNO_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNO r64, r/m64</code><p>
	 * <code>o64 0F 41 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovno(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVNO_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNO r16, r/m16</code><p>
	 * <code>o16 0F 41 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovno(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNO_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNO r32, r/m32</code><p>
	 * <code>o32 0F 41 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovno(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNO_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNO r64, r/m64</code><p>
	 * <code>o64 0F 41 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovno(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNO_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNP</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r16, r/m16</code><p>
	 * <code>o16 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnp(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVNP_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNP</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r32, r/m32</code><p>
	 * <code>o32 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnp(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVNP_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNP</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r64, r/m64</code><p>
	 * <code>o64 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnp(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVNP_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNP</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r16, r/m16</code><p>
	 * <code>o16 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnp(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNP_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNP</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r32, r/m32</code><p>
	 * <code>o32 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnp(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNP_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNP</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r64, r/m64</code><p>
	 * <code>o64 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnp(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNP_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNS</code> instruction<hr>
	 * <p>
	 * <code>CMOVNS r16, r/m16</code><p>
	 * <code>o16 0F 49 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovns(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVNS_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNS</code> instruction<hr>
	 * <p>
	 * <code>CMOVNS r32, r/m32</code><p>
	 * <code>o32 0F 49 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovns(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVNS_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNS</code> instruction<hr>
	 * <p>
	 * <code>CMOVNS r64, r/m64</code><p>
	 * <code>o64 0F 49 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovns(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVNS_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNS</code> instruction<hr>
	 * <p>
	 * <code>CMOVNS r16, r/m16</code><p>
	 * <code>o16 0F 49 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovns(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNS_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNS</code> instruction<hr>
	 * <p>
	 * <code>CMOVNS r32, r/m32</code><p>
	 * <code>o32 0F 49 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovns(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNS_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNS</code> instruction<hr>
	 * <p>
	 * <code>CMOVNS r64, r/m64</code><p>
	 * <code>o64 0F 49 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovns(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNS_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r16, r/m16</code><p>
	 * <code>o16 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnz(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVNE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r32, r/m32</code><p>
	 * <code>o32 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnz(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVNE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r64, r/m64</code><p>
	 * <code>o64 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnz(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVNE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVNZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r16, r/m16</code><p>
	 * <code>o16 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnz(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r32, r/m32</code><p>
	 * <code>o32 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovnz(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVNZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVNE r64, r/m64</code><p>
	 * <code>o64 0F 45 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovnz(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVO</code> instruction<hr>
	 * <p>
	 * <code>CMOVO r16, r/m16</code><p>
	 * <code>o16 0F 40 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovo(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVO_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVO</code> instruction<hr>
	 * <p>
	 * <code>CMOVO r32, r/m32</code><p>
	 * <code>o32 0F 40 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovo(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVO_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVO</code> instruction<hr>
	 * <p>
	 * <code>CMOVO r64, r/m64</code><p>
	 * <code>o64 0F 40 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovo(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVO_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVO</code> instruction<hr>
	 * <p>
	 * <code>CMOVO r16, r/m16</code><p>
	 * <code>o16 0F 40 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovo(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVO_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVO</code> instruction<hr>
	 * <p>
	 * <code>CMOVO r32, r/m32</code><p>
	 * <code>o32 0F 40 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovo(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVO_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVO</code> instruction<hr>
	 * <p>
	 * <code>CMOVO r64, r/m64</code><p>
	 * <code>o64 0F 40 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovo(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVO_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVP</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r16, r/m16</code><p>
	 * <code>o16 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovp(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVP_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVP</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r32, r/m32</code><p>
	 * <code>o32 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovp(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVP_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVP</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r64, r/m64</code><p>
	 * <code>o64 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovp(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVP_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVP</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r16, r/m16</code><p>
	 * <code>o16 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovp(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVP_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVP</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r32, r/m32</code><p>
	 * <code>o32 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovp(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVP_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVP</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r64, r/m64</code><p>
	 * <code>o64 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovp(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVP_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVPE</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r16, r/m16</code><p>
	 * <code>o16 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpe(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVP_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVPE</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r32, r/m32</code><p>
	 * <code>o32 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpe(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVP_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVPE</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r64, r/m64</code><p>
	 * <code>o64 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovpe(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVP_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVPE</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r16, r/m16</code><p>
	 * <code>o16 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpe(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVP_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVPE</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r32, r/m32</code><p>
	 * <code>o32 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpe(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVP_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVPE</code> instruction<hr>
	 * <p>
	 * <code>CMOVP r64, r/m64</code><p>
	 * <code>o64 0F 4A /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovpe(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVP_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVPO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r16, r/m16</code><p>
	 * <code>o16 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpo(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVNP_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVPO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r32, r/m32</code><p>
	 * <code>o32 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpo(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVNP_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVPO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r64, r/m64</code><p>
	 * <code>o64 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovpo(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVNP_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVPO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r16, r/m16</code><p>
	 * <code>o16 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpo(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNP_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVPO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r32, r/m32</code><p>
	 * <code>o32 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovpo(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNP_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVPO</code> instruction<hr>
	 * <p>
	 * <code>CMOVNP r64, r/m64</code><p>
	 * <code>o64 0F 4B /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovpo(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVNP_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVS</code> instruction<hr>
	 * <p>
	 * <code>CMOVS r16, r/m16</code><p>
	 * <code>o16 0F 48 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovs(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVS_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVS</code> instruction<hr>
	 * <p>
	 * <code>CMOVS r32, r/m32</code><p>
	 * <code>o32 0F 48 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovs(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVS_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVS</code> instruction<hr>
	 * <p>
	 * <code>CMOVS r64, r/m64</code><p>
	 * <code>o64 0F 48 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovs(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVS_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVS</code> instruction<hr>
	 * <p>
	 * <code>CMOVS r16, r/m16</code><p>
	 * <code>o16 0F 48 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovs(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVS_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVS</code> instruction<hr>
	 * <p>
	 * <code>CMOVS r32, r/m32</code><p>
	 * <code>o32 0F 48 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovs(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVS_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVS</code> instruction<hr>
	 * <p>
	 * <code>CMOVS r64, r/m64</code><p>
	 * <code>o64 0F 48 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovs(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVS_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r16, r/m16</code><p>
	 * <code>o16 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovz(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMOVE_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r32, r/m32</code><p>
	 * <code>o32 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovz(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMOVE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r64, r/m64</code><p>
	 * <code>o64 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovz(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMOVE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CMOVZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r16, r/m16</code><p>
	 * <code>o16 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovz(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVE_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r32, r/m32</code><p>
	 * <code>o32 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmovz(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMOVZ</code> instruction<hr>
	 * <p>
	 * <code>CMOVE r64, r/m64</code><p>
	 * <code>o64 0F 44 /r</code><p>
	 * <code>CMOV</code><p>
	 * <code>64-bit</code>
	 */
	public void cmovz(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMOVE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m8, r8</code><p>
	 * <code>38 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.CMP_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m8, r8</code><p>
	 * <code>38 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.CMP_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m16, r16</code><p>
	 * <code>o16 39 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMP_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m16, r16</code><p>
	 * <code>o16 39 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMP_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m32, r32</code><p>
	 * <code>o32 39 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMP_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m32, r32</code><p>
	 * <code>o32 39 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMP_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m64, r64</code><p>
	 * <code>o64 39 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cmp(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMP_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m64, r64</code><p>
	 * <code>o64 39 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cmp(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMP_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r8, r/m8</code><p>
	 * <code>3A /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMP_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r16, r/m16</code><p>
	 * <code>o16 3B /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMP_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r32, r/m32</code><p>
	 * <code>o32 3B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMP_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r64, r/m64</code><p>
	 * <code>o64 3B /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cmp(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CMP_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP AL, imm8</code><p>
	 * <code>3C ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m8, imm8</code><p>
	 * <code>80 /7 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.CMP_AL_IMM8 : Code.CMP_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP AX, imm16</code><p>
	 * <code>o16 3D iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m16, imm16</code><p>
	 * <code>o16 81 /7 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m16, imm8</code><p>
	 * <code>o16 83 /7 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.CMP_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.CMP_RM16_IMM8 : Code.CMP_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP EAX, imm32</code><p>
	 * <code>o32 3D id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m32, imm32</code><p>
	 * <code>o32 81 /7 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m32, imm8</code><p>
	 * <code>o32 83 /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.CMP_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.CMP_RM32_IMM8 : Code.CMP_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP RAX, imm32</code><p>
	 * <code>o64 3D id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m64, imm32</code><p>
	 * <code>o64 81 /7 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m64, imm8</code><p>
	 * <code>o64 83 /7 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cmp(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.CMP_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.CMP_RM64_IMM8 : Code.CMP_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>CMP</code> instruction<hr>
	 * <p>
	 * <code>CMP r/m64, imm32</code><p>
	 * <code>o64 81 /7 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m64, imm8</code><p>
	 * <code>o64 83 /7 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m32, imm32</code><p>
	 * <code>o32 81 /7 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m32, imm8</code><p>
	 * <code>o32 83 /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m16, imm16</code><p>
	 * <code>o16 81 /7 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m16, imm8</code><p>
	 * <code>o16 83 /7 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CMP r/m8, imm8</code><p>
	 * <code>80 /7 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmp(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.CMP_RM64_IMM8 : Code.CMP_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.CMP_RM32_IMM8 : Code.CMP_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.CMP_RM16_IMM8 : Code.CMP_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.CMP_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.CMP, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>CMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 0);
	}

	/**
	 * <code>CMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 0);
	}

	/**
	 * <code>CMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 0);
	}

	/**
	 * <code>CMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 0);
	}

	/**
	 * <code>CMPEQSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 0);
	}

	/**
	 * <code>CMPEQSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 0);
	}

	/**
	 * <code>CMPEQSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 0);
	}

	/**
	 * <code>CMPEQSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpeqss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 0);
	}

	/**
	 * <code>CMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmplepd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 2);
	}

	/**
	 * <code>CMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmplepd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 2);
	}

	/**
	 * <code>CMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpleps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 2);
	}

	/**
	 * <code>CMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpleps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 2);
	}

	/**
	 * <code>CMPLESD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmplesd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 2);
	}

	/**
	 * <code>CMPLESD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmplesd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 2);
	}

	/**
	 * <code>CMPLESS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpless(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 2);
	}

	/**
	 * <code>CMPLESS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpless(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 2);
	}

	/**
	 * <code>CMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 1);
	}

	/**
	 * <code>CMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 1);
	}

	/**
	 * <code>CMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 1);
	}

	/**
	 * <code>CMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 1);
	}

	/**
	 * <code>CMPLTSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 1);
	}

	/**
	 * <code>CMPLTSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 1);
	}

	/**
	 * <code>CMPLTSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 1);
	}

	/**
	 * <code>CMPLTSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpltss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 1);
	}

	/**
	 * <code>CMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 4);
	}

	/**
	 * <code>CMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 4);
	}

	/**
	 * <code>CMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 4);
	}

	/**
	 * <code>CMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 4);
	}

	/**
	 * <code>CMPNEQSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 4);
	}

	/**
	 * <code>CMPNEQSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 4);
	}

	/**
	 * <code>CMPNEQSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 4);
	}

	/**
	 * <code>CMPNEQSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpneqss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 4);
	}

	/**
	 * <code>CMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnlepd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 6);
	}

	/**
	 * <code>CMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnlepd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 6);
	}

	/**
	 * <code>CMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnleps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 6);
	}

	/**
	 * <code>CMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnleps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 6);
	}

	/**
	 * <code>CMPNLESD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnlesd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 6);
	}

	/**
	 * <code>CMPNLESD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnlesd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 6);
	}

	/**
	 * <code>CMPNLESS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnless(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 6);
	}

	/**
	 * <code>CMPNLESS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnless(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 6);
	}

	/**
	 * <code>CMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 5);
	}

	/**
	 * <code>CMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 5);
	}

	/**
	 * <code>CMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 5);
	}

	/**
	 * <code>CMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 5);
	}

	/**
	 * <code>CMPNLTSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 5);
	}

	/**
	 * <code>CMPNLTSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 5);
	}

	/**
	 * <code>CMPNLTSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 5);
	}

	/**
	 * <code>CMPNLTSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpnltss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 5);
	}

	/**
	 * <code>CMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 7);
	}

	/**
	 * <code>CMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 7);
	}

	/**
	 * <code>CMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 7);
	}

	/**
	 * <code>CMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 7);
	}

	/**
	 * <code>CMPORDSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 7);
	}

	/**
	 * <code>CMPORDSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 7);
	}

	/**
	 * <code>CMPORDSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 7);
	}

	/**
	 * <code>CMPORDSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpordss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 7);
	}

	/**
	 * <code>CMPPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmppd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>CMPPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmppd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>CMPPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>CMPPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>CMPSB</code> instruction<hr>
	 * <p>
	 * <code>CMPSB</code><p>
	 * <code>A6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpsb() {
		addInstruction(Instruction.createCmpsb(getBitness()));
	}

	/**
	 * <code>CMPSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD</code><p>
	 * <code>o32 A7</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpsd() {
		addInstruction(Instruction.createCmpsd(getBitness()));
	}

	/**
	 * <code>CMPSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpsd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>CMPSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpsd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>CMPSQ</code> instruction<hr>
	 * <p>
	 * <code>CMPSQ</code><p>
	 * <code>o64 A7</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cmpsq() {
		addInstruction(Instruction.createCmpsq(getBitness()));
	}

	/**
	 * <code>CMPSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpss(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>CMPSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpss(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>CMPSW</code> instruction<hr>
	 * <p>
	 * <code>CMPSW</code><p>
	 * <code>o16 A7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpsw() {
		addInstruction(Instruction.createCmpsw(getBitness()));
	}

	/**
	 * <code>CMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmppd(dst, src, 3);
	}

	/**
	 * <code>CMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>CMPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmppd(dst, src, 3);
	}

	/**
	 * <code>CMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpps(dst, src, 3);
	}

	/**
	 * <code>CMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>CMPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpps(dst, src, 3);
	}

	/**
	 * <code>CMPUNORDSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpsd(dst, src, 3);
	}

	/**
	 * <code>CMPUNORDSD</code> instruction<hr>
	 * <p>
	 * <code>CMPSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>F2 0F C2 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpsd(dst, src, 3);
	}

	/**
	 * <code>CMPUNORDSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		cmpss(dst, src, 3);
	}

	/**
	 * <code>CMPUNORDSS</code> instruction<hr>
	 * <p>
	 * <code>CMPSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>F3 0F C2 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpunordss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		cmpss(dst, src, 3);
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m8, r8</code><p>
	 * <code>0F B0 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpxchg(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m8, r8</code><p>
	 * <code>0F B0 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpxchg(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m16, r16</code><p>
	 * <code>o16 0F B1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpxchg(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m16, r16</code><p>
	 * <code>o16 0F B1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpxchg(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m32, r32</code><p>
	 * <code>o32 0F B1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpxchg(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m32, r32</code><p>
	 * <code>o32 0F B1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpxchg(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m64, r64</code><p>
	 * <code>o64 0F B1 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cmpxchg(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>CMPXCHG</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG r/m64, r64</code><p>
	 * <code>o64 0F B1 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cmpxchg(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CMPXCHG_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>CMPXCHG16B</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG16B m128</code><p>
	 * <code>o64 0F C7 /1</code><p>
	 * <code>CMPXCHG16B</code><p>
	 * <code>64-bit</code>
	 */
	public void cmpxchg16b(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.CMPXCHG16B_M128, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CMPXCHG8B</code> instruction<hr>
	 * <p>
	 * <code>CMPXCHG8B m64</code><p>
	 * <code>0F C7 /1</code><p>
	 * <code>CX8</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cmpxchg8b(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.CMPXCHG8B_M64, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>COMISD</code> instruction<hr>
	 * <p>
	 * <code>COMISD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 2F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void comisd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.COMISD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>COMISD</code> instruction<hr>
	 * <p>
	 * <code>COMISD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 2F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void comisd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.COMISD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>COMISS</code> instruction<hr>
	 * <p>
	 * <code>COMISS xmm1, xmm2/m32</code><p>
	 * <code>NP 0F 2F /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void comiss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.COMISS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>COMISS</code> instruction<hr>
	 * <p>
	 * <code>COMISS xmm1, xmm2/m32</code><p>
	 * <code>NP 0F 2F /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void comiss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.COMISS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CPU_READ</code> instruction<hr>
	 * <p>
	 * <code>CPU_READ</code><p>
	 * <code>0F 3D</code><p>
	 * <code>Cyrix MediaGX, GXm, GXLV, GX1</code><p>
	 * <code>16/32-bit</code>
	 */
	public void cpu_read() {
		addInstruction(Instruction.create(Code.CPU_READ));
	}

	/**
	 * <code>CPU_WRITE</code> instruction<hr>
	 * <p>
	 * <code>CPU_WRITE</code><p>
	 * <code>0F 3C</code><p>
	 * <code>Cyrix MediaGX, GXm, GXLV, GX1</code><p>
	 * <code>16/32-bit</code>
	 */
	public void cpu_write() {
		addInstruction(Instruction.create(Code.CPU_WRITE));
	}

	/**
	 * <code>CPUID</code> instruction<hr>
	 * <p>
	 * <code>CPUID</code><p>
	 * <code>0F A2</code><p>
	 * <code>CPUID</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cpuid() {
		addInstruction(Instruction.create(Code.CPUID));
	}

	/**
	 * <code>CQO</code> instruction<hr>
	 * <p>
	 * <code>CQO</code><p>
	 * <code>o64 99</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void cqo() {
		addInstruction(Instruction.create(Code.CQO));
	}

	/**
	 * <code>CRC32</code> instruction<hr>
	 * <p>
	 * <code>CRC32 r32, r/m8</code><p>
	 * <code>F2 0F 38 F0 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void crc32(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.CRC32_R32_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>CRC32</code> instruction<hr>
	 * <p>
	 * <code>CRC32 r64, r/m8</code><p>
	 * <code>F2 o64 0F 38 F0 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code>
	 */
	public void crc32(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.CRC32_R64_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>CRC32</code> instruction<hr>
	 * <p>
	 * <code>CRC32 r32, r/m16</code><p>
	 * <code>o16 F2 0F 38 F1 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void crc32(AsmRegister32 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.CRC32_R32_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>CRC32</code> instruction<hr>
	 * <p>
	 * <code>CRC32 r32, r/m32</code><p>
	 * <code>o32 F2 0F 38 F1 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void crc32(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CRC32_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CRC32</code> instruction<hr>
	 * <p>
	 * <code>CRC32 r64, r/m64</code><p>
	 * <code>F2 o64 0F 38 F1 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code>
	 */
	public void crc32(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CRC32_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CRC32</code> instruction<hr>
	 * <p>
	 * <code>CRC32 r32, r/m32</code><p>
	 * <code>o32 F2 0F 38 F1 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CRC32 r32, r/m16</code><p>
	 * <code>o16 F2 0F 38 F1 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>CRC32 r32, r/m8</code><p>
	 * <code>F2 0F 38 F0 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void crc32(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.DWORD) {
			code = Code.CRC32_R32_RM32;
		} else if (src.size == MemoryOperandSize.WORD) {
			code = Code.CRC32_R32_RM16;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.CRC32_R32_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.CRC32, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CRC32</code> instruction<hr>
	 * <p>
	 * <code>CRC32 r64, r/m64</code><p>
	 * <code>F2 o64 0F 38 F1 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CRC32 r64, r/m8</code><p>
	 * <code>F2 o64 0F 38 F0 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code>
	 */
	public void crc32(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.QWORD) {
			code = Code.CRC32_R64_RM64;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.CRC32_R64_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.CRC32, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>CVTDQ2PD xmm1, xmm2/m64</code><p>
	 * <code>F3 0F E6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtdq2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTDQ2PD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>CVTDQ2PD xmm1, xmm2/m64</code><p>
	 * <code>F3 0F E6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtdq2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTDQ2PD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>CVTDQ2PS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtdq2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTDQ2PS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>CVTDQ2PS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtdq2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTDQ2PS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>F2 0F E6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpd2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTPD2DQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>F2 0F E6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpd2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPD2DQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPD2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTPD2PI mm, xmm/m128</code><p>
	 * <code>66 0F 2D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpd2pi(AsmRegisterMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTPD2PI_MM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPD2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTPD2PI mm, xmm/m128</code><p>
	 * <code>66 0F 2D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpd2pi(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPD2PI_MM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPD2PS</code> instruction<hr>
	 * <p>
	 * <code>CVTPD2PS xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpd2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTPD2PS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPD2PS</code> instruction<hr>
	 * <p>
	 * <code>CVTPD2PS xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpd2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPD2PS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPI2PD</code> instruction<hr>
	 * <p>
	 * <code>CVTPI2PD xmm, mm/m64</code><p>
	 * <code>66 0F 2A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpi2pd(AsmRegisterXMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.CVTPI2PD_XMM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPI2PD</code> instruction<hr>
	 * <p>
	 * <code>CVTPI2PD xmm, mm/m64</code><p>
	 * <code>66 0F 2A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpi2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPI2PD_XMM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPI2PS</code> instruction<hr>
	 * <p>
	 * <code>CVTPI2PS xmm, mm/m64</code><p>
	 * <code>NP 0F 2A /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpi2ps(AsmRegisterXMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.CVTPI2PS_XMM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPI2PS</code> instruction<hr>
	 * <p>
	 * <code>CVTPI2PS xmm, mm/m64</code><p>
	 * <code>NP 0F 2A /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtpi2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPI2PS_XMM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtps2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTPS2DQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtps2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPS2DQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>CVTPS2PD xmm1, xmm2/m64</code><p>
	 * <code>NP 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtps2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTPS2PD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>CVTPS2PD xmm1, xmm2/m64</code><p>
	 * <code>NP 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtps2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPS2PD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTPS2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTPS2PI mm, xmm/m64</code><p>
	 * <code>NP 0F 2D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtps2pi(AsmRegisterMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTPS2PI_MM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTPS2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTPS2PI mm, xmm/m64</code><p>
	 * <code>NP 0F 2D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtps2pi(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTPS2PI_MM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSD2SI r32, xmm1/m64</code><p>
	 * <code>F2 0F 2D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsd2si(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTSD2SI_R32_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSD2SI r64, xmm1/m64</code><p>
	 * <code>F2 o64 0F 2D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void cvtsd2si(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTSD2SI_R64_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSD2SI r32, xmm1/m64</code><p>
	 * <code>F2 0F 2D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsd2si(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTSD2SI_R32_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSD2SI r64, xmm1/m64</code><p>
	 * <code>F2 o64 0F 2D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void cvtsd2si(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTSD2SI_R64_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSD2SS</code> instruction<hr>
	 * <p>
	 * <code>CVTSD2SS xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsd2ss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTSD2SS_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSD2SS</code> instruction<hr>
	 * <p>
	 * <code>CVTSD2SS xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsd2ss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTSD2SS_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSI2SD</code> instruction<hr>
	 * <p>
	 * <code>CVTSI2SD xmm1, r/m32</code><p>
	 * <code>F2 0F 2A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsi2sd(AsmRegisterXMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CVTSI2SD_XMM_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSI2SD</code> instruction<hr>
	 * <p>
	 * <code>CVTSI2SD xmm1, r/m64</code><p>
	 * <code>F2 o64 0F 2A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void cvtsi2sd(AsmRegisterXMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CVTSI2SD_XMM_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSI2SD</code> instruction<hr>
	 * <p>
	 * <code>CVTSI2SD xmm1, r/m64</code><p>
	 * <code>F2 o64 0F 2A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CVTSI2SD xmm1, r/m32</code><p>
	 * <code>F2 0F 2A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsi2sd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.QWORD) {
			code = Code.CVTSI2SD_XMM_RM64;
		} else if (src.size == MemoryOperandSize.DWORD) {
			code = Code.CVTSI2SD_XMM_RM32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.CVTSI2SD, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSI2SS</code> instruction<hr>
	 * <p>
	 * <code>CVTSI2SS xmm1, r/m32</code><p>
	 * <code>F3 0F 2A /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsi2ss(AsmRegisterXMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.CVTSI2SS_XMM_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSI2SS</code> instruction<hr>
	 * <p>
	 * <code>CVTSI2SS xmm1, r/m64</code><p>
	 * <code>F3 o64 0F 2A /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void cvtsi2ss(AsmRegisterXMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.CVTSI2SS_XMM_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSI2SS</code> instruction<hr>
	 * <p>
	 * <code>CVTSI2SS xmm1, r/m64</code><p>
	 * <code>F3 o64 0F 2A /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>CVTSI2SS xmm1, r/m32</code><p>
	 * <code>F3 0F 2A /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtsi2ss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.QWORD) {
			code = Code.CVTSI2SS_XMM_RM64;
		} else if (src.size == MemoryOperandSize.DWORD) {
			code = Code.CVTSI2SS_XMM_RM32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.CVTSI2SS, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSS2SD</code> instruction<hr>
	 * <p>
	 * <code>CVTSS2SD xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtss2sd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTSS2SD_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSS2SD</code> instruction<hr>
	 * <p>
	 * <code>CVTSS2SD xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtss2sd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTSS2SD_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSS2SI r32, xmm1/m32</code><p>
	 * <code>F3 0F 2D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtss2si(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTSS2SI_R32_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSS2SI r64, xmm1/m32</code><p>
	 * <code>F3 o64 0F 2D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void cvtss2si(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTSS2SI_R64_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>CVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSS2SI r32, xmm1/m32</code><p>
	 * <code>F3 0F 2D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvtss2si(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTSS2SI_R32_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTSS2SI r64, xmm1/m32</code><p>
	 * <code>F3 o64 0F 2D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void cvtss2si(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTSS2SI_R64_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F E6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttpd2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTPD2DQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F E6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttpd2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTPD2DQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTPD2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTTPD2PI mm, xmm/m128</code><p>
	 * <code>66 0F 2C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttpd2pi(AsmRegisterMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTPD2PI_MM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTPD2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTTPD2PI mm, xmm/m128</code><p>
	 * <code>66 0F 2C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttpd2pi(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTPD2PI_MM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 5B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttps2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTPS2DQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>CVTTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 5B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttps2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTPS2DQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTPS2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTTPS2PI mm, xmm/m64</code><p>
	 * <code>NP 0F 2C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttps2pi(AsmRegisterMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTPS2PI_MM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTPS2PI</code> instruction<hr>
	 * <p>
	 * <code>CVTTPS2PI mm, xmm/m64</code><p>
	 * <code>NP 0F 2C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttps2pi(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTPS2PI_MM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSD2SI r32, xmm1/m64</code><p>
	 * <code>F2 0F 2C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttsd2si(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTSD2SI_R32_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSD2SI r64, xmm1/m64</code><p>
	 * <code>F2 o64 0F 2C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void cvttsd2si(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTSD2SI_R64_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSD2SI r32, xmm1/m64</code><p>
	 * <code>F2 0F 2C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttsd2si(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTSD2SI_R32_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSD2SI r64, xmm1/m64</code><p>
	 * <code>F2 o64 0F 2C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void cvttsd2si(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTSD2SI_R64_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSS2SI r32, xmm1/m32</code><p>
	 * <code>F3 0F 2C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttss2si(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTSS2SI_R32_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSS2SI r64, xmm1/m32</code><p>
	 * <code>F3 o64 0F 2C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void cvttss2si(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.CVTTSS2SI_R64_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>CVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSS2SI r32, xmm1/m32</code><p>
	 * <code>F3 0F 2C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cvttss2si(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTSS2SI_R32_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>CVTTSS2SI r64, xmm1/m32</code><p>
	 * <code>F3 o64 0F 2C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void cvttss2si(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.CVTTSS2SI_R64_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>CWD</code> instruction<hr>
	 * <p>
	 * <code>CWD</code><p>
	 * <code>o16 99</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cwd() {
		addInstruction(Instruction.create(Code.CWD));
	}

	/**
	 * <code>CWDE</code> instruction<hr>
	 * <p>
	 * <code>CWDE</code><p>
	 * <code>o32 98</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void cwde() {
		addInstruction(Instruction.create(Code.CWDE));
	}

	/**
	 * <code>DAA</code> instruction<hr>
	 * <p>
	 * <code>DAA</code><p>
	 * <code>27</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void daa() {
		addInstruction(Instruction.create(Code.DAA));
	}

	/**
	 * <code>DAS</code> instruction<hr>
	 * <p>
	 * <code>DAS</code><p>
	 * <code>2F</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void das() {
		addInstruction(Instruction.create(Code.DAS));
	}

	/**
	 * <code>DEC</code> instruction<hr>
	 * <p>
	 * <code>DEC r/m8</code><p>
	 * <code>FE /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void dec(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.DEC_RM8, dst.get()));
	}

	/**
	 * <code>DEC</code> instruction<hr>
	 * <p>
	 * <code>DEC r/m16</code><p>
	 * <code>o16 FF /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>DEC r16</code><p>
	 * <code>o16 48+rw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void dec(AsmRegister16 dst) {
		int code;
		code = getBitness() == 64 ? Code.DEC_RM16 : Code.DEC_R16;
		addInstruction(Instruction.create(code, dst.get()));
	}

	/**
	 * <code>DEC</code> instruction<hr>
	 * <p>
	 * <code>DEC r/m32</code><p>
	 * <code>o32 FF /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>DEC r32</code><p>
	 * <code>o32 48+rd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void dec(AsmRegister32 dst) {
		int code;
		code = getBitness() == 64 ? Code.DEC_RM32 : Code.DEC_R32;
		addInstruction(Instruction.create(code, dst.get()));
	}

	/**
	 * <code>DEC</code> instruction<hr>
	 * <p>
	 * <code>DEC r/m64</code><p>
	 * <code>o64 FF /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void dec(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.DEC_RM64, dst.get()));
	}

	/**
	 * <code>DEC</code> instruction<hr>
	 * <p>
	 * <code>DEC r/m64</code><p>
	 * <code>o64 FF /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>DEC r/m32</code><p>
	 * <code>o32 FF /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>DEC r/m16</code><p>
	 * <code>o16 FF /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>DEC r/m8</code><p>
	 * <code>FE /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void dec(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.DEC_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.DEC_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.DEC_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.DEC_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.DEC, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>DIV</code> instruction<hr>
	 * <p>
	 * <code>DIV r/m8</code><p>
	 * <code>F6 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void div(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.DIV_RM8, dst.get()));
	}

	/**
	 * <code>DIV</code> instruction<hr>
	 * <p>
	 * <code>DIV r/m16</code><p>
	 * <code>o16 F7 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void div(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.DIV_RM16, dst.get()));
	}

	/**
	 * <code>DIV</code> instruction<hr>
	 * <p>
	 * <code>DIV r/m32</code><p>
	 * <code>o32 F7 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void div(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.DIV_RM32, dst.get()));
	}

	/**
	 * <code>DIV</code> instruction<hr>
	 * <p>
	 * <code>DIV r/m64</code><p>
	 * <code>o64 F7 /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void div(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.DIV_RM64, dst.get()));
	}

	/**
	 * <code>DIV</code> instruction<hr>
	 * <p>
	 * <code>DIV r/m64</code><p>
	 * <code>o64 F7 /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>DIV r/m32</code><p>
	 * <code>o32 F7 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>DIV r/m16</code><p>
	 * <code>o16 F7 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>DIV r/m8</code><p>
	 * <code>F6 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void div(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.DIV_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.DIV_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.DIV_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.DIV_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.DIV, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>DIVPD</code> instruction<hr>
	 * <p>
	 * <code>DIVPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.DIVPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>DIVPD</code> instruction<hr>
	 * <p>
	 * <code>DIVPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.DIVPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>DIVPS</code> instruction<hr>
	 * <p>
	 * <code>DIVPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5E /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.DIVPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>DIVPS</code> instruction<hr>
	 * <p>
	 * <code>DIVPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5E /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.DIVPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>DIVSD</code> instruction<hr>
	 * <p>
	 * <code>DIVSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.DIVSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>DIVSD</code> instruction<hr>
	 * <p>
	 * <code>DIVSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.DIVSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>DIVSS</code> instruction<hr>
	 * <p>
	 * <code>DIVSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5E /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.DIVSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>DIVSS</code> instruction<hr>
	 * <p>
	 * <code>DIVSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5E /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void divss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.DIVSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>DMINT</code> instruction<hr>
	 * <p>
	 * <code>DMINT</code><p>
	 * <code>0F 39</code><p>
	 * <code>AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void dmint() {
		addInstruction(Instruction.create(Code.DMINT));
	}

	/**
	 * <code>DPPD</code> instruction<hr>
	 * <p>
	 * <code>DPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 41 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void dppd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.DPPD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>DPPD</code> instruction<hr>
	 * <p>
	 * <code>DPPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 41 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void dppd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.DPPD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>DPPS</code> instruction<hr>
	 * <p>
	 * <code>DPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 40 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void dpps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.DPPS_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>DPPS</code> instruction<hr>
	 * <p>
	 * <code>DPPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 40 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void dpps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.DPPS_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>EMMS</code> instruction<hr>
	 * <p>
	 * <code>EMMS</code><p>
	 * <code>NP 0F 77</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void emms() {
		addInstruction(Instruction.create(Code.EMMS));
	}

	/**
	 * <code>ENCLS</code> instruction<hr>
	 * <p>
	 * <code>ENCLS</code><p>
	 * <code>NP 0F 01 CF</code><p>
	 * <code>SGX1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void encls() {
		addInstruction(Instruction.create(Code.ENCLS));
	}

	/**
	 * <code>ENCLU</code> instruction<hr>
	 * <p>
	 * <code>ENCLU</code><p>
	 * <code>NP 0F 01 D7</code><p>
	 * <code>SGX1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void enclu() {
		addInstruction(Instruction.create(Code.ENCLU));
	}

	/**
	 * <code>ENCLV</code> instruction<hr>
	 * <p>
	 * <code>ENCLV</code><p>
	 * <code>NP 0F 01 C0</code><p>
	 * <code>OSS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void enclv() {
		addInstruction(Instruction.create(Code.ENCLV));
	}

	/**
	 * <code>ENCODEKEY128</code> instruction<hr>
	 * <p>
	 * <code>ENCODEKEY128 r32, r32, &lt;XMM0-2&gt;, &lt;XMM4-6&gt;</code><p>
	 * <code>F3 0F 38 FA 11:rrr:bbb</code><p>
	 * <code>AESKLE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void encodekey128(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ENCODEKEY128_R32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>ENCODEKEY256</code> instruction<hr>
	 * <p>
	 * <code>ENCODEKEY256 r32, r32, &lt;XMM0-6&gt;</code><p>
	 * <code>F3 0F 38 FB 11:rrr:bbb</code><p>
	 * <code>AESKLE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void encodekey256(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.ENCODEKEY256_R32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>ENDBR32</code> instruction<hr>
	 * <p>
	 * <code>ENDBR32</code><p>
	 * <code>F3 0F 1E FB</code><p>
	 * <code>CET_IBT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void endbr32() {
		addInstruction(Instruction.create(Code.ENDBR32));
	}

	/**
	 * <code>ENDBR64</code> instruction<hr>
	 * <p>
	 * <code>ENDBR64</code><p>
	 * <code>F3 0F 1E FA</code><p>
	 * <code>CET_IBT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void endbr64() {
		addInstruction(Instruction.create(Code.ENDBR64));
	}

	/**
	 * <code>ENQCMD</code> instruction<hr>
	 * <p>
	 * <code>ENQCMD r16, m512</code><p>
	 * <code>a16 F2 0F 38 F8 !(11):rrr:bbb</code><p>
	 * <code>ENQCMD</code><p>
	 * <code>16/32-bit</code>
	 */
	public void enqcmd(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ENQCMD_R16_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ENQCMD</code> instruction<hr>
	 * <p>
	 * <code>ENQCMD r32, m512</code><p>
	 * <code>a32 F2 0F 38 F8 !(11):rrr:bbb</code><p>
	 * <code>ENQCMD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void enqcmd(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ENQCMD_R32_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ENQCMD</code> instruction<hr>
	 * <p>
	 * <code>ENQCMD r64, m512</code><p>
	 * <code>a64 F2 0F 38 F8 !(11):rrr:bbb</code><p>
	 * <code>ENQCMD</code><p>
	 * <code>64-bit</code>
	 */
	public void enqcmd(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ENQCMD_R64_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ENQCMDS</code> instruction<hr>
	 * <p>
	 * <code>ENQCMDS r16, m512</code><p>
	 * <code>a16 F3 0F 38 F8 !(11):rrr:bbb</code><p>
	 * <code>ENQCMD</code><p>
	 * <code>16/32-bit</code>
	 */
	public void enqcmds(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ENQCMDS_R16_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ENQCMDS</code> instruction<hr>
	 * <p>
	 * <code>ENQCMDS r32, m512</code><p>
	 * <code>a32 F3 0F 38 F8 !(11):rrr:bbb</code><p>
	 * <code>ENQCMD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void enqcmds(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ENQCMDS_R32_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ENQCMDS</code> instruction<hr>
	 * <p>
	 * <code>ENQCMDS r64, m512</code><p>
	 * <code>a64 F3 0F 38 F8 !(11):rrr:bbb</code><p>
	 * <code>ENQCMD</code><p>
	 * <code>64-bit</code>
	 */
	public void enqcmds(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ENQCMDS_R64_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ENTER</code> instruction<hr>
	 * <p>
	 * <code>ENTER imm16, imm8</code><p>
	 * <code>o64 C8 iw ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ENTER imm16, imm8</code><p>
	 * <code>o32 C8 iw ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>ENTER imm16, imm8</code><p>
	 * <code>o16 C8 iw ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void enter(int imm, int imm1) {
		int code;
		if (getBitness() == 64) {
			code = Code.ENTERQ_IMM16_IMM8;
		} else code = getBitness() >= 32 ? Code.ENTERD_IMM16_IMM8 : Code.ENTERW_IMM16_IMM8;
		addInstruction(Instruction.create(code, imm, imm1));
	}

	/**
	 * <code>ERETS</code> instruction<hr>
	 * <p>
	 * <code>ERETS</code><p>
	 * <code>F2 0F 01 CA</code><p>
	 * <code>FRED</code><p>
	 * <code>64-bit</code>
	 */
	public void erets() {
		addInstruction(Instruction.create(Code.ERETS));
	}

	/**
	 * <code>ERETU</code> instruction<hr>
	 * <p>
	 * <code>ERETU</code><p>
	 * <code>F3 0F 01 CA</code><p>
	 * <code>FRED</code><p>
	 * <code>64-bit</code>
	 */
	public void eretu() {
		addInstruction(Instruction.create(Code.ERETU));
	}

	/**
	 * <code>EXTRACTPS</code> instruction<hr>
	 * <p>
	 * <code>EXTRACTPS r/m32, xmm1, imm8</code><p>
	 * <code>66 0F 3A 17 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void extractps(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EXTRACTPS_RM32_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>EXTRACTPS</code> instruction<hr>
	 * <p>
	 * <code>EXTRACTPS r64/m32, xmm1, imm8</code><p>
	 * <code>66 o64 0F 3A 17 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>64-bit</code>
	 */
	public void extractps(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EXTRACTPS_R64M32_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>EXTRACTPS</code> instruction<hr>
	 * <p>
	 * <code>EXTRACTPS r/m32, xmm1, imm8</code><p>
	 * <code>66 0F 3A 17 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void extractps(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EXTRACTPS_RM32_XMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>EXTRQ</code> instruction<hr>
	 * <p>
	 * <code>EXTRQ xmm1, xmm2</code><p>
	 * <code>66 0F 79 /r</code><p>
	 * <code>SSE4A</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void extrq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EXTRQ_XMM_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>EXTRQ</code> instruction<hr>
	 * <p>
	 * <code>EXTRQ xmm1, imm8, imm8</code><p>
	 * <code>66 0F 78 /0 ib ib</code><p>
	 * <code>SSE4A</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void extrq(AsmRegisterXMM dst, int imm, int imm1) {
		addInstruction(Instruction.create(Code.EXTRQ_XMM_IMM8_IMM8, dst.get(), imm, imm1));
	}

	/**
	 * <code>F2XM1</code> instruction<hr>
	 * <p>
	 * <code>F2XM1</code><p>
	 * <code>D9 F0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void f2xm1() {
		addInstruction(Instruction.create(Code.F2XM1));
	}

	/**
	 * <code>FABS</code> instruction<hr>
	 * <p>
	 * <code>FABS</code><p>
	 * <code>D9 E1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fabs() {
		addInstruction(Instruction.create(Code.FABS));
	}

	/**
	 * <code>FADD</code> instruction<hr>
	 * <p>
	 * <code>FADD m64fp</code><p>
	 * <code>DC /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FADD m32fp</code><p>
	 * <code>D8 /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fadd(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FADD_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FADD_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FADD, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FADD</code> instruction<hr>
	 * <p>
	 * <code>FADD ST(0), ST(i)</code><p>
	 * <code>D8 C0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FADD ST(i), ST(0)</code><p>
	 * <code>DC C0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fadd(AsmRegisterST dst, AsmRegisterST src) {
		int code;
		code = dst.getRegister() == Register.ST0 ? Code.FADD_ST0_STI : Code.FADD_STI_ST0;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>FADDP</code> instruction<hr>
	 * <p>
	 * <code>FADDP ST(i), ST(0)</code><p>
	 * <code>DE C0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void faddp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FADDP_STI_ST0, dst.get(), src.get()));
	}

	/**
	 * <code>FBLD</code> instruction<hr>
	 * <p>
	 * <code>FBLD m80bcd</code><p>
	 * <code>DF /4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fbld(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FBLD_M80BCD, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FBSTP</code> instruction<hr>
	 * <p>
	 * <code>FBSTP m80bcd</code><p>
	 * <code>DF /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fbstp(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FBSTP_M80BCD, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FCHS</code> instruction<hr>
	 * <p>
	 * <code>FCHS</code><p>
	 * <code>D9 E0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fchs() {
		addInstruction(Instruction.create(Code.FCHS));
	}

	/**
	 * <code>FCLEX</code> instruction<hr>
	 * <p>
	 * <code>FCLEX</code><p>
	 * <code>9B DB E2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fclex() {
		addInstruction(Instruction.create(Code.FCLEX));
	}

	/**
	 * <code>FCMOVB</code> instruction<hr>
	 * <p>
	 * <code>FCMOVB ST(0), ST(i)</code><p>
	 * <code>DA C0+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmovb(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVB_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCMOVBE</code> instruction<hr>
	 * <p>
	 * <code>FCMOVBE ST(0), ST(i)</code><p>
	 * <code>DA D0+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmovbe(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVBE_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCMOVE</code> instruction<hr>
	 * <p>
	 * <code>FCMOVE ST(0), ST(i)</code><p>
	 * <code>DA C8+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmove(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVE_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCMOVNB</code> instruction<hr>
	 * <p>
	 * <code>FCMOVNB ST(0), ST(i)</code><p>
	 * <code>DB C0+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmovnb(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVNB_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCMOVNBE</code> instruction<hr>
	 * <p>
	 * <code>FCMOVNBE ST(0), ST(i)</code><p>
	 * <code>DB D0+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmovnbe(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVNBE_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCMOVNE</code> instruction<hr>
	 * <p>
	 * <code>FCMOVNE ST(0), ST(i)</code><p>
	 * <code>DB C8+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmovne(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVNE_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCMOVNU</code> instruction<hr>
	 * <p>
	 * <code>FCMOVNU ST(0), ST(i)</code><p>
	 * <code>DB D8+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmovnu(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVNU_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCMOVU</code> instruction<hr>
	 * <p>
	 * <code>FCMOVU ST(0), ST(i)</code><p>
	 * <code>DA D8+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcmovu(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCMOVU_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCOM</code> instruction<hr>
	 * <p>
	 * <code>FCOM m64fp</code><p>
	 * <code>DC /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FCOM m32fp</code><p>
	 * <code>D8 /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcom(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FCOM_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FCOM_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FCOM, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FCOM</code> instruction<hr>
	 * <p>
	 * <code>FCOM ST(i)</code><p>
	 * <code>D8 D0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcom(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCOM_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCOMI</code> instruction<hr>
	 * <p>
	 * <code>FCOMI ST, ST(i)</code><p>
	 * <code>DB F0+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcomi(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCOMI_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCOMIP</code> instruction<hr>
	 * <p>
	 * <code>FCOMIP ST, ST(i)</code><p>
	 * <code>DF F0+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcomip(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCOMIP_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCOMP</code> instruction<hr>
	 * <p>
	 * <code>FCOMP m64fp</code><p>
	 * <code>DC /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FCOMP m32fp</code><p>
	 * <code>D8 /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcomp(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FCOMP_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FCOMP_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FCOMP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FCOMP</code> instruction<hr>
	 * <p>
	 * <code>FCOMP ST(i)</code><p>
	 * <code>D8 D8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcomp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FCOMP_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FCOMPP</code> instruction<hr>
	 * <p>
	 * <code>FCOMPP</code><p>
	 * <code>DE D9</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcompp() {
		addInstruction(Instruction.create(Code.FCOMPP));
	}

	/**
	 * <code>FCOS</code> instruction<hr>
	 * <p>
	 * <code>FCOS</code><p>
	 * <code>D9 FF</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fcos() {
		addInstruction(Instruction.create(Code.FCOS));
	}

	/**
	 * <code>FDECSTP</code> instruction<hr>
	 * <p>
	 * <code>FDECSTP</code><p>
	 * <code>D9 F6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdecstp() {
		addInstruction(Instruction.create(Code.FDECSTP));
	}

	/**
	 * <code>FDISI</code> instruction<hr>
	 * <p>
	 * <code>FDISI</code><p>
	 * <code>9B DB E1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdisi() {
		addInstruction(Instruction.create(Code.FDISI));
	}

	/**
	 * <code>FDIV</code> instruction<hr>
	 * <p>
	 * <code>FDIV m64fp</code><p>
	 * <code>DC /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FDIV m32fp</code><p>
	 * <code>D8 /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdiv(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FDIV_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FDIV_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FDIV, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FDIV</code> instruction<hr>
	 * <p>
	 * <code>FDIV ST(0), ST(i)</code><p>
	 * <code>D8 F0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FDIV ST(i), ST(0)</code><p>
	 * <code>DC F8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdiv(AsmRegisterST dst, AsmRegisterST src) {
		int code;
		code = dst.getRegister() == Register.ST0 ? Code.FDIV_ST0_STI : Code.FDIV_STI_ST0;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>FDIVP</code> instruction<hr>
	 * <p>
	 * <code>FDIVP ST(i), ST(0)</code><p>
	 * <code>DE F8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdivp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FDIVP_STI_ST0, dst.get(), src.get()));
	}

	/**
	 * <code>FDIVR</code> instruction<hr>
	 * <p>
	 * <code>FDIVR m64fp</code><p>
	 * <code>DC /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FDIVR m32fp</code><p>
	 * <code>D8 /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdivr(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FDIVR_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FDIVR_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FDIVR, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FDIVR</code> instruction<hr>
	 * <p>
	 * <code>FDIVR ST(0), ST(i)</code><p>
	 * <code>D8 F8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FDIVR ST(i), ST(0)</code><p>
	 * <code>DC F0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdivr(AsmRegisterST dst, AsmRegisterST src) {
		int code;
		code = dst.getRegister() == Register.ST0 ? Code.FDIVR_ST0_STI : Code.FDIVR_STI_ST0;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>FDIVRP</code> instruction<hr>
	 * <p>
	 * <code>FDIVRP ST(i), ST(0)</code><p>
	 * <code>DE F0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fdivrp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FDIVRP_STI_ST0, dst.get(), src.get()));
	}

	/**
	 * <code>FEMMS</code> instruction<hr>
	 * <p>
	 * <code>FEMMS</code><p>
	 * <code>0F 0E</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void femms() {
		addInstruction(Instruction.create(Code.FEMMS));
	}

	/**
	 * <code>FENI</code> instruction<hr>
	 * <p>
	 * <code>FENI</code><p>
	 * <code>9B DB E0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void feni() {
		addInstruction(Instruction.create(Code.FENI));
	}

	/**
	 * <code>FFREE</code> instruction<hr>
	 * <p>
	 * <code>FFREE ST(i)</code><p>
	 * <code>DD C0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ffree(AsmRegisterST dst) {
		addInstruction(Instruction.create(Code.FFREE_STI, dst.get()));
	}

	/**
	 * <code>FFREEP</code> instruction<hr>
	 * <p>
	 * <code>FFREEP ST(i)</code><p>
	 * <code>DF C0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ffreep(AsmRegisterST dst) {
		addInstruction(Instruction.create(Code.FFREEP_STI, dst.get()));
	}

	/**
	 * <code>FIADD</code> instruction<hr>
	 * <p>
	 * <code>FIADD m32int</code><p>
	 * <code>DA /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FIADD m16int</code><p>
	 * <code>DE /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fiadd(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FIADD_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FIADD_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FIADD, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FICOM</code> instruction<hr>
	 * <p>
	 * <code>FICOM m32int</code><p>
	 * <code>DA /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FICOM m16int</code><p>
	 * <code>DE /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ficom(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FICOM_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FICOM_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FICOM, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FICOMP</code> instruction<hr>
	 * <p>
	 * <code>FICOMP m32int</code><p>
	 * <code>DA /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FICOMP m16int</code><p>
	 * <code>DE /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ficomp(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FICOMP_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FICOMP_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FICOMP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FIDIV</code> instruction<hr>
	 * <p>
	 * <code>FIDIV m32int</code><p>
	 * <code>DA /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FIDIV m16int</code><p>
	 * <code>DE /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fidiv(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FIDIV_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FIDIV_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FIDIV, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FIDIVR</code> instruction<hr>
	 * <p>
	 * <code>FIDIVR m32int</code><p>
	 * <code>DA /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FIDIVR m16int</code><p>
	 * <code>DE /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fidivr(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FIDIVR_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FIDIVR_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FIDIVR, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FILD</code> instruction<hr>
	 * <p>
	 * <code>FILD m64int</code><p>
	 * <code>DF /5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FILD m32int</code><p>
	 * <code>DB /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FILD m16int</code><p>
	 * <code>DF /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fild(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FILD_M64INT;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FILD_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FILD_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FILD, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FIMUL</code> instruction<hr>
	 * <p>
	 * <code>FIMUL m32int</code><p>
	 * <code>DA /1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FIMUL m16int</code><p>
	 * <code>DE /1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fimul(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FIMUL_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FIMUL_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FIMUL, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FINCSTP</code> instruction<hr>
	 * <p>
	 * <code>FINCSTP</code><p>
	 * <code>D9 F7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fincstp() {
		addInstruction(Instruction.create(Code.FINCSTP));
	}

	/**
	 * <code>FINIT</code> instruction<hr>
	 * <p>
	 * <code>FINIT</code><p>
	 * <code>9B DB E3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void finit() {
		addInstruction(Instruction.create(Code.FINIT));
	}

	/**
	 * <code>FIST</code> instruction<hr>
	 * <p>
	 * <code>FIST m32int</code><p>
	 * <code>DB /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FIST m16int</code><p>
	 * <code>DF /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fist(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FIST_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FIST_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FIST, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FISTP</code> instruction<hr>
	 * <p>
	 * <code>FISTP m64int</code><p>
	 * <code>DF /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FISTP m32int</code><p>
	 * <code>DB /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FISTP m16int</code><p>
	 * <code>DF /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fistp(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FISTP_M64INT;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FISTP_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FISTP_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FISTP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FISTTP</code> instruction<hr>
	 * <p>
	 * <code>FISTTP m64int</code><p>
	 * <code>DD /1</code><p>
	 * <code>8087+ and SSE3</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FISTTP m32int</code><p>
	 * <code>DB /1</code><p>
	 * <code>8087+ and SSE3</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FISTTP m16int</code><p>
	 * <code>DF /1</code><p>
	 * <code>8087+ and SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fisttp(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FISTTP_M64INT;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FISTTP_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FISTTP_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FISTTP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FISUB</code> instruction<hr>
	 * <p>
	 * <code>FISUB m32int</code><p>
	 * <code>DA /4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FISUB m16int</code><p>
	 * <code>DE /4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fisub(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FISUB_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FISUB_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FISUB, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FISUBR</code> instruction<hr>
	 * <p>
	 * <code>FISUBR m32int</code><p>
	 * <code>DA /5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FISUBR m16int</code><p>
	 * <code>DE /5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fisubr(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FISUBR_M32INT;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.FISUBR_M16INT;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FISUBR, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FLD</code> instruction<hr>
	 * <p>
	 * <code>FLD ST(i)</code><p>
	 * <code>D9 C0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fld(AsmRegisterST dst) {
		addInstruction(Instruction.create(Code.FLD_STI, dst.get()));
	}

	/**
	 * <code>FLD</code> instruction<hr>
	 * <p>
	 * <code>FLD m80fp</code><p>
	 * <code>DB /5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FLD m64fp</code><p>
	 * <code>DD /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FLD m32fp</code><p>
	 * <code>D9 /0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fld(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.TBYTE) {
			code = Code.FLD_M80FP;
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FLD_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FLD_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FLD, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FLD1</code> instruction<hr>
	 * <p>
	 * <code>FLD1</code><p>
	 * <code>D9 E8</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fld1() {
		addInstruction(Instruction.create(Code.FLD1));
	}

	/**
	 * <code>FLDCW</code> instruction<hr>
	 * <p>
	 * <code>FLDCW m2byte</code><p>
	 * <code>D9 /5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldcw(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FLDCW_M2BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FLDENV</code> instruction<hr>
	 * <p>
	 * <code>FLDENV m28byte</code><p>
	 * <code>o32 D9 /4</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FLDENV m14byte</code><p>
	 * <code>o16 D9 /4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldenv(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.FLDENV_M28BYTE : Code.FLDENV_M14BYTE;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FLDL2E</code> instruction<hr>
	 * <p>
	 * <code>FLDL2E</code><p>
	 * <code>D9 EA</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldl2e() {
		addInstruction(Instruction.create(Code.FLDL2E));
	}

	/**
	 * <code>FLDL2T</code> instruction<hr>
	 * <p>
	 * <code>FLDL2T</code><p>
	 * <code>D9 E9</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldl2t() {
		addInstruction(Instruction.create(Code.FLDL2T));
	}

	/**
	 * <code>FLDLG2</code> instruction<hr>
	 * <p>
	 * <code>FLDLG2</code><p>
	 * <code>D9 EC</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldlg2() {
		addInstruction(Instruction.create(Code.FLDLG2));
	}

	/**
	 * <code>FLDLN2</code> instruction<hr>
	 * <p>
	 * <code>FLDLN2</code><p>
	 * <code>D9 ED</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldln2() {
		addInstruction(Instruction.create(Code.FLDLN2));
	}

	/**
	 * <code>FLDPI</code> instruction<hr>
	 * <p>
	 * <code>FLDPI</code><p>
	 * <code>D9 EB</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldpi() {
		addInstruction(Instruction.create(Code.FLDPI));
	}

	/**
	 * <code>FLDZ</code> instruction<hr>
	 * <p>
	 * <code>FLDZ</code><p>
	 * <code>D9 EE</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fldz() {
		addInstruction(Instruction.create(Code.FLDZ));
	}

	/**
	 * <code>FMUL</code> instruction<hr>
	 * <p>
	 * <code>FMUL m64fp</code><p>
	 * <code>DC /1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FMUL m32fp</code><p>
	 * <code>D8 /1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fmul(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FMUL_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FMUL_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FMUL, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FMUL</code> instruction<hr>
	 * <p>
	 * <code>FMUL ST(0), ST(i)</code><p>
	 * <code>D8 C8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FMUL ST(i), ST(0)</code><p>
	 * <code>DC C8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fmul(AsmRegisterST dst, AsmRegisterST src) {
		int code;
		code = dst.getRegister() == Register.ST0 ? Code.FMUL_ST0_STI : Code.FMUL_STI_ST0;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>FMULP</code> instruction<hr>
	 * <p>
	 * <code>FMULP ST(i), ST(0)</code><p>
	 * <code>DE C8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fmulp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FMULP_STI_ST0, dst.get(), src.get()));
	}

	/**
	 * <code>FNCLEX</code> instruction<hr>
	 * <p>
	 * <code>FNCLEX</code><p>
	 * <code>DB E2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnclex() {
		addInstruction(Instruction.create(Code.FNCLEX));
	}

	/**
	 * <code>FNDISI</code> instruction<hr>
	 * <p>
	 * <code>FNDISI</code><p>
	 * <code>DB E1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fndisi() {
		addInstruction(Instruction.create(Code.FNDISI));
	}

	/**
	 * <code>FNENI</code> instruction<hr>
	 * <p>
	 * <code>FNENI</code><p>
	 * <code>DB E0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fneni() {
		addInstruction(Instruction.create(Code.FNENI));
	}

	/**
	 * <code>FNINIT</code> instruction<hr>
	 * <p>
	 * <code>FNINIT</code><p>
	 * <code>DB E3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fninit() {
		addInstruction(Instruction.create(Code.FNINIT));
	}

	/**
	 * <code>FNOP</code> instruction<hr>
	 * <p>
	 * <code>FNOP</code><p>
	 * <code>D9 D0</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnop() {
		addInstruction(Instruction.create(Code.FNOP));
	}

	/**
	 * <code>FNSAVE</code> instruction<hr>
	 * <p>
	 * <code>FNSAVE m108byte</code><p>
	 * <code>o32 DD /6</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FNSAVE m94byte</code><p>
	 * <code>o16 DD /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnsave(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.FNSAVE_M108BYTE : Code.FNSAVE_M94BYTE;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FNSETPM</code> instruction<hr>
	 * <p>
	 * <code>FNSETPM</code><p>
	 * <code>DB E4</code><p>
	 * <code>287+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnsetpm() {
		addInstruction(Instruction.create(Code.FNSETPM));
	}

	/**
	 * <code>FNSTCW</code> instruction<hr>
	 * <p>
	 * <code>FNSTCW m2byte</code><p>
	 * <code>D9 /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnstcw(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FNSTCW_M2BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FNSTDW</code> instruction<hr>
	 * <p>
	 * <code>FNSTDW AX</code><p>
	 * <code>DF E1</code><p>
	 * <code>387 SL</code><p>
	 * <code>16/32-bit</code>
	 */
	public void fnstdw(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.FNSTDW_AX, dst.get()));
	}

	/**
	 * <code>FNSTENV</code> instruction<hr>
	 * <p>
	 * <code>FNSTENV m28byte</code><p>
	 * <code>o32 D9 /6</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FNSTENV m14byte</code><p>
	 * <code>o16 D9 /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnstenv(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.FNSTENV_M28BYTE : Code.FNSTENV_M14BYTE;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FNSTSG</code> instruction<hr>
	 * <p>
	 * <code>FNSTSG AX</code><p>
	 * <code>DF E2</code><p>
	 * <code>387 SL</code><p>
	 * <code>16/32-bit</code>
	 */
	public void fnstsg(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.FNSTSG_AX, dst.get()));
	}

	/**
	 * <code>FNSTSW</code> instruction<hr>
	 * <p>
	 * <code>FNSTSW AX</code><p>
	 * <code>DF E0</code><p>
	 * <code>287+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnstsw(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.FNSTSW_AX, dst.get()));
	}

	/**
	 * <code>FNSTSW</code> instruction<hr>
	 * <p>
	 * <code>FNSTSW m2byte</code><p>
	 * <code>DD /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fnstsw(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FNSTSW_M2BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FPATAN</code> instruction<hr>
	 * <p>
	 * <code>FPATAN</code><p>
	 * <code>D9 F3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fpatan() {
		addInstruction(Instruction.create(Code.FPATAN));
	}

	/**
	 * <code>FPREM</code> instruction<hr>
	 * <p>
	 * <code>FPREM</code><p>
	 * <code>D9 F8</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fprem() {
		addInstruction(Instruction.create(Code.FPREM));
	}

	/**
	 * <code>FPREM1</code> instruction<hr>
	 * <p>
	 * <code>FPREM1</code><p>
	 * <code>D9 F5</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fprem1() {
		addInstruction(Instruction.create(Code.FPREM1));
	}

	/**
	 * <code>FPTAN</code> instruction<hr>
	 * <p>
	 * <code>FPTAN</code><p>
	 * <code>D9 F2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fptan() {
		addInstruction(Instruction.create(Code.FPTAN));
	}

	/**
	 * <code>FRNDINT</code> instruction<hr>
	 * <p>
	 * <code>FRNDINT</code><p>
	 * <code>D9 FC</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void frndint() {
		addInstruction(Instruction.create(Code.FRNDINT));
	}

	/**
	 * <code>FRSTOR</code> instruction<hr>
	 * <p>
	 * <code>FRSTOR m108byte</code><p>
	 * <code>o32 DD /4</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FRSTOR m94byte</code><p>
	 * <code>o16 DD /4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void frstor(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.FRSTOR_M108BYTE : Code.FRSTOR_M94BYTE;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FRSTPM</code> instruction<hr>
	 * <p>
	 * <code>FRSTPM</code><p>
	 * <code>DB E5</code><p>
	 * <code>287 XL</code><p>
	 * <code>16/32-bit</code>
	 */
	public void frstpm() {
		addInstruction(Instruction.create(Code.FRSTPM));
	}

	/**
	 * <code>FSAVE</code> instruction<hr>
	 * <p>
	 * <code>FSAVE m108byte</code><p>
	 * <code>9B o32 DD /6</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSAVE m94byte</code><p>
	 * <code>9B o16 DD /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsave(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.FSAVE_M108BYTE : Code.FSAVE_M94BYTE;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSCALE</code> instruction<hr>
	 * <p>
	 * <code>FSCALE</code><p>
	 * <code>D9 FD</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fscale() {
		addInstruction(Instruction.create(Code.FSCALE));
	}

	/**
	 * <code>FSETPM</code> instruction<hr>
	 * <p>
	 * <code>FSETPM</code><p>
	 * <code>9B DB E4</code><p>
	 * <code>287+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsetpm() {
		addInstruction(Instruction.create(Code.FSETPM));
	}

	/**
	 * <code>FSIN</code> instruction<hr>
	 * <p>
	 * <code>FSIN</code><p>
	 * <code>D9 FE</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsin() {
		addInstruction(Instruction.create(Code.FSIN));
	}

	/**
	 * <code>FSINCOS</code> instruction<hr>
	 * <p>
	 * <code>FSINCOS</code><p>
	 * <code>D9 FB</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsincos() {
		addInstruction(Instruction.create(Code.FSINCOS));
	}

	/**
	 * <code>FSQRT</code> instruction<hr>
	 * <p>
	 * <code>FSQRT</code><p>
	 * <code>D9 FA</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsqrt() {
		addInstruction(Instruction.create(Code.FSQRT));
	}

	/**
	 * <code>FST</code> instruction<hr>
	 * <p>
	 * <code>FST ST(i)</code><p>
	 * <code>DD D0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fst(AsmRegisterST dst) {
		addInstruction(Instruction.create(Code.FST_STI, dst.get()));
	}

	/**
	 * <code>FST</code> instruction<hr>
	 * <p>
	 * <code>FST m64fp</code><p>
	 * <code>DD /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FST m32fp</code><p>
	 * <code>D9 /2</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fst(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FST_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FST_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FST, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSTCW</code> instruction<hr>
	 * <p>
	 * <code>FSTCW m2byte</code><p>
	 * <code>9B D9 /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fstcw(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FSTCW_M2BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSTDW</code> instruction<hr>
	 * <p>
	 * <code>FSTDW AX</code><p>
	 * <code>9B DF E1</code><p>
	 * <code>387 SL</code><p>
	 * <code>16/32-bit</code>
	 */
	public void fstdw(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.FSTDW_AX, dst.get()));
	}

	/**
	 * <code>FSTENV</code> instruction<hr>
	 * <p>
	 * <code>FSTENV m28byte</code><p>
	 * <code>9B o32 D9 /6</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSTENV m14byte</code><p>
	 * <code>9B o16 D9 /6</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fstenv(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.FSTENV_M28BYTE : Code.FSTENV_M14BYTE;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSTP</code> instruction<hr>
	 * <p>
	 * <code>FSTP ST(i)</code><p>
	 * <code>DD D8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fstp(AsmRegisterST dst) {
		addInstruction(Instruction.create(Code.FSTP_STI, dst.get()));
	}

	/**
	 * <code>FSTP</code> instruction<hr>
	 * <p>
	 * <code>FSTP m80fp</code><p>
	 * <code>DB /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSTP m64fp</code><p>
	 * <code>DD /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSTP m32fp</code><p>
	 * <code>D9 /3</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fstp(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.TBYTE) {
			code = Code.FSTP_M80FP;
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FSTP_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FSTP_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FSTP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSTPNCE</code> instruction<hr>
	 * <p>
	 * <code>FSTPNCE ST(i)</code><p>
	 * <code>D9 D8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fstpnce(AsmRegisterST dst) {
		addInstruction(Instruction.create(Code.FSTPNCE_STI, dst.get()));
	}

	/**
	 * <code>FSTSG</code> instruction<hr>
	 * <p>
	 * <code>FSTSG AX</code><p>
	 * <code>9B DF E2</code><p>
	 * <code>387 SL</code><p>
	 * <code>16/32-bit</code>
	 */
	public void fstsg(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.FSTSG_AX, dst.get()));
	}

	/**
	 * <code>FSTSW</code> instruction<hr>
	 * <p>
	 * <code>FSTSW AX</code><p>
	 * <code>9B DF E0</code><p>
	 * <code>287+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fstsw(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.FSTSW_AX, dst.get()));
	}

	/**
	 * <code>FSTSW</code> instruction<hr>
	 * <p>
	 * <code>FSTSW m2byte</code><p>
	 * <code>9B DD /7</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fstsw(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FSTSW_M2BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSUB</code> instruction<hr>
	 * <p>
	 * <code>FSUB m64fp</code><p>
	 * <code>DC /4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSUB m32fp</code><p>
	 * <code>D8 /4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsub(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FSUB_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FSUB_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FSUB, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSUB</code> instruction<hr>
	 * <p>
	 * <code>FSUB ST(0), ST(i)</code><p>
	 * <code>D8 E0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSUB ST(i), ST(0)</code><p>
	 * <code>DC E8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsub(AsmRegisterST dst, AsmRegisterST src) {
		int code;
		code = dst.getRegister() == Register.ST0 ? Code.FSUB_ST0_STI : Code.FSUB_STI_ST0;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>FSUBP</code> instruction<hr>
	 * <p>
	 * <code>FSUBP ST(i), ST(0)</code><p>
	 * <code>DE E8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsubp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FSUBP_STI_ST0, dst.get(), src.get()));
	}

	/**
	 * <code>FSUBR</code> instruction<hr>
	 * <p>
	 * <code>FSUBR m64fp</code><p>
	 * <code>DC /5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSUBR m32fp</code><p>
	 * <code>D8 /5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsubr(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.FSUBR_M64FP;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.FSUBR_M32FP;
		} else {
			throw noOpCodeFoundFor(Mnemonic.FSUBR, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FSUBR</code> instruction<hr>
	 * <p>
	 * <code>FSUBR ST(0), ST(i)</code><p>
	 * <code>D8 E8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>FSUBR ST(i), ST(0)</code><p>
	 * <code>DC E0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsubr(AsmRegisterST dst, AsmRegisterST src) {
		int code;
		code = dst.getRegister() == Register.ST0 ? Code.FSUBR_ST0_STI : Code.FSUBR_STI_ST0;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>FSUBRP</code> instruction<hr>
	 * <p>
	 * <code>FSUBRP ST(i), ST(0)</code><p>
	 * <code>DE E0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fsubrp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FSUBRP_STI_ST0, dst.get(), src.get()));
	}

	/**
	 * <code>FTST</code> instruction<hr>
	 * <p>
	 * <code>FTST</code><p>
	 * <code>D9 E4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ftst() {
		addInstruction(Instruction.create(Code.FTST));
	}

	/**
	 * <code>FUCOM</code> instruction<hr>
	 * <p>
	 * <code>FUCOM ST(i)</code><p>
	 * <code>DD E0+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fucom(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FUCOM_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FUCOMI</code> instruction<hr>
	 * <p>
	 * <code>FUCOMI ST, ST(i)</code><p>
	 * <code>DB E8+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fucomi(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FUCOMI_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FUCOMIP</code> instruction<hr>
	 * <p>
	 * <code>FUCOMIP ST, ST(i)</code><p>
	 * <code>DF E8+i</code><p>
	 * <code>8087+ and CMOV</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fucomip(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FUCOMIP_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FUCOMP</code> instruction<hr>
	 * <p>
	 * <code>FUCOMP ST(i)</code><p>
	 * <code>DD E8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fucomp(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FUCOMP_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FUCOMPP</code> instruction<hr>
	 * <p>
	 * <code>FUCOMPP</code><p>
	 * <code>DA E9</code><p>
	 * <code>387+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fucompp() {
		addInstruction(Instruction.create(Code.FUCOMPP));
	}

	/**
	 * <code>FXAM</code> instruction<hr>
	 * <p>
	 * <code>FXAM</code><p>
	 * <code>D9 E5</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fxam() {
		addInstruction(Instruction.create(Code.FXAM));
	}

	/**
	 * <code>FXCH</code> instruction<hr>
	 * <p>
	 * <code>FXCH ST(i)</code><p>
	 * <code>D9 C8+i</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fxch(AsmRegisterST dst, AsmRegisterST src) {
		addInstruction(Instruction.create(Code.FXCH_ST0_STI, dst.get(), src.get()));
	}

	/**
	 * <code>FXRSTOR</code> instruction<hr>
	 * <p>
	 * <code>FXRSTOR m512byte</code><p>
	 * <code>NP 0F AE /1</code><p>
	 * <code>FXSR</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fxrstor(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FXRSTOR_M512BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FXRSTOR64</code> instruction<hr>
	 * <p>
	 * <code>FXRSTOR64 m512byte</code><p>
	 * <code>NP o64 0F AE /1</code><p>
	 * <code>FXSR</code><p>
	 * <code>64-bit</code>
	 */
	public void fxrstor64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FXRSTOR64_M512BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FXSAVE</code> instruction<hr>
	 * <p>
	 * <code>FXSAVE m512byte</code><p>
	 * <code>NP 0F AE /0</code><p>
	 * <code>FXSR</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fxsave(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FXSAVE_M512BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FXSAVE64</code> instruction<hr>
	 * <p>
	 * <code>FXSAVE64 m512byte</code><p>
	 * <code>NP o64 0F AE /0</code><p>
	 * <code>FXSR</code><p>
	 * <code>64-bit</code>
	 */
	public void fxsave64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.FXSAVE64_M512BYTE, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>FXTRACT</code> instruction<hr>
	 * <p>
	 * <code>FXTRACT</code><p>
	 * <code>D9 F4</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fxtract() {
		addInstruction(Instruction.create(Code.FXTRACT));
	}

	/**
	 * <code>FYL2X</code> instruction<hr>
	 * <p>
	 * <code>FYL2X</code><p>
	 * <code>D9 F1</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fyl2x() {
		addInstruction(Instruction.create(Code.FYL2X));
	}

	/**
	 * <code>FYL2XP1</code> instruction<hr>
	 * <p>
	 * <code>FYL2XP1</code><p>
	 * <code>D9 F9</code><p>
	 * <code>8087+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void fyl2xp1() {
		addInstruction(Instruction.create(Code.FYL2XP1));
	}

	/**
	 * <code>GETSEC</code> instruction<hr>
	 * <p>
	 * <code>GETSEC</code><p>
	 * <code>NP 0F 37</code><p>
	 * <code>SMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void getsec() {
		addInstruction(Instruction.create(Code.GETSECD));
	}

	/**
	 * <code>GETSECQ</code> instruction<hr>
	 * <p>
	 * <code>GETSECQ</code><p>
	 * <code>NP o64 0F 37</code><p>
	 * <code>SMX</code><p>
	 * <code>64-bit</code>
	 */
	public void getsecq() {
		addInstruction(Instruction.create(Code.GETSECQ));
	}

	/**
	 * <code>GF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A CF /r ib</code><p>
	 * <code>GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void gf2p8affineinvqb(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.GF2P8AFFINEINVQB_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>GF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A CF /r ib</code><p>
	 * <code>GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void gf2p8affineinvqb(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.GF2P8AFFINEINVQB_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>GF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A CE /r ib</code><p>
	 * <code>GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void gf2p8affineqb(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.GF2P8AFFINEQB_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>GF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A CE /r ib</code><p>
	 * <code>GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void gf2p8affineqb(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.GF2P8AFFINEQB_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>GF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>GF2P8MULB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 CF /r</code><p>
	 * <code>GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void gf2p8mulb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.GF2P8MULB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>GF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>GF2P8MULB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 CF /r</code><p>
	 * <code>GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void gf2p8mulb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.GF2P8MULB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>HADDPD</code> instruction<hr>
	 * <p>
	 * <code>HADDPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 7C /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void haddpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.HADDPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>HADDPD</code> instruction<hr>
	 * <p>
	 * <code>HADDPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 7C /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void haddpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.HADDPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>HADDPS</code> instruction<hr>
	 * <p>
	 * <code>HADDPS xmm1, xmm2/m128</code><p>
	 * <code>F2 0F 7C /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void haddps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.HADDPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>HADDPS</code> instruction<hr>
	 * <p>
	 * <code>HADDPS xmm1, xmm2/m128</code><p>
	 * <code>F2 0F 7C /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void haddps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.HADDPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>HLT</code> instruction<hr>
	 * <p>
	 * <code>HLT</code><p>
	 * <code>F4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void hlt() {
		addInstruction(Instruction.create(Code.HLT));
	}

	/**
	 * <code>HRESET</code> instruction<hr>
	 * <p>
	 * <code>HRESET imm8, &lt;EAX&gt;</code><p>
	 * <code>F3 0F 3A F0 C0 ib</code><p>
	 * <code>HRESET</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void hreset(int imm) {
		addInstruction(Instruction.create(Code.HRESET_IMM8, imm));
	}

	/**
	 * <code>HSUBPD</code> instruction<hr>
	 * <p>
	 * <code>HSUBPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 7D /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void hsubpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.HSUBPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>HSUBPD</code> instruction<hr>
	 * <p>
	 * <code>HSUBPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 7D /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void hsubpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.HSUBPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>HSUBPS</code> instruction<hr>
	 * <p>
	 * <code>HSUBPS xmm1, xmm2/m128</code><p>
	 * <code>F2 0F 7D /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void hsubps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.HSUBPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>HSUBPS</code> instruction<hr>
	 * <p>
	 * <code>HSUBPS xmm1, xmm2/m128</code><p>
	 * <code>F2 0F 7D /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void hsubps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.HSUBPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>IBTS</code> instruction<hr>
	 * <p>
	 * <code>IBTS r/m16, r16</code><p>
	 * <code>o16 0F A7 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void ibts(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.IBTS_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>IBTS</code> instruction<hr>
	 * <p>
	 * <code>IBTS r/m16, r16</code><p>
	 * <code>o16 0F A7 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void ibts(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.IBTS_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>IBTS</code> instruction<hr>
	 * <p>
	 * <code>IBTS r/m32, r32</code><p>
	 * <code>o32 0F A7 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void ibts(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.IBTS_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>IBTS</code> instruction<hr>
	 * <p>
	 * <code>IBTS r/m32, r32</code><p>
	 * <code>o32 0F A7 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void ibts(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.IBTS_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>IDIV</code> instruction<hr>
	 * <p>
	 * <code>IDIV r/m8</code><p>
	 * <code>F6 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void idiv(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.IDIV_RM8, dst.get()));
	}

	/**
	 * <code>IDIV</code> instruction<hr>
	 * <p>
	 * <code>IDIV r/m16</code><p>
	 * <code>o16 F7 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void idiv(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.IDIV_RM16, dst.get()));
	}

	/**
	 * <code>IDIV</code> instruction<hr>
	 * <p>
	 * <code>IDIV r/m32</code><p>
	 * <code>o32 F7 /7</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void idiv(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.IDIV_RM32, dst.get()));
	}

	/**
	 * <code>IDIV</code> instruction<hr>
	 * <p>
	 * <code>IDIV r/m64</code><p>
	 * <code>o64 F7 /7</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void idiv(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.IDIV_RM64, dst.get()));
	}

	/**
	 * <code>IDIV</code> instruction<hr>
	 * <p>
	 * <code>IDIV r/m64</code><p>
	 * <code>o64 F7 /7</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>IDIV r/m32</code><p>
	 * <code>o32 F7 /7</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IDIV r/m16</code><p>
	 * <code>o16 F7 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IDIV r/m8</code><p>
	 * <code>F6 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void idiv(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.IDIV_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.IDIV_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.IDIV_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.IDIV_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.IDIV, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r/m8</code><p>
	 * <code>F6 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.IMUL_RM8, dst.get()));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r/m16</code><p>
	 * <code>o16 F7 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.IMUL_RM16, dst.get()));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r/m32</code><p>
	 * <code>o32 F7 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.IMUL_RM32, dst.get()));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r/m64</code><p>
	 * <code>o64 F7 /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void imul(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.IMUL_RM64, dst.get()));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r/m64</code><p>
	 * <code>o64 F7 /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>IMUL r/m32</code><p>
	 * <code>o32 F7 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IMUL r/m16</code><p>
	 * <code>o16 F7 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IMUL r/m8</code><p>
	 * <code>F6 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.IMUL_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.IMUL_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.IMUL_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.IMUL_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.IMUL, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r16, r/m16</code><p>
	 * <code>o16 0F AF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.IMUL_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r32, r/m32</code><p>
	 * <code>o32 0F AF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.IMUL_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r64, r/m64</code><p>
	 * <code>o64 0F AF /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void imul(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.IMUL_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r16, r/m16</code><p>
	 * <code>o16 0F AF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.IMUL_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r32, r/m32</code><p>
	 * <code>o32 0F AF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.IMUL_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r64, r/m64</code><p>
	 * <code>o64 0F AF /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void imul(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.IMUL_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r16, r/m16, imm16</code><p>
	 * <code>o16 69 /r iw</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IMUL r16, r/m16, imm8</code><p>
	 * <code>o16 6B /r ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister16 dst, AsmRegister16 src1, int imm) {
		int code;
		code = imm >= -0x80 && imm <= 0x7F ? Code.IMUL_R16_RM16_IMM8 : Code.IMUL_R16_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r32, r/m32, imm32</code><p>
	 * <code>o32 69 /r id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IMUL r32, r/m32, imm8</code><p>
	 * <code>o32 6B /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister32 dst, AsmRegister32 src1, int imm) {
		int code;
		code = imm >= -0x80 && imm <= 0x7F ? Code.IMUL_R32_RM32_IMM8 : Code.IMUL_R32_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r64, r/m64, imm32</code><p>
	 * <code>o64 69 /r id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>IMUL r64, r/m64, imm8</code><p>
	 * <code>o64 6B /r ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void imul(AsmRegister64 dst, AsmRegister64 src1, int imm) {
		int code;
		code = imm >= -0x80 && imm <= 0x7F ? Code.IMUL_R64_RM64_IMM8 : Code.IMUL_R64_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r16, r/m16, imm16</code><p>
	 * <code>o16 69 /r iw</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IMUL r16, r/m16, imm8</code><p>
	 * <code>o16 6B /r ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister16 dst, AsmMemoryOperand src1, int imm) {
		int code;
		code = imm >= -0x80 && imm <= 0x7F ? Code.IMUL_R16_RM16_IMM8 : Code.IMUL_R16_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r32, r/m32, imm32</code><p>
	 * <code>o32 69 /r id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>IMUL r32, r/m32, imm8</code><p>
	 * <code>o32 6B /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void imul(AsmRegister32 dst, AsmMemoryOperand src1, int imm) {
		int code;
		code = imm >= -0x80 && imm <= 0x7F ? Code.IMUL_R32_RM32_IMM8 : Code.IMUL_R32_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>IMUL</code> instruction<hr>
	 * <p>
	 * <code>IMUL r64, r/m64, imm32</code><p>
	 * <code>o64 69 /r id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>IMUL r64, r/m64, imm8</code><p>
	 * <code>o64 6B /r ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void imul(AsmRegister64 dst, AsmMemoryOperand src1, int imm) {
		int code;
		code = imm >= -0x80 && imm <= 0x7F ? Code.IMUL_R64_RM64_IMM8 : Code.IMUL_R64_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>IN</code> instruction<hr>
	 * <p>
	 * <code>IN AL, DX</code><p>
	 * <code>EC</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void in(AsmRegister8 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.IN_AL_DX, dst.get(), src.get()));
	}

	/**
	 * <code>IN</code> instruction<hr>
	 * <p>
	 * <code>IN AX, DX</code><p>
	 * <code>o16 ED</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void in(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.IN_AX_DX, dst.get(), src.get()));
	}

	/**
	 * <code>IN</code> instruction<hr>
	 * <p>
	 * <code>IN EAX, DX</code><p>
	 * <code>o32 ED</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void in(AsmRegister32 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.IN_EAX_DX, dst.get(), src.get()));
	}

	/**
	 * <code>IN</code> instruction<hr>
	 * <p>
	 * <code>IN AL, imm8</code><p>
	 * <code>E4 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void in(AsmRegister8 dst, int imm) {
		addInstruction(Instruction.create(Code.IN_AL_IMM8, dst.get(), imm));
	}

	/**
	 * <code>IN</code> instruction<hr>
	 * <p>
	 * <code>IN AX, imm8</code><p>
	 * <code>o16 E5 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void in(AsmRegister16 dst, int imm) {
		addInstruction(Instruction.create(Code.IN_AX_IMM8, dst.get(), imm));
	}

	/**
	 * <code>IN</code> instruction<hr>
	 * <p>
	 * <code>IN EAX, imm8</code><p>
	 * <code>o32 E5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void in(AsmRegister32 dst, int imm) {
		addInstruction(Instruction.create(Code.IN_EAX_IMM8, dst.get(), imm));
	}

	/**
	 * <code>INC</code> instruction<hr>
	 * <p>
	 * <code>INC r/m8</code><p>
	 * <code>FE /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void inc(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.INC_RM8, dst.get()));
	}

	/**
	 * <code>INC</code> instruction<hr>
	 * <p>
	 * <code>INC r/m16</code><p>
	 * <code>o16 FF /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>INC r16</code><p>
	 * <code>o16 40+rw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void inc(AsmRegister16 dst) {
		int code;
		code = getBitness() == 64 ? Code.INC_RM16 : Code.INC_R16;
		addInstruction(Instruction.create(code, dst.get()));
	}

	/**
	 * <code>INC</code> instruction<hr>
	 * <p>
	 * <code>INC r/m32</code><p>
	 * <code>o32 FF /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>INC r32</code><p>
	 * <code>o32 40+rd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void inc(AsmRegister32 dst) {
		int code;
		code = getBitness() == 64 ? Code.INC_RM32 : Code.INC_R32;
		addInstruction(Instruction.create(code, dst.get()));
	}

	/**
	 * <code>INC</code> instruction<hr>
	 * <p>
	 * <code>INC r/m64</code><p>
	 * <code>o64 FF /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void inc(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.INC_RM64, dst.get()));
	}

	/**
	 * <code>INC</code> instruction<hr>
	 * <p>
	 * <code>INC r/m64</code><p>
	 * <code>o64 FF /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>INC r/m32</code><p>
	 * <code>o32 FF /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>INC r/m16</code><p>
	 * <code>o16 FF /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>INC r/m8</code><p>
	 * <code>FE /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void inc(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.INC_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.INC_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.INC_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.INC_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.INC, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>INCSSPD</code> instruction<hr>
	 * <p>
	 * <code>INCSSPD r32</code><p>
	 * <code>F3 0F AE /5</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void incsspd(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.INCSSPD_R32, dst.get()));
	}

	/**
	 * <code>INCSSPQ</code> instruction<hr>
	 * <p>
	 * <code>INCSSPQ r64</code><p>
	 * <code>F3 o64 0F AE /5</code><p>
	 * <code>CET_SS</code><p>
	 * <code>64-bit</code>
	 */
	public void incsspq(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.INCSSPQ_R64, dst.get()));
	}

	/**
	 * <code>INSB</code> instruction<hr>
	 * <p>
	 * <code>INSB</code><p>
	 * <code>6C</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void insb() {
		addInstruction(Instruction.createInsb(getBitness()));
	}

	/**
	 * <code>INSD</code> instruction<hr>
	 * <p>
	 * <code>INSD</code><p>
	 * <code>o32 6D</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void insd() {
		addInstruction(Instruction.createInsd(getBitness()));
	}

	/**
	 * <code>INSERTPS</code> instruction<hr>
	 * <p>
	 * <code>INSERTPS xmm1, xmm2/m32, imm8</code><p>
	 * <code>66 0F 3A 21 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void insertps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.INSERTPS_XMM_XMMM32_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>INSERTPS</code> instruction<hr>
	 * <p>
	 * <code>INSERTPS xmm1, xmm2/m32, imm8</code><p>
	 * <code>66 0F 3A 21 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void insertps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.INSERTPS_XMM_XMMM32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>INSERTQ</code> instruction<hr>
	 * <p>
	 * <code>INSERTQ xmm1, xmm2</code><p>
	 * <code>F2 0F 79 /r</code><p>
	 * <code>SSE4A</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void insertq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.INSERTQ_XMM_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>INSERTQ</code> instruction<hr>
	 * <p>
	 * <code>INSERTQ xmm1, xmm2, imm8, imm8</code><p>
	 * <code>F2 0F 78 /r ib ib</code><p>
	 * <code>SSE4A</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void insertq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm, int imm1) {
		addInstruction(Instruction.create(Code.INSERTQ_XMM_XMM_IMM8_IMM8, dst.get(), src1.get(), imm, imm1));
	}

	/**
	 * <code>INSW</code> instruction<hr>
	 * <p>
	 * <code>INSW</code><p>
	 * <code>o16 6D</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void insw() {
		addInstruction(Instruction.createInsw(getBitness()));
	}

	/**
	 * <code>INT</code> instruction<hr>
	 * <p>
	 * <code>INT imm8</code><p>
	 * <code>CD ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void int_(int imm) {
		addInstruction(Instruction.create(Code.INT_IMM8, imm));
	}

	/**
	 * <code>INT1</code> instruction<hr>
	 * <p>
	 * <code>INT1</code><p>
	 * <code>F1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void int1() {
		addInstruction(Instruction.create(Code.INT1));
	}

	/**
	 * <code>INT3</code> instruction<hr>
	 * <p>
	 * <code>INT3</code><p>
	 * <code>CC</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void int3() {
		addInstruction(Instruction.create(Code.INT3));
	}

	/**
	 * <code>INTO</code> instruction<hr>
	 * <p>
	 * <code>INTO</code><p>
	 * <code>CE</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void into() {
		addInstruction(Instruction.create(Code.INTO));
	}

	/**
	 * <code>INVD</code> instruction<hr>
	 * <p>
	 * <code>INVD</code><p>
	 * <code>0F 08</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void invd() {
		addInstruction(Instruction.create(Code.INVD));
	}

	/**
	 * <code>INVEPT</code> instruction<hr>
	 * <p>
	 * <code>INVEPT r32, m128</code><p>
	 * <code>66 0F 38 80 /r</code><p>
	 * <code>VMX and IA32_VMX_EPT_VPID_CAP[bit 20]</code><p>
	 * <code>16/32-bit</code>
	 */
	public void invept(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.INVEPT_R32_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>INVEPT</code> instruction<hr>
	 * <p>
	 * <code>INVEPT r64, m128</code><p>
	 * <code>66 0F 38 80 /r</code><p>
	 * <code>VMX and IA32_VMX_EPT_VPID_CAP[bit 20]</code><p>
	 * <code>64-bit</code>
	 */
	public void invept(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.INVEPT_R64_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>INVLPG</code> instruction<hr>
	 * <p>
	 * <code>INVLPG m</code><p>
	 * <code>0F 01 /7</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void invlpg(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.INVLPG_M, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>INVLPGA</code> instruction<hr>
	 * <p>
	 * <code>INVLPGA</code><p>
	 * <code>a64 0F 01 DF</code><p>
	 * <code>SVM</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>INVLPGA</code><p>
	 * <code>a32 0F 01 DF</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>INVLPGA</code><p>
	 * <code>a16 0F 01 DF</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32-bit</code>
	 */
	public void invlpga() {
		int code;
		if (getBitness() == 64) {
			code = Code.INVLPGAQ;
		} else code = getBitness() >= 32 ? Code.INVLPGAD : Code.INVLPGAW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>INVLPGB</code> instruction<hr>
	 * <p>
	 * <code>INVLPGB</code><p>
	 * <code>a64 NP 0F 01 FE</code><p>
	 * <code>INVLPGB</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>INVLPGB</code><p>
	 * <code>a32 NP 0F 01 FE</code><p>
	 * <code>INVLPGB</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>INVLPGB</code><p>
	 * <code>a16 NP 0F 01 FE</code><p>
	 * <code>INVLPGB</code><p>
	 * <code>16/32-bit</code>
	 */
	public void invlpgb() {
		int code;
		if (getBitness() == 64) {
			code = Code.INVLPGBQ;
		} else code = getBitness() >= 32 ? Code.INVLPGBD : Code.INVLPGBW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>INVPCID</code> instruction<hr>
	 * <p>
	 * <code>INVPCID r32, m128</code><p>
	 * <code>66 0F 38 82 /r</code><p>
	 * <code>INVPCID</code><p>
	 * <code>16/32-bit</code>
	 */
	public void invpcid(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.INVPCID_R32_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>INVPCID</code> instruction<hr>
	 * <p>
	 * <code>INVPCID r64, m128</code><p>
	 * <code>66 0F 38 82 /r</code><p>
	 * <code>INVPCID</code><p>
	 * <code>64-bit</code>
	 */
	public void invpcid(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.INVPCID_R64_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>INVVPID</code> instruction<hr>
	 * <p>
	 * <code>INVVPID r32, m128</code><p>
	 * <code>66 0F 38 81 /r</code><p>
	 * <code>VMX and IA32_VMX_EPT_VPID_CAP[bit 32]</code><p>
	 * <code>16/32-bit</code>
	 */
	public void invvpid(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.INVVPID_R32_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>INVVPID</code> instruction<hr>
	 * <p>
	 * <code>INVVPID r64, m128</code><p>
	 * <code>66 0F 38 81 /r</code><p>
	 * <code>VMX and IA32_VMX_EPT_VPID_CAP[bit 32]</code><p>
	 * <code>64-bit</code>
	 */
	public void invvpid(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.INVVPID_R64_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>IRET</code> instruction<hr>
	 * <p>
	 * <code>IRET</code><p>
	 * <code>o16 CF</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void iret() {
		addInstruction(Instruction.create(Code.IRETW));
	}

	/**
	 * <code>IRETD</code> instruction<hr>
	 * <p>
	 * <code>IRETD</code><p>
	 * <code>o32 CF</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void iretd() {
		addInstruction(Instruction.create(Code.IRETD));
	}

	/**
	 * <code>IRETQ</code> instruction<hr>
	 * <p>
	 * <code>IRETQ</code><p>
	 * <code>o64 CF</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void iretq() {
		addInstruction(Instruction.create(Code.IRETQ));
	}

	/**
	 * <code>JA</code> instruction<hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o64 77 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o64 0F 87 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o32 77 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o32 0F 87 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o16 77 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JA rel16</code><p>
	 * <code>o16 0F 87 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ja(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JA_REL8_64;
			} else code = getBitness() >= 32 ? Code.JA_REL8_32 : Code.JA_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JA_REL32_64;
		} else code = getBitness() >= 32 ? Code.JA_REL32_32 : Code.JA_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JA</code> instruction<hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o64 77 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o64 0F 87 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o32 77 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o32 0F 87 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o16 77 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JA rel16</code><p>
	 * <code>o16 0F 87 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ja(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JA_REL8_64;
			} else code = getBitness() >= 32 ? Code.JA_REL8_32 : Code.JA_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JA_REL32_64;
		} else code = getBitness() >= 32 ? Code.JA_REL32_32 : Code.JA_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JAE</code> instruction<hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o64 73 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o64 0F 83 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o32 73 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o32 0F 83 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o16 73 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JAE rel16</code><p>
	 * <code>o16 0F 83 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jae(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JAE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JAE_REL8_32 : Code.JAE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JAE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JAE_REL32_32 : Code.JAE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JAE</code> instruction<hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o64 73 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o64 0F 83 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o32 73 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o32 0F 83 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o16 73 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JAE rel16</code><p>
	 * <code>o16 0F 83 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jae(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JAE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JAE_REL8_32 : Code.JAE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JAE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JAE_REL32_32 : Code.JAE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JB</code> instruction<hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o64 72 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o64 0F 82 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o32 72 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o32 0F 82 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o16 72 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JB rel16</code><p>
	 * <code>o16 0F 82 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jb(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JB_REL8_64;
			} else code = getBitness() >= 32 ? Code.JB_REL8_32 : Code.JB_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JB_REL32_64;
		} else code = getBitness() >= 32 ? Code.JB_REL32_32 : Code.JB_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JB</code> instruction<hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o64 72 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o64 0F 82 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o32 72 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o32 0F 82 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o16 72 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JB rel16</code><p>
	 * <code>o16 0F 82 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jb(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JB_REL8_64;
			} else code = getBitness() >= 32 ? Code.JB_REL8_32 : Code.JB_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JB_REL32_64;
		} else code = getBitness() >= 32 ? Code.JB_REL32_32 : Code.JB_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JBE</code> instruction<hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o64 76 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o64 0F 86 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o32 76 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o32 0F 86 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o16 76 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JBE rel16</code><p>
	 * <code>o16 0F 86 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jbe(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JBE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JBE_REL8_32 : Code.JBE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JBE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JBE_REL32_32 : Code.JBE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JBE</code> instruction<hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o64 76 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o64 0F 86 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o32 76 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o32 0F 86 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o16 76 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JBE rel16</code><p>
	 * <code>o16 0F 86 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jbe(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JBE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JBE_REL8_32 : Code.JBE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JBE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JBE_REL32_32 : Code.JBE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JC</code> instruction<hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o64 72 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o64 0F 82 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o32 72 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o32 0F 82 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o16 72 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JB rel16</code><p>
	 * <code>o16 0F 82 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jc(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JB_REL8_64;
			} else code = getBitness() >= 32 ? Code.JB_REL8_32 : Code.JB_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JB_REL32_64;
		} else code = getBitness() >= 32 ? Code.JB_REL32_32 : Code.JB_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JC</code> instruction<hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o64 72 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o64 0F 82 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o32 72 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o32 0F 82 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o16 72 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JB rel16</code><p>
	 * <code>o16 0F 82 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jc(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JB_REL8_64;
			} else code = getBitness() >= 32 ? Code.JB_REL8_32 : Code.JB_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JB_REL32_64;
		} else code = getBitness() >= 32 ? Code.JB_REL32_32 : Code.JB_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JCXZ</code> instruction<hr>
	 * <p>
	 * <code>JCXZ rel8</code><p>
	 * <code>a16 o16 E3 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jcxz(CodeLabel dst) {
		addInstruction(Instruction.createBranch(Code.JCXZ_REL8_16, dst.id));
	}

	/**
	 * <code>JCXZ</code> instruction<hr>
	 * <p>
	 * <code>JCXZ rel8</code><p>
	 * <code>a16 o16 E3 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jcxz(long dst) {
		addInstruction(Instruction.createBranch(Code.JCXZ_REL8_16, dst));
	}

	/**
	 * <code>JE</code> instruction<hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o64 74 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o64 0F 84 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o32 74 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o32 0F 84 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o16 74 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JE rel16</code><p>
	 * <code>o16 0F 84 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void je(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JE_REL8_32 : Code.JE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JE_REL32_32 : Code.JE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JE</code> instruction<hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o64 74 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o64 0F 84 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o32 74 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o32 0F 84 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o16 74 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JE rel16</code><p>
	 * <code>o16 0F 84 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void je(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JE_REL8_32 : Code.JE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JE_REL32_32 : Code.JE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JECXZ</code> instruction<hr>
	 * <p>
	 * <code>JECXZ rel8</code><p>
	 * <code>a32 o32 E3 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jecxz(CodeLabel dst) {
		addInstruction(Instruction.createBranch(Code.JECXZ_REL8_32, dst.id));
	}

	/**
	 * <code>JECXZ</code> instruction<hr>
	 * <p>
	 * <code>JECXZ rel8</code><p>
	 * <code>a32 o32 E3 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jecxz(long dst) {
		addInstruction(Instruction.createBranch(Code.JECXZ_REL8_32, dst));
	}

	/**
	 * <code>JG</code> instruction<hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o64 7F cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o64 0F 8F cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o32 7F cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o32 0F 8F cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o16 7F cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JG rel16</code><p>
	 * <code>o16 0F 8F cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jg(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JG_REL8_64;
			} else code = getBitness() >= 32 ? Code.JG_REL8_32 : Code.JG_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JG_REL32_64;
		} else code = getBitness() >= 32 ? Code.JG_REL32_32 : Code.JG_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JG</code> instruction<hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o64 7F cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o64 0F 8F cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o32 7F cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o32 0F 8F cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o16 7F cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JG rel16</code><p>
	 * <code>o16 0F 8F cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jg(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JG_REL8_64;
			} else code = getBitness() >= 32 ? Code.JG_REL8_32 : Code.JG_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JG_REL32_64;
		} else code = getBitness() >= 32 ? Code.JG_REL32_32 : Code.JG_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JGE</code> instruction<hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o64 7D cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o64 0F 8D cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o32 7D cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o32 0F 8D cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o16 7D cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JGE rel16</code><p>
	 * <code>o16 0F 8D cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jge(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JGE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JGE_REL8_32 : Code.JGE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JGE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JGE_REL32_32 : Code.JGE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JGE</code> instruction<hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o64 7D cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o64 0F 8D cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o32 7D cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o32 0F 8D cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o16 7D cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JGE rel16</code><p>
	 * <code>o16 0F 8D cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jge(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JGE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JGE_REL8_32 : Code.JGE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JGE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JGE_REL32_32 : Code.JGE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JL</code> instruction<hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o64 7C cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o64 0F 8C cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o32 7C cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o32 0F 8C cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o16 7C cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JL rel16</code><p>
	 * <code>o16 0F 8C cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jl(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JL_REL8_64;
			} else code = getBitness() >= 32 ? Code.JL_REL8_32 : Code.JL_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JL_REL32_64;
		} else code = getBitness() >= 32 ? Code.JL_REL32_32 : Code.JL_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JL</code> instruction<hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o64 7C cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o64 0F 8C cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o32 7C cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o32 0F 8C cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o16 7C cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JL rel16</code><p>
	 * <code>o16 0F 8C cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jl(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JL_REL8_64;
			} else code = getBitness() >= 32 ? Code.JL_REL8_32 : Code.JL_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JL_REL32_64;
		} else code = getBitness() >= 32 ? Code.JL_REL32_32 : Code.JL_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JLE</code> instruction<hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o64 7E cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o64 0F 8E cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o32 7E cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o32 0F 8E cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o16 7E cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JLE rel16</code><p>
	 * <code>o16 0F 8E cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jle(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JLE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JLE_REL8_32 : Code.JLE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JLE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JLE_REL32_32 : Code.JLE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JLE</code> instruction<hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o64 7E cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o64 0F 8E cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o32 7E cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o32 0F 8E cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o16 7E cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JLE rel16</code><p>
	 * <code>o16 0F 8E cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jle(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JLE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JLE_REL8_32 : Code.JLE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JLE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JLE_REL32_32 : Code.JLE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JMP</code> instruction<hr>
	 * <p>
	 * <code>JMP r/m16</code><p>
	 * <code>o16 FF /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jmp(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.JMP_RM16, dst.get()));
	}

	/**
	 * <code>JMP</code> instruction<hr>
	 * <p>
	 * <code>JMP r/m32</code><p>
	 * <code>o32 FF /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jmp(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.JMP_RM32, dst.get()));
	}

	/**
	 * <code>JMP</code> instruction<hr>
	 * <p>
	 * <code>JMP r/m64</code><p>
	 * <code>o64 FF /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void jmp(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.JMP_RM64, dst.get()));
	}

	/**
	 * <code>JMP</code> instruction<hr>
	 * <p>
	 * <code>JMP m16:64</code><p>
	 * <code>o64 FF /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JMP r/m64</code><p>
	 * <code>o64 FF /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JMP m16:32</code><p>
	 * <code>o32 FF /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JMP r/m32</code><p>
	 * <code>o32 FF /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMP m16:16</code><p>
	 * <code>o16 FF /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JMP r/m16</code><p>
	 * <code>o16 FF /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jmp(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.TBYTE) {
			code = Code.JMP_M1664;
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.JMP_RM64;
		} else if (dst.size == MemoryOperandSize.FWORD) {
			code = Code.JMP_M1632;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = getBitness() >= 32 ? Code.JMP_RM32 : Code.JMP_M1616;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.JMP_RM16;
		} else {
			throw noOpCodeFoundFor(Mnemonic.JMP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>JMP</code> instruction<hr>
	 * <p>
	 * <code>JMP rel32</code><p>
	 * <code>o64 E9 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JMP rel8</code><p>
	 * <code>o64 EB cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JMP rel32</code><p>
	 * <code>o32 E9 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMP rel8</code><p>
	 * <code>o32 EB cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMP rel16</code><p>
	 * <code>o16 E9 cw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JMP rel8</code><p>
	 * <code>o16 EB cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jmp(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JMP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JMP_REL8_32 : Code.JMP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JMP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JMP_REL32_32 : Code.JMP_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JMP</code> instruction<hr>
	 * <p>
	 * <code>JMP rel32</code><p>
	 * <code>o64 E9 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JMP rel8</code><p>
	 * <code>o64 EB cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JMP rel32</code><p>
	 * <code>o32 E9 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMP rel8</code><p>
	 * <code>o32 EB cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMP rel16</code><p>
	 * <code>o16 E9 cw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JMP rel8</code><p>
	 * <code>o16 EB cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jmp(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JMP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JMP_REL8_32 : Code.JMP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JMP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JMP_REL32_32 : Code.JMP_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JMPE</code> instruction<hr>
	 * <p>
	 * <code>JMPE r/m16</code><p>
	 * <code>o16 0F 00 /6</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jmpe(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.JMPE_RM16, dst.get()));
	}

	/**
	 * <code>JMPE</code> instruction<hr>
	 * <p>
	 * <code>JMPE r/m32</code><p>
	 * <code>o32 0F 00 /6</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jmpe(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.JMPE_RM32, dst.get()));
	}

	/**
	 * <code>JMPE</code> instruction<hr>
	 * <p>
	 * <code>JMPE r/m32</code><p>
	 * <code>o32 0F 00 /6</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMPE r/m16</code><p>
	 * <code>o16 0F 00 /6</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jmpe(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.JMPE_RM32 : Code.JMPE_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>JMPE</code> instruction<hr>
	 * <p>
	 * <code>JMPE disp32</code><p>
	 * <code>o32 0F B8 cd</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMPE disp16</code><p>
	 * <code>o16 0F B8 cw</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jmpe(CodeLabel dst) {
		int code;
		code = getBitness() >= 32 ? Code.JMPE_DISP32 : Code.JMPE_DISP16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JMPE</code> instruction<hr>
	 * <p>
	 * <code>JMPE disp32</code><p>
	 * <code>o32 0F B8 cd</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JMPE disp16</code><p>
	 * <code>o16 0F B8 cw</code><p>
	 * <code>IA-64</code><p>
	 * <code>16/32-bit</code>
	 */
	public void jmpe(long dst) {
		int code;
		code = getBitness() >= 32 ? Code.JMPE_DISP32 : Code.JMPE_DISP16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNA</code> instruction<hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o64 76 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o64 0F 86 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o32 76 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o32 0F 86 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o16 76 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JBE rel16</code><p>
	 * <code>o16 0F 86 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jna(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JBE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JBE_REL8_32 : Code.JBE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JBE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JBE_REL32_32 : Code.JBE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNA</code> instruction<hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o64 76 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o64 0F 86 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o32 76 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel32</code><p>
	 * <code>o32 0F 86 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JBE rel8</code><p>
	 * <code>o16 76 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JBE rel16</code><p>
	 * <code>o16 0F 86 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jna(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JBE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JBE_REL8_32 : Code.JBE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JBE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JBE_REL32_32 : Code.JBE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNAE</code> instruction<hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o64 72 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o64 0F 82 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o32 72 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o32 0F 82 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o16 72 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JB rel16</code><p>
	 * <code>o16 0F 82 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnae(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JB_REL8_64;
			} else code = getBitness() >= 32 ? Code.JB_REL8_32 : Code.JB_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JB_REL32_64;
		} else code = getBitness() >= 32 ? Code.JB_REL32_32 : Code.JB_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNAE</code> instruction<hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o64 72 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o64 0F 82 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o32 72 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel32</code><p>
	 * <code>o32 0F 82 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JB rel8</code><p>
	 * <code>o16 72 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JB rel16</code><p>
	 * <code>o16 0F 82 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnae(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JB_REL8_64;
			} else code = getBitness() >= 32 ? Code.JB_REL8_32 : Code.JB_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JB_REL32_64;
		} else code = getBitness() >= 32 ? Code.JB_REL32_32 : Code.JB_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNB</code> instruction<hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o64 73 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o64 0F 83 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o32 73 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o32 0F 83 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o16 73 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JAE rel16</code><p>
	 * <code>o16 0F 83 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnb(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JAE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JAE_REL8_32 : Code.JAE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JAE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JAE_REL32_32 : Code.JAE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNB</code> instruction<hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o64 73 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o64 0F 83 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o32 73 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o32 0F 83 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o16 73 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JAE rel16</code><p>
	 * <code>o16 0F 83 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnb(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JAE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JAE_REL8_32 : Code.JAE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JAE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JAE_REL32_32 : Code.JAE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNBE</code> instruction<hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o64 77 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o64 0F 87 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o32 77 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o32 0F 87 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o16 77 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JA rel16</code><p>
	 * <code>o16 0F 87 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnbe(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JA_REL8_64;
			} else code = getBitness() >= 32 ? Code.JA_REL8_32 : Code.JA_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JA_REL32_64;
		} else code = getBitness() >= 32 ? Code.JA_REL32_32 : Code.JA_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNBE</code> instruction<hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o64 77 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o64 0F 87 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o32 77 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel32</code><p>
	 * <code>o32 0F 87 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JA rel8</code><p>
	 * <code>o16 77 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JA rel16</code><p>
	 * <code>o16 0F 87 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnbe(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JA_REL8_64;
			} else code = getBitness() >= 32 ? Code.JA_REL8_32 : Code.JA_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JA_REL32_64;
		} else code = getBitness() >= 32 ? Code.JA_REL32_32 : Code.JA_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNC</code> instruction<hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o64 73 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o64 0F 83 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o32 73 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o32 0F 83 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o16 73 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JAE rel16</code><p>
	 * <code>o16 0F 83 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnc(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JAE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JAE_REL8_32 : Code.JAE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JAE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JAE_REL32_32 : Code.JAE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNC</code> instruction<hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o64 73 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o64 0F 83 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o32 73 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel32</code><p>
	 * <code>o32 0F 83 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JAE rel8</code><p>
	 * <code>o16 73 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JAE rel16</code><p>
	 * <code>o16 0F 83 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnc(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JAE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JAE_REL8_32 : Code.JAE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JAE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JAE_REL32_32 : Code.JAE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNE</code> instruction<hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o64 75 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o64 0F 85 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o32 75 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o32 0F 85 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o16 75 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNE rel16</code><p>
	 * <code>o16 0F 85 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jne(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNE_REL8_32 : Code.JNE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNE_REL32_32 : Code.JNE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNE</code> instruction<hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o64 75 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o64 0F 85 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o32 75 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o32 0F 85 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o16 75 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNE rel16</code><p>
	 * <code>o16 0F 85 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jne(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNE_REL8_32 : Code.JNE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNE_REL32_32 : Code.JNE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNG</code> instruction<hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o64 7E cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o64 0F 8E cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o32 7E cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o32 0F 8E cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o16 7E cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JLE rel16</code><p>
	 * <code>o16 0F 8E cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jng(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JLE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JLE_REL8_32 : Code.JLE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JLE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JLE_REL32_32 : Code.JLE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNG</code> instruction<hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o64 7E cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o64 0F 8E cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o32 7E cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel32</code><p>
	 * <code>o32 0F 8E cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JLE rel8</code><p>
	 * <code>o16 7E cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JLE rel16</code><p>
	 * <code>o16 0F 8E cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jng(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JLE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JLE_REL8_32 : Code.JLE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JLE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JLE_REL32_32 : Code.JLE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNGE</code> instruction<hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o64 7C cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o64 0F 8C cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o32 7C cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o32 0F 8C cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o16 7C cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JL rel16</code><p>
	 * <code>o16 0F 8C cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnge(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JL_REL8_64;
			} else code = getBitness() >= 32 ? Code.JL_REL8_32 : Code.JL_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JL_REL32_64;
		} else code = getBitness() >= 32 ? Code.JL_REL32_32 : Code.JL_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNGE</code> instruction<hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o64 7C cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o64 0F 8C cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o32 7C cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel32</code><p>
	 * <code>o32 0F 8C cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JL rel8</code><p>
	 * <code>o16 7C cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JL rel16</code><p>
	 * <code>o16 0F 8C cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnge(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JL_REL8_64;
			} else code = getBitness() >= 32 ? Code.JL_REL8_32 : Code.JL_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JL_REL32_64;
		} else code = getBitness() >= 32 ? Code.JL_REL32_32 : Code.JL_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNL</code> instruction<hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o64 7D cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o64 0F 8D cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o32 7D cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o32 0F 8D cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o16 7D cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JGE rel16</code><p>
	 * <code>o16 0F 8D cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnl(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JGE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JGE_REL8_32 : Code.JGE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JGE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JGE_REL32_32 : Code.JGE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNL</code> instruction<hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o64 7D cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o64 0F 8D cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o32 7D cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel32</code><p>
	 * <code>o32 0F 8D cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JGE rel8</code><p>
	 * <code>o16 7D cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JGE rel16</code><p>
	 * <code>o16 0F 8D cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnl(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JGE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JGE_REL8_32 : Code.JGE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JGE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JGE_REL32_32 : Code.JGE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNLE</code> instruction<hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o64 7F cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o64 0F 8F cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o32 7F cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o32 0F 8F cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o16 7F cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JG rel16</code><p>
	 * <code>o16 0F 8F cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnle(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JG_REL8_64;
			} else code = getBitness() >= 32 ? Code.JG_REL8_32 : Code.JG_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JG_REL32_64;
		} else code = getBitness() >= 32 ? Code.JG_REL32_32 : Code.JG_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNLE</code> instruction<hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o64 7F cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o64 0F 8F cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o32 7F cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel32</code><p>
	 * <code>o32 0F 8F cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JG rel8</code><p>
	 * <code>o16 7F cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JG rel16</code><p>
	 * <code>o16 0F 8F cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnle(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JG_REL8_64;
			} else code = getBitness() >= 32 ? Code.JG_REL8_32 : Code.JG_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JG_REL32_64;
		} else code = getBitness() >= 32 ? Code.JG_REL32_32 : Code.JG_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNO</code> instruction<hr>
	 * <p>
	 * <code>JNO rel8</code><p>
	 * <code>o64 71 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNO rel32</code><p>
	 * <code>o64 0F 81 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNO rel8</code><p>
	 * <code>o32 71 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNO rel32</code><p>
	 * <code>o32 0F 81 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNO rel8</code><p>
	 * <code>o16 71 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNO rel16</code><p>
	 * <code>o16 0F 81 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jno(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNO_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNO_REL8_32 : Code.JNO_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNO_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNO_REL32_32 : Code.JNO_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNO</code> instruction<hr>
	 * <p>
	 * <code>JNO rel8</code><p>
	 * <code>o64 71 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNO rel32</code><p>
	 * <code>o64 0F 81 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNO rel8</code><p>
	 * <code>o32 71 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNO rel32</code><p>
	 * <code>o32 0F 81 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNO rel8</code><p>
	 * <code>o16 71 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNO rel16</code><p>
	 * <code>o16 0F 81 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jno(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNO_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNO_REL8_32 : Code.JNO_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNO_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNO_REL32_32 : Code.JNO_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNP</code> instruction<hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o64 7B cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o64 0F 8B cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o32 7B cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o32 0F 8B cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o16 7B cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNP rel16</code><p>
	 * <code>o16 0F 8B cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnp(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNP_REL8_32 : Code.JNP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNP_REL32_32 : Code.JNP_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNP</code> instruction<hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o64 7B cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o64 0F 8B cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o32 7B cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o32 0F 8B cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o16 7B cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNP rel16</code><p>
	 * <code>o16 0F 8B cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnp(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNP_REL8_32 : Code.JNP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNP_REL32_32 : Code.JNP_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNS</code> instruction<hr>
	 * <p>
	 * <code>JNS rel8</code><p>
	 * <code>o64 79 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNS rel32</code><p>
	 * <code>o64 0F 89 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNS rel8</code><p>
	 * <code>o32 79 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNS rel32</code><p>
	 * <code>o32 0F 89 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNS rel8</code><p>
	 * <code>o16 79 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNS rel16</code><p>
	 * <code>o16 0F 89 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jns(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNS_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNS_REL8_32 : Code.JNS_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNS_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNS_REL32_32 : Code.JNS_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNS</code> instruction<hr>
	 * <p>
	 * <code>JNS rel8</code><p>
	 * <code>o64 79 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNS rel32</code><p>
	 * <code>o64 0F 89 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNS rel8</code><p>
	 * <code>o32 79 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNS rel32</code><p>
	 * <code>o32 0F 89 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNS rel8</code><p>
	 * <code>o16 79 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNS rel16</code><p>
	 * <code>o16 0F 89 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jns(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNS_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNS_REL8_32 : Code.JNS_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNS_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNS_REL32_32 : Code.JNS_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JNZ</code> instruction<hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o64 75 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o64 0F 85 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o32 75 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o32 0F 85 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o16 75 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNE rel16</code><p>
	 * <code>o16 0F 85 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnz(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNE_REL8_32 : Code.JNE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNE_REL32_32 : Code.JNE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JNZ</code> instruction<hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o64 75 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o64 0F 85 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o32 75 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel32</code><p>
	 * <code>o32 0F 85 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNE rel8</code><p>
	 * <code>o16 75 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNE rel16</code><p>
	 * <code>o16 0F 85 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jnz(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNE_REL8_32 : Code.JNE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNE_REL32_32 : Code.JNE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JO</code> instruction<hr>
	 * <p>
	 * <code>JO rel8</code><p>
	 * <code>o64 70 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JO rel32</code><p>
	 * <code>o64 0F 80 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JO rel8</code><p>
	 * <code>o32 70 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JO rel32</code><p>
	 * <code>o32 0F 80 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JO rel8</code><p>
	 * <code>o16 70 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JO rel16</code><p>
	 * <code>o16 0F 80 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jo(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JO_REL8_64;
			} else code = getBitness() >= 32 ? Code.JO_REL8_32 : Code.JO_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JO_REL32_64;
		} else code = getBitness() >= 32 ? Code.JO_REL32_32 : Code.JO_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JO</code> instruction<hr>
	 * <p>
	 * <code>JO rel8</code><p>
	 * <code>o64 70 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JO rel32</code><p>
	 * <code>o64 0F 80 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JO rel8</code><p>
	 * <code>o32 70 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JO rel32</code><p>
	 * <code>o32 0F 80 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JO rel8</code><p>
	 * <code>o16 70 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JO rel16</code><p>
	 * <code>o16 0F 80 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jo(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JO_REL8_64;
			} else code = getBitness() >= 32 ? Code.JO_REL8_32 : Code.JO_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JO_REL32_64;
		} else code = getBitness() >= 32 ? Code.JO_REL32_32 : Code.JO_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JP</code> instruction<hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o64 7A cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o64 0F 8A cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o32 7A cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o32 0F 8A cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o16 7A cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JP rel16</code><p>
	 * <code>o16 0F 8A cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jp(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JP_REL8_32 : Code.JP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JP_REL32_32 : Code.JP_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JP</code> instruction<hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o64 7A cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o64 0F 8A cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o32 7A cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o32 0F 8A cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o16 7A cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JP rel16</code><p>
	 * <code>o16 0F 8A cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jp(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JP_REL8_32 : Code.JP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JP_REL32_32 : Code.JP_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JPE</code> instruction<hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o64 7A cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o64 0F 8A cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o32 7A cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o32 0F 8A cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o16 7A cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JP rel16</code><p>
	 * <code>o16 0F 8A cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jpe(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JP_REL8_32 : Code.JP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JP_REL32_32 : Code.JP_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JPE</code> instruction<hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o64 7A cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o64 0F 8A cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o32 7A cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel32</code><p>
	 * <code>o32 0F 8A cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JP rel8</code><p>
	 * <code>o16 7A cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JP rel16</code><p>
	 * <code>o16 0F 8A cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jpe(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JP_REL8_32 : Code.JP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JP_REL32_32 : Code.JP_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JPO</code> instruction<hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o64 7B cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o64 0F 8B cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o32 7B cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o32 0F 8B cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o16 7B cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNP rel16</code><p>
	 * <code>o16 0F 8B cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jpo(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNP_REL8_32 : Code.JNP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNP_REL32_32 : Code.JNP_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JPO</code> instruction<hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o64 7B cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o64 0F 8B cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o32 7B cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel32</code><p>
	 * <code>o32 0F 8B cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JNP rel8</code><p>
	 * <code>o16 7B cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JNP rel16</code><p>
	 * <code>o16 0F 8B cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jpo(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JNP_REL8_64;
			} else code = getBitness() >= 32 ? Code.JNP_REL8_32 : Code.JNP_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JNP_REL32_64;
		} else code = getBitness() >= 32 ? Code.JNP_REL32_32 : Code.JNP_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JRCXZ</code> instruction<hr>
	 * <p>
	 * <code>JRCXZ rel8</code><p>
	 * <code>a64 o64 E3 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void jrcxz(CodeLabel dst) {
		addInstruction(Instruction.createBranch(Code.JRCXZ_REL8_64, dst.id));
	}

	/**
	 * <code>JRCXZ</code> instruction<hr>
	 * <p>
	 * <code>JRCXZ rel8</code><p>
	 * <code>a64 o64 E3 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void jrcxz(long dst) {
		addInstruction(Instruction.createBranch(Code.JRCXZ_REL8_64, dst));
	}

	/**
	 * <code>JS</code> instruction<hr>
	 * <p>
	 * <code>JS rel8</code><p>
	 * <code>o64 78 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JS rel32</code><p>
	 * <code>o64 0F 88 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JS rel8</code><p>
	 * <code>o32 78 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JS rel32</code><p>
	 * <code>o32 0F 88 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JS rel8</code><p>
	 * <code>o16 78 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JS rel16</code><p>
	 * <code>o16 0F 88 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void js(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JS_REL8_64;
			} else code = getBitness() >= 32 ? Code.JS_REL8_32 : Code.JS_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JS_REL32_64;
		} else code = getBitness() >= 32 ? Code.JS_REL32_32 : Code.JS_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JS</code> instruction<hr>
	 * <p>
	 * <code>JS rel8</code><p>
	 * <code>o64 78 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JS rel32</code><p>
	 * <code>o64 0F 88 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JS rel8</code><p>
	 * <code>o32 78 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JS rel32</code><p>
	 * <code>o32 0F 88 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JS rel8</code><p>
	 * <code>o16 78 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JS rel16</code><p>
	 * <code>o16 0F 88 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void js(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JS_REL8_64;
			} else code = getBitness() >= 32 ? Code.JS_REL8_32 : Code.JS_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JS_REL32_64;
		} else code = getBitness() >= 32 ? Code.JS_REL32_32 : Code.JS_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>JZ</code> instruction<hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o64 74 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o64 0F 84 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o32 74 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o32 0F 84 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o16 74 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JE rel16</code><p>
	 * <code>o16 0F 84 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jz(CodeLabel dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JE_REL8_32 : Code.JE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JE_REL32_32 : Code.JE_REL16;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>JZ</code> instruction<hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o64 74 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o64 0F 84 cd</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o32 74 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel32</code><p>
	 * <code>o32 0F 84 cd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>JE rel8</code><p>
	 * <code>o16 74 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>JE rel16</code><p>
	 * <code>o16 0F 84 cw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void jz(long dst) {
		int code;
		if (getPreferShortBranch()) {
			if (getBitness() == 64) {
				code = Code.JE_REL8_64;
			} else code = getBitness() >= 32 ? Code.JE_REL8_32 : Code.JE_REL8_16;
		} else if (getBitness() == 64) {
			code = Code.JE_REL32_64;
		} else code = getBitness() >= 32 ? Code.JE_REL32_32 : Code.JE_REL16;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>KADDB</code> instruction<hr>
	 * <p>
	 * <code>KADDB k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W0 4A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kaddb(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KADDB_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KADDD</code> instruction<hr>
	 * <p>
	 * <code>KADDD k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W1 4A /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kaddd(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KADDD_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KADDQ</code> instruction<hr>
	 * <p>
	 * <code>KADDQ k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W1 4A /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kaddq(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KADDQ_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KADDW</code> instruction<hr>
	 * <p>
	 * <code>KADDW k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W0 4A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kaddw(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KADDW_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDB</code> instruction<hr>
	 * <p>
	 * <code>KANDB k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W0 41 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandb(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDB_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDD</code> instruction<hr>
	 * <p>
	 * <code>KANDD k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W1 41 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandd(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDD_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDNB</code> instruction<hr>
	 * <p>
	 * <code>KANDNB k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W0 42 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandnb(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDNB_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDND</code> instruction<hr>
	 * <p>
	 * <code>KANDND k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W1 42 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandnd(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDND_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDNQ</code> instruction<hr>
	 * <p>
	 * <code>KANDNQ k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W1 42 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandnq(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDNQ_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDNW</code> instruction<hr>
	 * <p>
	 * <code>KANDNW k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W0 42 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandnw(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDNW_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDQ</code> instruction<hr>
	 * <p>
	 * <code>KANDQ k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W1 41 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandq(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDQ_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KANDW</code> instruction<hr>
	 * <p>
	 * <code>KANDW k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W0 41 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kandw(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KANDW_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KMOVB</code> instruction<hr>
	 * <p>
	 * <code>KMOVB k1, r32</code><p>
	 * <code>VEX.L0.66.0F.W0 92 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovb(AsmRegisterK dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VEX_KMOVB_KR_R32, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVB</code> instruction<hr>
	 * <p>
	 * <code>KMOVB r32, k1</code><p>
	 * <code>VEX.L0.66.0F.W0 93 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovb(AsmRegister32 dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVB_R32_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVB</code> instruction<hr>
	 * <p>
	 * <code>KMOVB k1, k2/m8</code><p>
	 * <code>VEX.L0.66.0F.W0 90 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovb(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVB_KR_KM8, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVB</code> instruction<hr>
	 * <p>
	 * <code>KMOVB m8, k1</code><p>
	 * <code>VEX.L0.66.0F.W0 91 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovb(AsmMemoryOperand dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVB_M8_KR, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>KMOVB</code> instruction<hr>
	 * <p>
	 * <code>KMOVB k1, k2/m8</code><p>
	 * <code>VEX.L0.66.0F.W0 90 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovb(AsmRegisterK dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_KMOVB_KR_KM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>KMOVD</code> instruction<hr>
	 * <p>
	 * <code>KMOVD k1, r32</code><p>
	 * <code>VEX.L0.F2.0F.W0 92 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovd(AsmRegisterK dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VEX_KMOVD_KR_R32, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVD</code> instruction<hr>
	 * <p>
	 * <code>KMOVD r32, k1</code><p>
	 * <code>VEX.L0.F2.0F.W0 93 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovd(AsmRegister32 dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVD_R32_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVD</code> instruction<hr>
	 * <p>
	 * <code>KMOVD k1, k2/m32</code><p>
	 * <code>VEX.L0.66.0F.W1 90 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovd(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVD_KR_KM32, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVD</code> instruction<hr>
	 * <p>
	 * <code>KMOVD m32, k1</code><p>
	 * <code>VEX.L0.66.0F.W1 91 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovd(AsmMemoryOperand dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVD_M32_KR, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>KMOVD</code> instruction<hr>
	 * <p>
	 * <code>KMOVD k1, k2/m32</code><p>
	 * <code>VEX.L0.66.0F.W1 90 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovd(AsmRegisterK dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_KMOVD_KR_KM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>KMOVQ</code> instruction<hr>
	 * <p>
	 * <code>KMOVQ k1, r64</code><p>
	 * <code>VEX.L0.F2.0F.W1 92 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>64-bit</code>
	 */
	public void kmovq(AsmRegisterK dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.VEX_KMOVQ_KR_R64, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVQ</code> instruction<hr>
	 * <p>
	 * <code>KMOVQ r64, k1</code><p>
	 * <code>VEX.L0.F2.0F.W1 93 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>64-bit</code>
	 */
	public void kmovq(AsmRegister64 dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVQ_R64_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVQ</code> instruction<hr>
	 * <p>
	 * <code>KMOVQ k1, k2/m64</code><p>
	 * <code>VEX.L0.0F.W1 90 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovq(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVQ_KR_KM64, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVQ</code> instruction<hr>
	 * <p>
	 * <code>KMOVQ m64, k1</code><p>
	 * <code>VEX.L0.0F.W1 91 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovq(AsmMemoryOperand dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVQ_M64_KR, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>KMOVQ</code> instruction<hr>
	 * <p>
	 * <code>KMOVQ k1, k2/m64</code><p>
	 * <code>VEX.L0.0F.W1 90 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovq(AsmRegisterK dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_KMOVQ_KR_KM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>KMOVW</code> instruction<hr>
	 * <p>
	 * <code>KMOVW k1, r32</code><p>
	 * <code>VEX.L0.0F.W0 92 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovw(AsmRegisterK dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VEX_KMOVW_KR_R32, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVW</code> instruction<hr>
	 * <p>
	 * <code>KMOVW r32, k1</code><p>
	 * <code>VEX.L0.0F.W0 93 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovw(AsmRegister32 dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVW_R32_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVW</code> instruction<hr>
	 * <p>
	 * <code>KMOVW k1, k2/m16</code><p>
	 * <code>VEX.L0.0F.W0 90 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovw(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVW_KR_KM16, dst.get(), src.get()));
	}

	/**
	 * <code>KMOVW</code> instruction<hr>
	 * <p>
	 * <code>KMOVW m16, k1</code><p>
	 * <code>VEX.L0.0F.W0 91 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovw(AsmMemoryOperand dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KMOVW_M16_KR, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>KMOVW</code> instruction<hr>
	 * <p>
	 * <code>KMOVW k1, k2/m16</code><p>
	 * <code>VEX.L0.0F.W0 90 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kmovw(AsmRegisterK dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_KMOVW_KR_KM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>KNOTB</code> instruction<hr>
	 * <p>
	 * <code>KNOTB k1, k2</code><p>
	 * <code>VEX.L0.66.0F.W0 44 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void knotb(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KNOTB_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KNOTD</code> instruction<hr>
	 * <p>
	 * <code>KNOTD k1, k2</code><p>
	 * <code>VEX.L0.66.0F.W1 44 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void knotd(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KNOTD_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KNOTQ</code> instruction<hr>
	 * <p>
	 * <code>KNOTQ k1, k2</code><p>
	 * <code>VEX.L0.0F.W1 44 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void knotq(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KNOTQ_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KNOTW</code> instruction<hr>
	 * <p>
	 * <code>KNOTW k1, k2</code><p>
	 * <code>VEX.L0.0F.W0 44 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void knotw(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KNOTW_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KORB</code> instruction<hr>
	 * <p>
	 * <code>KORB k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W0 45 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void korb(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KORB_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KORD</code> instruction<hr>
	 * <p>
	 * <code>KORD k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W1 45 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kord(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KORD_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KORQ</code> instruction<hr>
	 * <p>
	 * <code>KORQ k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W1 45 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void korq(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KORQ_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KORTESTB</code> instruction<hr>
	 * <p>
	 * <code>KORTESTB k1, k2</code><p>
	 * <code>VEX.L0.66.0F.W0 98 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kortestb(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KORTESTB_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KORTESTD</code> instruction<hr>
	 * <p>
	 * <code>KORTESTD k1, k2</code><p>
	 * <code>VEX.L0.66.0F.W1 98 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kortestd(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KORTESTD_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KORTESTQ</code> instruction<hr>
	 * <p>
	 * <code>KORTESTQ k1, k2</code><p>
	 * <code>VEX.L0.0F.W1 98 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kortestq(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KORTESTQ_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KORTESTW</code> instruction<hr>
	 * <p>
	 * <code>KORTESTW k1, k2</code><p>
	 * <code>VEX.L0.0F.W0 98 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kortestw(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KORTESTW_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KORW</code> instruction<hr>
	 * <p>
	 * <code>KORW k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W0 45 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void korw(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KORW_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KSHIFTLB</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTLB k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W0 32 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftlb(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTLB_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KSHIFTLD</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTLD k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W0 33 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftld(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTLD_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KSHIFTLQ</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTLQ k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W1 33 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftlq(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTLQ_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KSHIFTLW</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTLW k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W1 32 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftlw(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTLW_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KSHIFTRB</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTRB k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W0 30 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftrb(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTRB_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KSHIFTRD</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTRD k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W0 31 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftrd(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTRD_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KSHIFTRQ</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTRQ k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W1 31 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftrq(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTRQ_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KSHIFTRW</code> instruction<hr>
	 * <p>
	 * <code>KSHIFTRW k1, k2, imm8</code><p>
	 * <code>VEX.L0.66.0F3A.W1 30 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kshiftrw(AsmRegisterK dst, AsmRegisterK src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_KSHIFTRW_KR_KR_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>KTESTB</code> instruction<hr>
	 * <p>
	 * <code>KTESTB k1, k2</code><p>
	 * <code>VEX.L0.66.0F.W0 99 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ktestb(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KTESTB_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KTESTD</code> instruction<hr>
	 * <p>
	 * <code>KTESTD k1, k2</code><p>
	 * <code>VEX.L0.66.0F.W1 99 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ktestd(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KTESTD_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KTESTQ</code> instruction<hr>
	 * <p>
	 * <code>KTESTQ k1, k2</code><p>
	 * <code>VEX.L0.0F.W1 99 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ktestq(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KTESTQ_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KTESTW</code> instruction<hr>
	 * <p>
	 * <code>KTESTW k1, k2</code><p>
	 * <code>VEX.L0.0F.W0 99 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ktestw(AsmRegisterK dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.VEX_KTESTW_KR_KR, dst.get(), src.get()));
	}

	/**
	 * <code>KUNPCKBW</code> instruction<hr>
	 * <p>
	 * <code>KUNPCKBW k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W0 4B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kunpckbw(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KUNPCKBW_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KUNPCKDQ</code> instruction<hr>
	 * <p>
	 * <code>KUNPCKDQ k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W1 4B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kunpckdq(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KUNPCKDQ_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KUNPCKWD</code> instruction<hr>
	 * <p>
	 * <code>KUNPCKWD k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W0 4B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kunpckwd(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KUNPCKWD_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXNORB</code> instruction<hr>
	 * <p>
	 * <code>KXNORB k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W0 46 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxnorb(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXNORB_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXNORD</code> instruction<hr>
	 * <p>
	 * <code>KXNORD k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W1 46 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxnord(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXNORD_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXNORQ</code> instruction<hr>
	 * <p>
	 * <code>KXNORQ k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W1 46 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxnorq(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXNORQ_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXNORW</code> instruction<hr>
	 * <p>
	 * <code>KXNORW k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W0 46 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxnorw(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXNORW_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXORB</code> instruction<hr>
	 * <p>
	 * <code>KXORB k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W0 47 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxorb(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXORB_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXORD</code> instruction<hr>
	 * <p>
	 * <code>KXORD k1, k2, k3</code><p>
	 * <code>VEX.L1.66.0F.W1 47 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxord(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXORD_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXORQ</code> instruction<hr>
	 * <p>
	 * <code>KXORQ k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W1 47 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxorq(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXORQ_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>KXORW</code> instruction<hr>
	 * <p>
	 * <code>KXORW k1, k2, k3</code><p>
	 * <code>VEX.L1.0F.W0 47 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void kxorw(AsmRegisterK dst, AsmRegisterK src1, AsmRegisterK src2) {
		addInstruction(Instruction.create(Code.VEX_KXORW_KR_KR_KR, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>LAHF</code> instruction<hr>
	 * <p>
	 * <code>LAHF</code><p>
	 * <code>9F</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lahf() {
		addInstruction(Instruction.create(Code.LAHF));
	}

	/**
	 * <code>LAR</code> instruction<hr>
	 * <p>
	 * <code>LAR r16, r/m16</code><p>
	 * <code>o16 0F 02 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lar(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.LAR_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>LAR</code> instruction<hr>
	 * <p>
	 * <code>LAR r32, r32/m16</code><p>
	 * <code>o32 0F 02 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lar(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.LAR_R32_R32M16, dst.get(), src.get()));
	}

	/**
	 * <code>LAR</code> instruction<hr>
	 * <p>
	 * <code>LAR r64, r64/m16</code><p>
	 * <code>o64 0F 02 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lar(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.LAR_R64_R64M16, dst.get(), src.get()));
	}

	/**
	 * <code>LAR</code> instruction<hr>
	 * <p>
	 * <code>LAR r16, r/m16</code><p>
	 * <code>o16 0F 02 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lar(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LAR_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LAR</code> instruction<hr>
	 * <p>
	 * <code>LAR r32, r32/m16</code><p>
	 * <code>o32 0F 02 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lar(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LAR_R32_R32M16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LDDQU</code> instruction<hr>
	 * <p>
	 * <code>LDDQU xmm1, m128</code><p>
	 * <code>F2 0F F0 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lddqu(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LDDQU_XMM_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LDMXCSR</code> instruction<hr>
	 * <p>
	 * <code>LDMXCSR m32</code><p>
	 * <code>NP 0F AE /2</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ldmxcsr(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.LDMXCSR_M32, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LDS</code> instruction<hr>
	 * <p>
	 * <code>LDS r16, m16:16</code><p>
	 * <code>o16 C5 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void lds(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LDS_R16_M1616, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LDS</code> instruction<hr>
	 * <p>
	 * <code>LDS r32, m16:32</code><p>
	 * <code>o32 C5 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void lds(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LDS_R32_M1632, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LDTILECFG</code> instruction<hr>
	 * <p>
	 * <code>LDTILECFG m512</code><p>
	 * <code>VEX.128.0F38.W0 49 !(11):000:bbb</code><p>
	 * <code>AMX-TILE</code><p>
	 * <code>64-bit</code>
	 */
	public void ldtilecfg(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VEX_LDTILECFG_M512, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LEA</code> instruction<hr>
	 * <p>
	 * <code>LEA r16, m</code><p>
	 * <code>o16 8D /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lea(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LEA_R16_M, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LEA</code> instruction<hr>
	 * <p>
	 * <code>LEA r32, m</code><p>
	 * <code>o32 8D /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lea(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LEA_R32_M, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LEA</code> instruction<hr>
	 * <p>
	 * <code>LEA r64, m</code><p>
	 * <code>o64 8D /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lea(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LEA_R64_M, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LEAVE</code> instruction<hr>
	 * <p>
	 * <code>LEAVE</code><p>
	 * <code>o64 C9</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LEAVE</code><p>
	 * <code>o32 C9</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LEAVE</code><p>
	 * <code>o16 C9</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void leave() {
		int code;
		if (getBitness() == 64) {
			code = Code.LEAVEQ;
		} else code = getBitness() >= 32 ? Code.LEAVED : Code.LEAVEW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>LES</code> instruction<hr>
	 * <p>
	 * <code>LES r16, m16:16</code><p>
	 * <code>o16 C4 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void les(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LES_R16_M1616, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LES</code> instruction<hr>
	 * <p>
	 * <code>LES r32, m16:32</code><p>
	 * <code>o32 C4 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void les(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LES_R32_M1632, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LFENCE</code> instruction<hr>
	 * <p>
	 * <code>LFENCE</code><p>
	 * <code>NP 0F AE E8</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lfence() {
		addInstruction(Instruction.create(Code.LFENCE));
	}

	/**
	 * <code>LFS</code> instruction<hr>
	 * <p>
	 * <code>LFS r16, m16:16</code><p>
	 * <code>o16 0F B4 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lfs(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LFS_R16_M1616, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LFS</code> instruction<hr>
	 * <p>
	 * <code>LFS r32, m16:32</code><p>
	 * <code>o32 0F B4 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lfs(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LFS_R32_M1632, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LFS</code> instruction<hr>
	 * <p>
	 * <code>LFS r64, m16:64</code><p>
	 * <code>o64 0F B4 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lfs(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LFS_R64_M1664, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LGDT</code> instruction<hr>
	 * <p>
	 * <code>LGDT m16&amp;64</code><p>
	 * <code>0F 01 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LGDT m16&amp;32</code><p>
	 * <code>o32 0F 01 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LGDT m16&amp;32</code><p>
	 * <code>o16 0F 01 /2</code><p>
	 * <code>286+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void lgdt(AsmMemoryOperand dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LGDT_M1664;
		} else code = getBitness() >= 32 ? Code.LGDT_M1632 : Code.LGDT_M1632_16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LGS</code> instruction<hr>
	 * <p>
	 * <code>LGS r16, m16:16</code><p>
	 * <code>o16 0F B5 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lgs(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LGS_R16_M1616, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LGS</code> instruction<hr>
	 * <p>
	 * <code>LGS r32, m16:32</code><p>
	 * <code>o32 0F B5 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lgs(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LGS_R32_M1632, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LGS</code> instruction<hr>
	 * <p>
	 * <code>LGS r64, m16:64</code><p>
	 * <code>o64 0F B5 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lgs(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LGS_R64_M1664, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LIDT</code> instruction<hr>
	 * <p>
	 * <code>LIDT m16&amp;64</code><p>
	 * <code>0F 01 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LIDT m16&amp;32</code><p>
	 * <code>o32 0F 01 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LIDT m16&amp;32</code><p>
	 * <code>o16 0F 01 /3</code><p>
	 * <code>286+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void lidt(AsmMemoryOperand dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LIDT_M1664;
		} else code = getBitness() >= 32 ? Code.LIDT_M1632 : Code.LIDT_M1632_16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LKGS</code> instruction<hr>
	 * <p>
	 * <code>LKGS r/m16</code><p>
	 * <code>o16 F2 0F 00 /6</code><p>
	 * <code>LKGS</code><p>
	 * <code>64-bit</code>
	 */
	public void lkgs(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.LKGS_RM16, dst.get()));
	}

	/**
	 * <code>LKGS</code> instruction<hr>
	 * <p>
	 * <code>LKGS r32/m16</code><p>
	 * <code>o32 F2 0F 00 /6</code><p>
	 * <code>LKGS</code><p>
	 * <code>64-bit</code>
	 */
	public void lkgs(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.LKGS_R32M16, dst.get()));
	}

	/**
	 * <code>LKGS</code> instruction<hr>
	 * <p>
	 * <code>LKGS r64/m16</code><p>
	 * <code>F2 o64 0F 00 /6</code><p>
	 * <code>LKGS</code><p>
	 * <code>64-bit</code>
	 */
	public void lkgs(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.LKGS_R64M16, dst.get()));
	}

	/**
	 * <code>LKGS</code> instruction<hr>
	 * <p>
	 * <code>LKGS r32/m16</code><p>
	 * <code>o32 F2 0F 00 /6</code><p>
	 * <code>LKGS</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LKGS r/m16</code><p>
	 * <code>o16 F2 0F 00 /6</code><p>
	 * <code>LKGS</code><p>
	 * <code>64-bit</code>
	 */
	public void lkgs(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.LKGS_R32M16 : Code.LKGS_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LLDT</code> instruction<hr>
	 * <p>
	 * <code>LLDT r/m16</code><p>
	 * <code>o16 0F 00 /2</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lldt(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.LLDT_RM16, dst.get()));
	}

	/**
	 * <code>LLDT</code> instruction<hr>
	 * <p>
	 * <code>LLDT r32/m16</code><p>
	 * <code>o32 0F 00 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lldt(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.LLDT_R32M16, dst.get()));
	}

	/**
	 * <code>LLDT</code> instruction<hr>
	 * <p>
	 * <code>LLDT r64/m16</code><p>
	 * <code>o64 0F 00 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lldt(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.LLDT_R64M16, dst.get()));
	}

	/**
	 * <code>LLDT</code> instruction<hr>
	 * <p>
	 * <code>LLDT r32/m16</code><p>
	 * <code>o32 0F 00 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>LLDT r/m16</code><p>
	 * <code>o16 0F 00 /2</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lldt(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.LLDT_R32M16 : Code.LLDT_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LLWPCB</code> instruction<hr>
	 * <p>
	 * <code>LLWPCB r32</code><p>
	 * <code>XOP.L0.X9.W0 12 /0</code><p>
	 * <code>LWP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void llwpcb(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.XOP_LLWPCB_R32, dst.get()));
	}

	/**
	 * <code>LLWPCB</code> instruction<hr>
	 * <p>
	 * <code>LLWPCB r64</code><p>
	 * <code>XOP.L0.X9.W1 12 /0</code><p>
	 * <code>LWP</code><p>
	 * <code>64-bit</code>
	 */
	public void llwpcb(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.XOP_LLWPCB_R64, dst.get()));
	}

	/**
	 * <code>LMSW</code> instruction<hr>
	 * <p>
	 * <code>LMSW r/m16</code><p>
	 * <code>o16 0F 01 /6</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lmsw(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.LMSW_RM16, dst.get()));
	}

	/**
	 * <code>LMSW</code> instruction<hr>
	 * <p>
	 * <code>LMSW r32/m16</code><p>
	 * <code>o32 0F 01 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lmsw(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.LMSW_R32M16, dst.get()));
	}

	/**
	 * <code>LMSW</code> instruction<hr>
	 * <p>
	 * <code>LMSW r64/m16</code><p>
	 * <code>o64 0F 01 /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lmsw(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.LMSW_R64M16, dst.get()));
	}

	/**
	 * <code>LMSW</code> instruction<hr>
	 * <p>
	 * <code>LMSW r32/m16</code><p>
	 * <code>o32 0F 01 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>LMSW r/m16</code><p>
	 * <code>o16 0F 01 /6</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lmsw(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.LMSW_R32M16 : Code.LMSW_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LOADALL</code> instruction<hr>
	 * <p>
	 * <code>LOADALL</code><p>
	 * <code>0F 07</code><p>
	 * <code>386</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loadall() {
		addInstruction(Instruction.create(Code.LOADALL386));
	}

	/**
	 * <code>LOADIWKEY</code> instruction<hr>
	 * <p>
	 * <code>LOADIWKEY xmm1, xmm2, &lt;EAX&gt;, &lt;XMM0&gt;</code><p>
	 * <code>F3 0F 38 DC 11:rrr:bbb</code><p>
	 * <code>KL</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void loadiwkey(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.LOADIWKEY_XMM_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>LODSB</code> instruction<hr>
	 * <p>
	 * <code>LODSB</code><p>
	 * <code>AC</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lodsb() {
		addInstruction(Instruction.createLodsb(getBitness()));
	}

	/**
	 * <code>LODSD</code> instruction<hr>
	 * <p>
	 * <code>LODSD</code><p>
	 * <code>o32 AD</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lodsd() {
		addInstruction(Instruction.createLodsd(getBitness()));
	}

	/**
	 * <code>LODSQ</code> instruction<hr>
	 * <p>
	 * <code>LODSQ</code><p>
	 * <code>o64 AD</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lodsq() {
		addInstruction(Instruction.createLodsq(getBitness()));
	}

	/**
	 * <code>LODSW</code> instruction<hr>
	 * <p>
	 * <code>LODSW</code><p>
	 * <code>o16 AD</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lodsw() {
		addInstruction(Instruction.createLodsw(getBitness()));
	}

	/**
	 * <code>LOOP</code> instruction<hr>
	 * <p>
	 * <code>LOOP rel8</code><p>
	 * <code>a64 o64 E2 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOP rel8</code><p>
	 * <code>a32 o32 E2 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOP rel8</code><p>
	 * <code>a16 o16 E2 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loop(CodeLabel dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOP_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOP_REL8_32_ECX : Code.LOOP_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>LOOP</code> instruction<hr>
	 * <p>
	 * <code>LOOP rel8</code><p>
	 * <code>a64 o64 E2 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOP rel8</code><p>
	 * <code>a32 o32 E2 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOP rel8</code><p>
	 * <code>a16 o16 E2 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loop(long dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOP_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOP_REL8_32_ECX : Code.LOOP_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>LOOPE</code> instruction<hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a64 o64 E1 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a32 o32 E1 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a16 o16 E1 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loope(CodeLabel dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPE_REL8_32_ECX : Code.LOOPE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>LOOPE</code> instruction<hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a64 o64 E1 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a32 o32 E1 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a16 o16 E1 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loope(long dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPE_REL8_32_ECX : Code.LOOPE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>LOOPNE</code> instruction<hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a64 o64 E0 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a32 o32 E0 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a16 o16 E0 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loopne(CodeLabel dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPNE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPNE_REL8_32_ECX : Code.LOOPNE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>LOOPNE</code> instruction<hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a64 o64 E0 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a32 o32 E0 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a16 o16 E0 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loopne(long dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPNE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPNE_REL8_32_ECX : Code.LOOPNE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>LOOPNZ</code> instruction<hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a64 o64 E0 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a32 o32 E0 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a16 o16 E0 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loopnz(CodeLabel dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPNE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPNE_REL8_32_ECX : Code.LOOPNE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>LOOPNZ</code> instruction<hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a64 o64 E0 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a32 o32 E0 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPNE rel8</code><p>
	 * <code>a16 o16 E0 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loopnz(long dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPNE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPNE_REL8_32_ECX : Code.LOOPNE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>LOOPZ</code> instruction<hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a64 o64 E1 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a32 o32 E1 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a16 o16 E1 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loopz(CodeLabel dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPE_REL8_32_ECX : Code.LOOPE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst.id));
	}

	/**
	 * <code>LOOPZ</code> instruction<hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a64 o64 E1 cb</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a32 o32 E1 cb</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>LOOPE rel8</code><p>
	 * <code>a16 o16 E1 cb</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void loopz(long dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.LOOPE_REL8_64_RCX;
		} else code = getBitness() >= 32 ? Code.LOOPE_REL8_32_ECX : Code.LOOPE_REL8_16_CX;
		addInstruction(Instruction.createBranch(code, dst));
	}

	/**
	 * <code>LSL</code> instruction<hr>
	 * <p>
	 * <code>LSL r16, r/m16</code><p>
	 * <code>o16 0F 03 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lsl(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.LSL_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>LSL</code> instruction<hr>
	 * <p>
	 * <code>LSL r32, r32/m16</code><p>
	 * <code>o32 0F 03 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lsl(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.LSL_R32_R32M16, dst.get(), src.get()));
	}

	/**
	 * <code>LSL</code> instruction<hr>
	 * <p>
	 * <code>LSL r64, r64/m16</code><p>
	 * <code>o64 0F 03 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lsl(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.LSL_R64_R64M16, dst.get(), src.get()));
	}

	/**
	 * <code>LSL</code> instruction<hr>
	 * <p>
	 * <code>LSL r16, r/m16</code><p>
	 * <code>o16 0F 03 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lsl(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LSL_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LSL</code> instruction<hr>
	 * <p>
	 * <code>LSL r32, r32/m16</code><p>
	 * <code>o32 0F 03 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lsl(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LSL_R32_R32M16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LSS</code> instruction<hr>
	 * <p>
	 * <code>LSS r16, m16:16</code><p>
	 * <code>o16 0F B2 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lss(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LSS_R16_M1616, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LSS</code> instruction<hr>
	 * <p>
	 * <code>LSS r32, m16:32</code><p>
	 * <code>o32 0F B2 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lss(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LSS_R32_M1632, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LSS</code> instruction<hr>
	 * <p>
	 * <code>LSS r64, m16:64</code><p>
	 * <code>o64 0F B2 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void lss(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LSS_R64_M1664, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LTR</code> instruction<hr>
	 * <p>
	 * <code>LTR r/m16</code><p>
	 * <code>o16 0F 00 /3</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ltr(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.LTR_RM16, dst.get()));
	}

	/**
	 * <code>LTR</code> instruction<hr>
	 * <p>
	 * <code>LTR r32/m16</code><p>
	 * <code>o32 0F 00 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ltr(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.LTR_R32M16, dst.get()));
	}

	/**
	 * <code>LTR</code> instruction<hr>
	 * <p>
	 * <code>LTR r64/m16</code><p>
	 * <code>o64 0F 00 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void ltr(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.LTR_R64M16, dst.get()));
	}

	/**
	 * <code>LTR</code> instruction<hr>
	 * <p>
	 * <code>LTR r32/m16</code><p>
	 * <code>o32 0F 00 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>LTR r/m16</code><p>
	 * <code>o16 0F 00 /3</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ltr(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.LTR_R32M16 : Code.LTR_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LWPINS</code> instruction<hr>
	 * <p>
	 * <code>LWPINS r32, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W0 12 /0 id</code><p>
	 * <code>LWP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lwpins(AsmRegister32 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPINS_R32_RM32_IMM32, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>LWPINS</code> instruction<hr>
	 * <p>
	 * <code>LWPINS r64, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W1 12 /0 id</code><p>
	 * <code>LWP</code><p>
	 * <code>64-bit</code>
	 */
	public void lwpins(AsmRegister64 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPINS_R64_RM32_IMM32, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>LWPINS</code> instruction<hr>
	 * <p>
	 * <code>LWPINS r32, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W0 12 /0 id</code><p>
	 * <code>LWP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lwpins(AsmRegister32 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPINS_R32_RM32_IMM32, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>LWPINS</code> instruction<hr>
	 * <p>
	 * <code>LWPINS r64, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W1 12 /0 id</code><p>
	 * <code>LWP</code><p>
	 * <code>64-bit</code>
	 */
	public void lwpins(AsmRegister64 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPINS_R64_RM32_IMM32, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>LWPVAL</code> instruction<hr>
	 * <p>
	 * <code>LWPVAL r32, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W0 12 /1 id</code><p>
	 * <code>LWP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lwpval(AsmRegister32 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPVAL_R32_RM32_IMM32, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>LWPVAL</code> instruction<hr>
	 * <p>
	 * <code>LWPVAL r64, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W1 12 /1 id</code><p>
	 * <code>LWP</code><p>
	 * <code>64-bit</code>
	 */
	public void lwpval(AsmRegister64 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPVAL_R64_RM32_IMM32, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>LWPVAL</code> instruction<hr>
	 * <p>
	 * <code>LWPVAL r32, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W0 12 /1 id</code><p>
	 * <code>LWP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lwpval(AsmRegister32 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPVAL_R32_RM32_IMM32, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>LWPVAL</code> instruction<hr>
	 * <p>
	 * <code>LWPVAL r64, r/m32, imm32</code><p>
	 * <code>XOP.L0.XA.W1 12 /1 id</code><p>
	 * <code>LWP</code><p>
	 * <code>64-bit</code>
	 */
	public void lwpval(AsmRegister64 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_LWPVAL_R64_RM32_IMM32, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>LZCNT</code> instruction<hr>
	 * <p>
	 * <code>LZCNT r16, r/m16</code><p>
	 * <code>o16 F3 0F BD /r</code><p>
	 * <code>LZCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lzcnt(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.LZCNT_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>LZCNT</code> instruction<hr>
	 * <p>
	 * <code>LZCNT r32, r/m32</code><p>
	 * <code>o32 F3 0F BD /r</code><p>
	 * <code>LZCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lzcnt(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.LZCNT_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>LZCNT</code> instruction<hr>
	 * <p>
	 * <code>LZCNT r64, r/m64</code><p>
	 * <code>F3 o64 0F BD /r</code><p>
	 * <code>LZCNT</code><p>
	 * <code>64-bit</code>
	 */
	public void lzcnt(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.LZCNT_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>LZCNT</code> instruction<hr>
	 * <p>
	 * <code>LZCNT r16, r/m16</code><p>
	 * <code>o16 F3 0F BD /r</code><p>
	 * <code>LZCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lzcnt(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LZCNT_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LZCNT</code> instruction<hr>
	 * <p>
	 * <code>LZCNT r32, r/m32</code><p>
	 * <code>o32 F3 0F BD /r</code><p>
	 * <code>LZCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void lzcnt(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LZCNT_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>LZCNT</code> instruction<hr>
	 * <p>
	 * <code>LZCNT r64, r/m64</code><p>
	 * <code>F3 o64 0F BD /r</code><p>
	 * <code>LZCNT</code><p>
	 * <code>64-bit</code>
	 */
	public void lzcnt(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.LZCNT_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MASKMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>MASKMOVDQU xmm1, xmm2</code><p>
	 * <code>66 0F F7 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maskmovdqu(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.createMaskmovdqu(getBitness(), dst.get(), src.get()));
	}

	/**
	 * <code>MASKMOVQ</code> instruction<hr>
	 * <p>
	 * <code>MASKMOVQ mm1, mm2</code><p>
	 * <code>NP 0F F7 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maskmovq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.createMaskmovq(getBitness(), dst.get(), src.get()));
	}

	/**
	 * <code>MAXPD</code> instruction<hr>
	 * <p>
	 * <code>MAXPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MAXPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MAXPD</code> instruction<hr>
	 * <p>
	 * <code>MAXPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MAXPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MAXPS</code> instruction<hr>
	 * <p>
	 * <code>MAXPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5F /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MAXPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MAXPS</code> instruction<hr>
	 * <p>
	 * <code>MAXPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5F /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MAXPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MAXSD</code> instruction<hr>
	 * <p>
	 * <code>MAXSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MAXSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>MAXSD</code> instruction<hr>
	 * <p>
	 * <code>MAXSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MAXSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MAXSS</code> instruction<hr>
	 * <p>
	 * <code>MAXSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5F /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MAXSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>MAXSS</code> instruction<hr>
	 * <p>
	 * <code>MAXSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5F /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void maxss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MAXSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MCOMMIT</code> instruction<hr>
	 * <p>
	 * <code>MCOMMIT</code><p>
	 * <code>F3 0F 01 FA</code><p>
	 * <code>MCOMMIT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mcommit() {
		addInstruction(Instruction.create(Code.MCOMMIT));
	}

	/**
	 * <code>MFENCE</code> instruction<hr>
	 * <p>
	 * <code>MFENCE</code><p>
	 * <code>NP 0F AE F0</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mfence() {
		addInstruction(Instruction.create(Code.MFENCE));
	}

	/**
	 * <code>MINPD</code> instruction<hr>
	 * <p>
	 * <code>MINPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MINPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MINPD</code> instruction<hr>
	 * <p>
	 * <code>MINPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MINPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MINPS</code> instruction<hr>
	 * <p>
	 * <code>MINPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MINPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MINPS</code> instruction<hr>
	 * <p>
	 * <code>MINPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MINPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MINSD</code> instruction<hr>
	 * <p>
	 * <code>MINSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MINSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>MINSD</code> instruction<hr>
	 * <p>
	 * <code>MINSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MINSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MINSS</code> instruction<hr>
	 * <p>
	 * <code>MINSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MINSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>MINSS</code> instruction<hr>
	 * <p>
	 * <code>MINSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5D /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void minss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MINSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MONITOR</code> instruction<hr>
	 * <p>
	 * <code>MONITOR</code><p>
	 * <code>a64 NP 0F 01 C8</code><p>
	 * <code>MONITOR</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MONITOR</code><p>
	 * <code>a32 NP 0F 01 C8</code><p>
	 * <code>MONITOR</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MONITOR</code><p>
	 * <code>a16 NP 0F 01 C8</code><p>
	 * <code>MONITOR</code><p>
	 * <code>16/32-bit</code>
	 */
	public void monitor() {
		int code;
		if (getBitness() == 64) {
			code = Code.MONITORQ;
		} else code = getBitness() >= 32 ? Code.MONITORD : Code.MONITORW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>MONITORX</code> instruction<hr>
	 * <p>
	 * <code>MONITORX</code><p>
	 * <code>a64 NP 0F 01 FA</code><p>
	 * <code>MONITORX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MONITORX</code><p>
	 * <code>a32 NP 0F 01 FA</code><p>
	 * <code>MONITORX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MONITORX</code><p>
	 * <code>a16 NP 0F 01 FA</code><p>
	 * <code>MONITORX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void monitorx() {
		int code;
		if (getBitness() == 64) {
			code = Code.MONITORXQ;
		} else code = getBitness() >= 32 ? Code.MONITORXD : Code.MONITORXW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>MONTMUL</code> instruction<hr>
	 * <p>
	 * <code>MONTMUL</code><p>
	 * <code>a64 F3 0F A6 C0</code><p>
	 * <code>PADLOCK_PMM</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MONTMUL</code><p>
	 * <code>a32 F3 0F A6 C0</code><p>
	 * <code>PADLOCK_PMM</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MONTMUL</code><p>
	 * <code>a16 F3 0F A6 C0</code><p>
	 * <code>PADLOCK_PMM</code><p>
	 * <code>16/32-bit</code>
	 */
	public void montmul() {
		int code;
		if (getBitness() == 64) {
			code = Code.MONTMUL_64;
		} else code = getBitness() >= 32 ? Code.MONTMUL_32 : Code.MONTMUL_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r/m8, r8</code><p>
	 * <code>88 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.MOV_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV moffs8, AL</code><p>
	 * <code>A2 mo</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m8, r8</code><p>
	 * <code>88 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (src.getRegister() == Register.AL && getBitness() == 64 && dst.isDisplacementOnly()) {
			code = Code.MOV_MOFFS8_AL;
		} else code = src.getRegister() == Register.AL && getBitness() < 64 && dst.isDisplacementOnly() ? Code.MOV_MOFFS8_AL : Code.MOV_RM8_R8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r/m16, r16</code><p>
	 * <code>o16 89 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOV_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV Sreg, r/m16</code><p>
	 * <code>o16 8E /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegisterSegment dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOV_SREG_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV moffs16, AX</code><p>
	 * <code>o16 A3 mo</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m16, r16</code><p>
	 * <code>o16 89 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmMemoryOperand dst, AsmRegister16 src) {
		int code;
		if (src.getRegister() == Register.AX && getBitness() == 64 && dst.isDisplacementOnly()) {
			code = Code.MOV_MOFFS16_AX;
		} else code = src.getRegister() == Register.AX && getBitness() < 64 && dst.isDisplacementOnly() ? Code.MOV_MOFFS16_AX : Code.MOV_RM16_R16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r/m32, r32</code><p>
	 * <code>o32 89 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOV_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV Sreg, r32/m16</code><p>
	 * <code>o32 8E /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegisterSegment dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOV_SREG_R32M16, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV cr, r32</code><p>
	 * <code>0F 22 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void mov(AsmRegisterCR dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOV_CR_R32, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV dr, r32</code><p>
	 * <code>0F 23 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void mov(AsmRegisterDR dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOV_DR_R32, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV tr, r32</code><p>
	 * <code>0F 26 /r</code><p>
	 * <code>386/486/Cyrix/Geode</code><p>
	 * <code>16/32-bit</code>
	 */
	public void mov(AsmRegisterTR dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOV_TR_R32, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV moffs32, EAX</code><p>
	 * <code>o32 A3 mo</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m32, r32</code><p>
	 * <code>o32 89 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmMemoryOperand dst, AsmRegister32 src) {
		int code;
		if (src.getRegister() == Register.EAX && getBitness() == 64 && dst.isDisplacementOnly()) {
			code = Code.MOV_MOFFS32_EAX;
		} else code = src.getRegister() == Register.EAX && getBitness() < 64 && dst.isDisplacementOnly() ? Code.MOV_MOFFS32_EAX : Code.MOV_RM32_R32;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r/m64, r64</code><p>
	 * <code>o64 89 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOV_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV Sreg, r64/m16</code><p>
	 * <code>o64 8E /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegisterSegment dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOV_SREG_R64M16, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV cr, r64</code><p>
	 * <code>0F 22 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegisterCR dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOV_CR_R64, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV dr, r64</code><p>
	 * <code>0F 23 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegisterDR dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOV_DR_R64, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV moffs64, RAX</code><p>
	 * <code>o64 A3 mo</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m64, r64</code><p>
	 * <code>o64 89 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmMemoryOperand dst, AsmRegister64 src) {
		int code;
		if (src.getRegister() == Register.RAX && getBitness() == 64 && dst.isDisplacementOnly()) {
			code = Code.MOV_MOFFS64_RAX;
		} else code = src.getRegister() == Register.RAX && getBitness() < 64 && dst.isDisplacementOnly() ? Code.MOV_MOFFS64_RAX : Code.MOV_RM64_R64;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r/m16, Sreg</code><p>
	 * <code>o16 8C /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister16 dst, AsmRegisterSegment src) {
		addInstruction(Instruction.create(Code.MOV_RM16_SREG, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r32/m16, Sreg</code><p>
	 * <code>o32 8C /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister32 dst, AsmRegisterSegment src) {
		addInstruction(Instruction.create(Code.MOV_R32M16_SREG, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r64/m16, Sreg</code><p>
	 * <code>o64 8C /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegister64 dst, AsmRegisterSegment src) {
		addInstruction(Instruction.create(Code.MOV_R64M16_SREG, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r32/m16, Sreg</code><p>
	 * <code>o32 8C /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m16, Sreg</code><p>
	 * <code>o16 8C /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmMemoryOperand dst, AsmRegisterSegment src) {
		int code;
		code = getBitness() >= 32 ? Code.MOV_R32M16_SREG : Code.MOV_RM16_SREG;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r32, cr</code><p>
	 * <code>0F 20 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void mov(AsmRegister32 dst, AsmRegisterCR src) {
		addInstruction(Instruction.create(Code.MOV_R32_CR, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r64, cr</code><p>
	 * <code>0F 20 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegister64 dst, AsmRegisterCR src) {
		addInstruction(Instruction.create(Code.MOV_R64_CR, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r32, dr</code><p>
	 * <code>0F 21 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void mov(AsmRegister32 dst, AsmRegisterDR src) {
		addInstruction(Instruction.create(Code.MOV_R32_DR, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r64, dr</code><p>
	 * <code>0F 21 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegister64 dst, AsmRegisterDR src) {
		addInstruction(Instruction.create(Code.MOV_R64_DR, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r32, tr</code><p>
	 * <code>0F 24 /r</code><p>
	 * <code>386/486/Cyrix/Geode</code><p>
	 * <code>16/32-bit</code>
	 */
	public void mov(AsmRegister32 dst, AsmRegisterTR src) {
		addInstruction(Instruction.create(Code.MOV_R32_TR, dst.get(), src.get()));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV AL, moffs8</code><p>
	 * <code>A0 mo</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r8, r/m8</code><p>
	 * <code>8A /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister8 dst, AsmMemoryOperand src) {
		int code;
		if (dst.getRegister() == Register.AL && getBitness() == 64 && src.isDisplacementOnly()) {
			code = Code.MOV_AL_MOFFS8;
		} else code = dst.getRegister() == Register.AL && getBitness() < 64 && src.isDisplacementOnly() ? Code.MOV_AL_MOFFS8 : Code.MOV_R8_RM8;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV AX, moffs16</code><p>
	 * <code>o16 A1 mo</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r16, r/m16</code><p>
	 * <code>o16 8B /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister16 dst, AsmMemoryOperand src) {
		int code;
		if (dst.getRegister() == Register.AX && getBitness() == 64 && src.isDisplacementOnly()) {
			code = Code.MOV_AX_MOFFS16;
		} else code = dst.getRegister() == Register.AX && getBitness() < 64 && src.isDisplacementOnly() ? Code.MOV_AX_MOFFS16 : Code.MOV_R16_RM16;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV EAX, moffs32</code><p>
	 * <code>o32 A1 mo</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r32, r/m32</code><p>
	 * <code>o32 8B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		if (dst.getRegister() == Register.EAX && getBitness() == 64 && src.isDisplacementOnly()) {
			code = Code.MOV_EAX_MOFFS32;
		} else code = dst.getRegister() == Register.EAX && getBitness() < 64 && src.isDisplacementOnly() ? Code.MOV_EAX_MOFFS32 : Code.MOV_R32_RM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV RAX, moffs64</code><p>
	 * <code>o64 A1 mo</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MOV r64, r/m64</code><p>
	 * <code>o64 8B /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		if (dst.getRegister() == Register.RAX && getBitness() == 64 && src.isDisplacementOnly()) {
			code = Code.MOV_RAX_MOFFS64;
		} else code = dst.getRegister() == Register.RAX && getBitness() < 64 && src.isDisplacementOnly() ? Code.MOV_RAX_MOFFS64 : Code.MOV_R64_RM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV Sreg, r32/m16</code><p>
	 * <code>o32 8E /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV Sreg, r/m16</code><p>
	 * <code>o16 8E /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegisterSegment dst, AsmMemoryOperand src) {
		int code;
		code = getBitness() >= 32 ? Code.MOV_SREG_R32M16 : Code.MOV_SREG_RM16;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r8, imm8</code><p>
	 * <code>B0+rb ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister8 dst, int imm) {
		addInstruction(Instruction.create(Code.MOV_R8_IMM8, dst.get(), imm));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r16, imm16</code><p>
	 * <code>o16 B8+rw iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister16 dst, int imm) {
		addInstruction(Instruction.create(Code.MOV_R16_IMM16, dst.get(), imm));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r32, imm32</code><p>
	 * <code>o32 B8+rd id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmRegister32 dst, int imm) {
		addInstruction(Instruction.create(Code.MOV_R32_IMM32, dst.get(), imm));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r64, imm64</code><p>
	 * <code>o64 B8+ro io</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mov(AsmRegister64 dst, long imm) {
		addInstruction(Instruction.create(Code.MOV_R64_IMM64, dst.get(), imm));
	}

	/**
	 * <code>MOV</code> instruction<hr>
	 * <p>
	 * <code>MOV r/m64, imm32</code><p>
	 * <code>o64 C7 /0 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m32, imm32</code><p>
	 * <code>o32 C7 /0 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m16, imm16</code><p>
	 * <code>o16 C7 /0 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOV r/m8, imm8</code><p>
	 * <code>C6 /0 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mov(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.MOV_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.MOV_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.MOV_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.MOV_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MOV, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>MOVAPD</code> instruction<hr>
	 * <p>
	 * <code>MOVAPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 28 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movapd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVAPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVAPD</code> instruction<hr>
	 * <p>
	 * <code>MOVAPD xmm2/m128, xmm1</code><p>
	 * <code>66 0F 29 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movapd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVAPD_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVAPD</code> instruction<hr>
	 * <p>
	 * <code>MOVAPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 28 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movapd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVAPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVAPS</code> instruction<hr>
	 * <p>
	 * <code>MOVAPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 28 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movaps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVAPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVAPS</code> instruction<hr>
	 * <p>
	 * <code>MOVAPS xmm2/m128, xmm1</code><p>
	 * <code>NP 0F 29 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movaps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVAPS_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVAPS</code> instruction<hr>
	 * <p>
	 * <code>MOVAPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 28 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movaps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVAPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVBE</code> instruction<hr>
	 * <p>
	 * <code>MOVBE m16, r16</code><p>
	 * <code>o16 0F 38 F1 /r</code><p>
	 * <code>MOVBE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movbe(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVBE_M16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVBE</code> instruction<hr>
	 * <p>
	 * <code>MOVBE m32, r32</code><p>
	 * <code>o32 0F 38 F1 /r</code><p>
	 * <code>MOVBE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movbe(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOVBE_M32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVBE</code> instruction<hr>
	 * <p>
	 * <code>MOVBE m64, r64</code><p>
	 * <code>o64 0F 38 F1 /r</code><p>
	 * <code>MOVBE</code><p>
	 * <code>64-bit</code>
	 */
	public void movbe(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOVBE_M64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVBE</code> instruction<hr>
	 * <p>
	 * <code>MOVBE r16, m16</code><p>
	 * <code>o16 0F 38 F0 /r</code><p>
	 * <code>MOVBE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movbe(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVBE_R16_M16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVBE</code> instruction<hr>
	 * <p>
	 * <code>MOVBE r32, m32</code><p>
	 * <code>o32 0F 38 F0 /r</code><p>
	 * <code>MOVBE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movbe(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVBE_R32_M32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVBE</code> instruction<hr>
	 * <p>
	 * <code>MOVBE r64, m64</code><p>
	 * <code>o64 0F 38 F0 /r</code><p>
	 * <code>MOVBE</code><p>
	 * <code>64-bit</code>
	 */
	public void movbe(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVBE_R64_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD mm, r/m32</code><p>
	 * <code>NP 0F 6E /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmRegisterMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOVD_MM_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD xmm, r/m32</code><p>
	 * <code>66 0F 6E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmRegisterXMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOVD_XMM_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD r/m32, mm</code><p>
	 * <code>NP 0F 7E /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmRegister32 dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.MOVD_RM32_MM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD r/m32, mm</code><p>
	 * <code>NP 0F 7E /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmMemoryOperand dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.MOVD_RM32_MM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD r/m32, xmm</code><p>
	 * <code>66 0F 7E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVD_RM32_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD r/m32, xmm</code><p>
	 * <code>66 0F 7E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVD_RM32_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD mm, r/m32</code><p>
	 * <code>NP 0F 6E /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVD_MM_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVD</code> instruction<hr>
	 * <p>
	 * <code>MOVD xmm, r/m32</code><p>
	 * <code>66 0F 6E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVD_XMM_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>MOVDDUP xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 12 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movddup(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVDDUP_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>MOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>MOVDDUP xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 12 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movddup(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVDDUP_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVDIR64B</code> instruction<hr>
	 * <p>
	 * <code>MOVDIR64B r16, m512</code><p>
	 * <code>a16 66 0F 38 F8 /r</code><p>
	 * <code>MOVDIR64B</code><p>
	 * <code>16/32-bit</code>
	 */
	public void movdir64b(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVDIR64B_R16_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVDIR64B</code> instruction<hr>
	 * <p>
	 * <code>MOVDIR64B r32, m512</code><p>
	 * <code>a32 66 0F 38 F8 /r</code><p>
	 * <code>MOVDIR64B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdir64b(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVDIR64B_R32_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVDIR64B</code> instruction<hr>
	 * <p>
	 * <code>MOVDIR64B r64, m512</code><p>
	 * <code>a64 66 0F 38 F8 /r</code><p>
	 * <code>MOVDIR64B</code><p>
	 * <code>64-bit</code>
	 */
	public void movdir64b(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVDIR64B_R64_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVDIRI</code> instruction<hr>
	 * <p>
	 * <code>MOVDIRI m32, r32</code><p>
	 * <code>NP 0F 38 F9 /r</code><p>
	 * <code>MOVDIRI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdiri(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOVDIRI_M32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVDIRI</code> instruction<hr>
	 * <p>
	 * <code>MOVDIRI m64, r64</code><p>
	 * <code>NP o64 0F 38 F9 /r</code><p>
	 * <code>MOVDIRI</code><p>
	 * <code>64-bit</code>
	 */
	public void movdiri(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOVDIRI_M64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVDQ2Q</code> instruction<hr>
	 * <p>
	 * <code>MOVDQ2Q mm, xmm</code><p>
	 * <code>F2 0F D6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdq2q(AsmRegisterMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVDQ2Q_MM_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVDQA</code> instruction<hr>
	 * <p>
	 * <code>MOVDQA xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdqa(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVDQA_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVDQA</code> instruction<hr>
	 * <p>
	 * <code>MOVDQA xmm2/m128, xmm1</code><p>
	 * <code>66 0F 7F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdqa(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVDQA_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVDQA</code> instruction<hr>
	 * <p>
	 * <code>MOVDQA xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdqa(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVDQA_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVDQU</code> instruction<hr>
	 * <p>
	 * <code>MOVDQU xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 6F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdqu(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVDQU_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVDQU</code> instruction<hr>
	 * <p>
	 * <code>MOVDQU xmm2/m128, xmm1</code><p>
	 * <code>F3 0F 7F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdqu(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVDQU_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVDQU</code> instruction<hr>
	 * <p>
	 * <code>MOVDQU xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 6F /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movdqu(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVDQU_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVHLPS</code> instruction<hr>
	 * <p>
	 * <code>MOVHLPS xmm1, xmm2</code><p>
	 * <code>NP 0F 12 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movhlps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVHLPS_XMM_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVHPD</code> instruction<hr>
	 * <p>
	 * <code>MOVHPD m64, xmm1</code><p>
	 * <code>66 0F 17 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movhpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVHPD_M64_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVHPD</code> instruction<hr>
	 * <p>
	 * <code>MOVHPD xmm1, m64</code><p>
	 * <code>66 0F 16 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movhpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVHPD_XMM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVHPS</code> instruction<hr>
	 * <p>
	 * <code>MOVHPS m64, xmm1</code><p>
	 * <code>NP 0F 17 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movhps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVHPS_M64_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVHPS</code> instruction<hr>
	 * <p>
	 * <code>MOVHPS xmm1, m64</code><p>
	 * <code>NP 0F 16 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movhps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVHPS_XMM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVLHPS</code> instruction<hr>
	 * <p>
	 * <code>MOVLHPS xmm1, xmm2</code><p>
	 * <code>NP 0F 16 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movlhps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVLHPS_XMM_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVLPD</code> instruction<hr>
	 * <p>
	 * <code>MOVLPD m64, xmm1</code><p>
	 * <code>66 0F 13 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movlpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVLPD_M64_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVLPD</code> instruction<hr>
	 * <p>
	 * <code>MOVLPD xmm1, m64</code><p>
	 * <code>66 0F 12 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movlpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVLPD_XMM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVLPS</code> instruction<hr>
	 * <p>
	 * <code>MOVLPS m64, xmm1</code><p>
	 * <code>NP 0F 13 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movlps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVLPS_M64_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVLPS</code> instruction<hr>
	 * <p>
	 * <code>MOVLPS xmm1, m64</code><p>
	 * <code>NP 0F 12 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movlps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVLPS_XMM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVMSKPD</code> instruction<hr>
	 * <p>
	 * <code>MOVMSKPD r32, xmm</code><p>
	 * <code>66 0F 50 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movmskpd(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVMSKPD_R32_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVMSKPD</code> instruction<hr>
	 * <p>
	 * <code>MOVMSKPD r64, xmm</code><p>
	 * <code>66 o64 0F 50 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void movmskpd(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVMSKPD_R64_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVMSKPS</code> instruction<hr>
	 * <p>
	 * <code>MOVMSKPS r32, xmm</code><p>
	 * <code>NP 0F 50 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movmskps(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVMSKPS_R32_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVMSKPS</code> instruction<hr>
	 * <p>
	 * <code>MOVMSKPS r64, xmm</code><p>
	 * <code>NP o64 0F 50 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void movmskps(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVMSKPS_R64_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVNTDQ</code> instruction<hr>
	 * <p>
	 * <code>MOVNTDQ m128, xmm1</code><p>
	 * <code>66 0F E7 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movntdq(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVNTDQ_M128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVNTDQA</code> instruction<hr>
	 * <p>
	 * <code>MOVNTDQA xmm1, m128</code><p>
	 * <code>66 0F 38 2A /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movntdqa(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVNTDQA_XMM_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVNTI</code> instruction<hr>
	 * <p>
	 * <code>MOVNTI m32, r32</code><p>
	 * <code>NP 0F C3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movnti(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOVNTI_M32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVNTI</code> instruction<hr>
	 * <p>
	 * <code>MOVNTI m64, r64</code><p>
	 * <code>NP o64 0F C3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void movnti(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOVNTI_M64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVNTPD</code> instruction<hr>
	 * <p>
	 * <code>MOVNTPD m128, xmm1</code><p>
	 * <code>66 0F 2B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movntpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVNTPD_M128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVNTPS</code> instruction<hr>
	 * <p>
	 * <code>MOVNTPS m128, xmm1</code><p>
	 * <code>NP 0F 2B /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movntps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVNTPS_M128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVNTQ</code> instruction<hr>
	 * <p>
	 * <code>MOVNTQ m64, mm</code><p>
	 * <code>NP 0F E7 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movntq(AsmMemoryOperand dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.MOVNTQ_M64_MM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVNTSD</code> instruction<hr>
	 * <p>
	 * <code>MOVNTSD m64, xmm1</code><p>
	 * <code>F2 0F 2B /r</code><p>
	 * <code>SSE4A</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movntsd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVNTSD_M64_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVNTSS</code> instruction<hr>
	 * <p>
	 * <code>MOVNTSS m32, xmm1</code><p>
	 * <code>F3 0F 2B /r</code><p>
	 * <code>SSE4A</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movntss(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVNTSS_M32_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ mm, r/m64</code><p>
	 * <code>NP o64 0F 6E /r</code><p>
	 * <code>MMX</code><p>
	 * <code>64-bit</code>
	 */
	public void movq(AsmRegisterMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOVQ_MM_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ xmm, r/m64</code><p>
	 * <code>66 o64 0F 6E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void movq(AsmRegisterXMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.MOVQ_XMM_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ r/m64, mm</code><p>
	 * <code>NP o64 0F 7E /r</code><p>
	 * <code>MMX</code><p>
	 * <code>64-bit</code>
	 */
	public void movq(AsmRegister64 dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.MOVQ_RM64_MM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ mm, mm/m64</code><p>
	 * <code>NP 0F 6F /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.MOVQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ mm/m64, mm</code><p>
	 * <code>NP 0F 7F /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movq(AsmMemoryOperand dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.MOVQ_MMM64_MM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ r/m64, xmm</code><p>
	 * <code>66 o64 0F 7E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void movq(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVQ_RM64_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ xmm1, xmm2/m64</code><p>
	 * <code>F3 0F 7E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVQ_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ xmm2/m64, xmm1</code><p>
	 * <code>66 0F D6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movq(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVQ_XMMM64_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ mm, mm/m64</code><p>
	 * <code>NP 0F 6F /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ xmm1, xmm2/m64</code><p>
	 * <code>F3 0F 7E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVQ_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVQ2DQ</code> instruction<hr>
	 * <p>
	 * <code>MOVQ2DQ xmm, mm</code><p>
	 * <code>F3 0F D6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movq2dq(AsmRegisterXMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.MOVQ2DQ_XMM_MM, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSB</code> instruction<hr>
	 * <p>
	 * <code>MOVSB</code><p>
	 * <code>A4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsb() {
		addInstruction(Instruction.createMovsb(getBitness()));
	}

	/**
	 * <code>MOVSD</code> instruction<hr>
	 * <p>
	 * <code>MOVSD</code><p>
	 * <code>o32 A5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsd() {
		addInstruction(Instruction.createMovsd(getBitness()));
	}

	/**
	 * <code>MOVSD</code> instruction<hr>
	 * <p>
	 * <code>MOVSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 10 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSD</code> instruction<hr>
	 * <p>
	 * <code>MOVSD xmm1/m64, xmm2</code><p>
	 * <code>F2 0F 11 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVSD_XMMM64_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVSD</code> instruction<hr>
	 * <p>
	 * <code>MOVSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 10 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>MOVSHDUP xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 16 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movshdup(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVSHDUP_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>MOVSHDUP xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 16 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movshdup(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVSHDUP_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>MOVSLDUP xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 12 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsldup(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVSLDUP_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>MOVSLDUP xmm1, xmm2/m128</code><p>
	 * <code>F3 0F 12 /r</code><p>
	 * <code>SSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsldup(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVSLDUP_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSQ</code> instruction<hr>
	 * <p>
	 * <code>MOVSQ</code><p>
	 * <code>o64 A5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsq() {
		addInstruction(Instruction.createMovsq(getBitness()));
	}

	/**
	 * <code>MOVSS</code> instruction<hr>
	 * <p>
	 * <code>MOVSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 10 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSS</code> instruction<hr>
	 * <p>
	 * <code>MOVSS xmm2/m32, xmm1</code><p>
	 * <code>F3 0F 11 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movss(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVSS_XMMM32_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVSS</code> instruction<hr>
	 * <p>
	 * <code>MOVSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 10 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSW</code> instruction<hr>
	 * <p>
	 * <code>MOVSW</code><p>
	 * <code>o16 A5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsw() {
		addInstruction(Instruction.createMovsw(getBitness()));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r16, r/m8</code><p>
	 * <code>o16 0F BE /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsx(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.MOVSX_R16_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r32, r/m8</code><p>
	 * <code>o32 0F BE /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsx(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.MOVSX_R32_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r64, r/m8</code><p>
	 * <code>o64 0F BE /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsx(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.MOVSX_R64_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r16, r/m16</code><p>
	 * <code>o16 0F BF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsx(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVSX_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r32, r/m16</code><p>
	 * <code>o32 0F BF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsx(AsmRegister32 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVSX_R32_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r64, r/m16</code><p>
	 * <code>o64 0F BF /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsx(AsmRegister64 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVSX_R64_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r16, r/m16</code><p>
	 * <code>o16 0F BF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOVSX r16, r/m8</code><p>
	 * <code>o16 0F BE /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsx(AsmRegister16 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.WORD) {
			code = Code.MOVSX_R16_RM16;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.MOVSX_R16_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MOVSX, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r32, r/m16</code><p>
	 * <code>o32 0F BF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOVSX r32, r/m8</code><p>
	 * <code>o32 0F BE /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movsx(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.WORD) {
			code = Code.MOVSX_R32_RM16;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.MOVSX_R32_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MOVSX, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSX</code> instruction<hr>
	 * <p>
	 * <code>MOVSX r64, r/m16</code><p>
	 * <code>o64 0F BF /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MOVSX r64, r/m8</code><p>
	 * <code>o64 0F BE /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsx(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.WORD) {
			code = Code.MOVSX_R64_RM16;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.MOVSX_R64_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MOVSX, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSXD</code> instruction<hr>
	 * <p>
	 * <code>MOVSXD r16, r/m16</code><p>
	 * <code>o16 63 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsxd(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVSXD_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSXD</code> instruction<hr>
	 * <p>
	 * <code>MOVSXD r32, r/m32</code><p>
	 * <code>o32 63 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsxd(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOVSXD_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSXD</code> instruction<hr>
	 * <p>
	 * <code>MOVSXD r64, r/m32</code><p>
	 * <code>o64 63 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsxd(AsmRegister64 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.MOVSXD_R64_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>MOVSXD</code> instruction<hr>
	 * <p>
	 * <code>MOVSXD r16, r/m16</code><p>
	 * <code>o16 63 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsxd(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVSXD_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSXD</code> instruction<hr>
	 * <p>
	 * <code>MOVSXD r32, r/m32</code><p>
	 * <code>o32 63 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsxd(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVSXD_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVSXD</code> instruction<hr>
	 * <p>
	 * <code>MOVSXD r64, r/m32</code><p>
	 * <code>o64 63 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movsxd(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVSXD_R64_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVUPD</code> instruction<hr>
	 * <p>
	 * <code>MOVUPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 10 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movupd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVUPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVUPD</code> instruction<hr>
	 * <p>
	 * <code>MOVUPD xmm2/m128, xmm1</code><p>
	 * <code>66 0F 11 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movupd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVUPD_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVUPD</code> instruction<hr>
	 * <p>
	 * <code>MOVUPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 10 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movupd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVUPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVUPS</code> instruction<hr>
	 * <p>
	 * <code>MOVUPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 10 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movups(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVUPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MOVUPS</code> instruction<hr>
	 * <p>
	 * <code>MOVUPS xmm2/m128, xmm1</code><p>
	 * <code>NP 0F 11 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movups(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MOVUPS_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>MOVUPS</code> instruction<hr>
	 * <p>
	 * <code>MOVUPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 10 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movups(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MOVUPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r16, r/m8</code><p>
	 * <code>o16 0F B6 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movzx(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.MOVZX_R16_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r32, r/m8</code><p>
	 * <code>o32 0F B6 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movzx(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.MOVZX_R32_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r64, r/m8</code><p>
	 * <code>o64 0F B6 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movzx(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.MOVZX_R64_RM8, dst.get(), src.get()));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r16, r/m16</code><p>
	 * <code>o16 0F B7 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movzx(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVZX_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r32, r/m16</code><p>
	 * <code>o32 0F B7 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movzx(AsmRegister32 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVZX_R32_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r64, r/m16</code><p>
	 * <code>o64 0F B7 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movzx(AsmRegister64 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.MOVZX_R64_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r16, r/m16</code><p>
	 * <code>o16 0F B7 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOVZX r16, r/m8</code><p>
	 * <code>o16 0F B6 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movzx(AsmRegister16 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.WORD) {
			code = Code.MOVZX_R16_RM16;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.MOVZX_R16_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MOVZX, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r32, r/m16</code><p>
	 * <code>o32 0F B7 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MOVZX r32, r/m8</code><p>
	 * <code>o32 0F B6 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void movzx(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.WORD) {
			code = Code.MOVZX_R32_RM16;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.MOVZX_R32_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MOVZX, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MOVZX</code> instruction<hr>
	 * <p>
	 * <code>MOVZX r64, r/m16</code><p>
	 * <code>o64 0F B7 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MOVZX r64, r/m8</code><p>
	 * <code>o64 0F B6 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void movzx(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		if (src.size == MemoryOperandSize.WORD) {
			code = Code.MOVZX_R64_RM16;
		} else if (src.size == MemoryOperandSize.BYTE) {
			code = Code.MOVZX_R64_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MOVZX, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MPSADBW</code> instruction<hr>
	 * <p>
	 * <code>MPSADBW xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 42 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mpsadbw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.MPSADBW_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>MPSADBW</code> instruction<hr>
	 * <p>
	 * <code>MPSADBW xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 42 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mpsadbw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.MPSADBW_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>MUL</code> instruction<hr>
	 * <p>
	 * <code>MUL r/m8</code><p>
	 * <code>F6 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mul(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.MUL_RM8, dst.get()));
	}

	/**
	 * <code>MUL</code> instruction<hr>
	 * <p>
	 * <code>MUL r/m16</code><p>
	 * <code>o16 F7 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mul(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.MUL_RM16, dst.get()));
	}

	/**
	 * <code>MUL</code> instruction<hr>
	 * <p>
	 * <code>MUL r/m32</code><p>
	 * <code>o32 F7 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mul(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.MUL_RM32, dst.get()));
	}

	/**
	 * <code>MUL</code> instruction<hr>
	 * <p>
	 * <code>MUL r/m64</code><p>
	 * <code>o64 F7 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void mul(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.MUL_RM64, dst.get()));
	}

	/**
	 * <code>MUL</code> instruction<hr>
	 * <p>
	 * <code>MUL r/m64</code><p>
	 * <code>o64 F7 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>MUL r/m32</code><p>
	 * <code>o32 F7 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MUL r/m16</code><p>
	 * <code>o16 F7 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>MUL r/m8</code><p>
	 * <code>F6 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mul(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.MUL_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.MUL_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.MUL_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.MUL_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.MUL, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MULPD</code> instruction<hr>
	 * <p>
	 * <code>MULPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 59 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MULPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MULPD</code> instruction<hr>
	 * <p>
	 * <code>MULPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 59 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MULPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MULPS</code> instruction<hr>
	 * <p>
	 * <code>MULPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 59 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MULPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>MULPS</code> instruction<hr>
	 * <p>
	 * <code>MULPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 59 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MULPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MULSD</code> instruction<hr>
	 * <p>
	 * <code>MULSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 59 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MULSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>MULSD</code> instruction<hr>
	 * <p>
	 * <code>MULSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 59 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MULSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MULSS</code> instruction<hr>
	 * <p>
	 * <code>MULSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 59 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.MULSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>MULSS</code> instruction<hr>
	 * <p>
	 * <code>MULSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 59 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.MULSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MULX</code> instruction<hr>
	 * <p>
	 * <code>MULX r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.F2.0F38.W0 F6 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulx(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_MULX_R32_R32_RM32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>MULX</code> instruction<hr>
	 * <p>
	 * <code>MULX r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.F2.0F38.W1 F6 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void mulx(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_MULX_R64_R64_RM64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>MULX</code> instruction<hr>
	 * <p>
	 * <code>MULX r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.F2.0F38.W0 F6 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mulx(AsmRegister32 dst, AsmRegister32 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_MULX_R32_R32_RM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MULX</code> instruction<hr>
	 * <p>
	 * <code>MULX r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.F2.0F38.W1 F6 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void mulx(AsmRegister64 dst, AsmRegister64 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_MULX_R64_R64_RM64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>MWAIT</code> instruction<hr>
	 * <p>
	 * <code>MWAIT</code><p>
	 * <code>NP 0F 01 C9</code><p>
	 * <code>MONITOR</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mwait() {
		addInstruction(Instruction.create(Code.MWAIT));
	}

	/**
	 * <code>MWAITX</code> instruction<hr>
	 * <p>
	 * <code>MWAITX</code><p>
	 * <code>NP 0F 01 FB</code><p>
	 * <code>MONITORX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void mwaitx() {
		addInstruction(Instruction.create(Code.MWAITX));
	}

	/**
	 * <code>NEG</code> instruction<hr>
	 * <p>
	 * <code>NEG r/m8</code><p>
	 * <code>F6 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void neg(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.NEG_RM8, dst.get()));
	}

	/**
	 * <code>NEG</code> instruction<hr>
	 * <p>
	 * <code>NEG r/m16</code><p>
	 * <code>o16 F7 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void neg(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.NEG_RM16, dst.get()));
	}

	/**
	 * <code>NEG</code> instruction<hr>
	 * <p>
	 * <code>NEG r/m32</code><p>
	 * <code>o32 F7 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void neg(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.NEG_RM32, dst.get()));
	}

	/**
	 * <code>NEG</code> instruction<hr>
	 * <p>
	 * <code>NEG r/m64</code><p>
	 * <code>o64 F7 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void neg(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.NEG_RM64, dst.get()));
	}

	/**
	 * <code>NEG</code> instruction<hr>
	 * <p>
	 * <code>NEG r/m64</code><p>
	 * <code>o64 F7 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>NEG r/m32</code><p>
	 * <code>o32 F7 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>NEG r/m16</code><p>
	 * <code>o16 F7 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>NEG r/m8</code><p>
	 * <code>F6 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void neg(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.NEG_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.NEG_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.NEG_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.NEG_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.NEG, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>NOP</code> instruction<hr>
	 * <p>
	 * <code>NOP</code><p>
	 * <code>o32 90</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>NOP</code><p>
	 * <code>o16 90</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void nop() {
		int code;
		code = getBitness() >= 32 ? Code.NOPD : Code.NOPW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>NOP</code> instruction<hr>
	 * <p>
	 * <code>NOP r/m16</code><p>
	 * <code>o16 0F 1F /0</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void nop(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.NOP_RM16, dst.get()));
	}

	/**
	 * <code>NOP</code> instruction<hr>
	 * <p>
	 * <code>NOP r/m32</code><p>
	 * <code>o32 0F 1F /0</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void nop(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.NOP_RM32, dst.get()));
	}

	/**
	 * <code>NOP</code> instruction<hr>
	 * <p>
	 * <code>NOP r/m64</code><p>
	 * <code>o64 0F 1F /0</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void nop(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.NOP_RM64, dst.get()));
	}

	/**
	 * <code>NOP</code> instruction<hr>
	 * <p>
	 * <code>NOP r/m64</code><p>
	 * <code>o64 0F 1F /0</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>NOP r/m32</code><p>
	 * <code>o32 0F 1F /0</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>NOP r/m16</code><p>
	 * <code>o16 0F 1F /0</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void nop(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.NOP_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.NOP_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.NOP_RM16;
		} else {
			throw noOpCodeFoundFor(Mnemonic.NOP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>NOT</code> instruction<hr>
	 * <p>
	 * <code>NOT r/m8</code><p>
	 * <code>F6 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void not(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.NOT_RM8, dst.get()));
	}

	/**
	 * <code>NOT</code> instruction<hr>
	 * <p>
	 * <code>NOT r/m16</code><p>
	 * <code>o16 F7 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void not(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.NOT_RM16, dst.get()));
	}

	/**
	 * <code>NOT</code> instruction<hr>
	 * <p>
	 * <code>NOT r/m32</code><p>
	 * <code>o32 F7 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void not(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.NOT_RM32, dst.get()));
	}

	/**
	 * <code>NOT</code> instruction<hr>
	 * <p>
	 * <code>NOT r/m64</code><p>
	 * <code>o64 F7 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void not(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.NOT_RM64, dst.get()));
	}

	/**
	 * <code>NOT</code> instruction<hr>
	 * <p>
	 * <code>NOT r/m64</code><p>
	 * <code>o64 F7 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>NOT r/m32</code><p>
	 * <code>o32 F7 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>NOT r/m16</code><p>
	 * <code>o16 F7 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>NOT r/m8</code><p>
	 * <code>F6 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void not(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.NOT_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.NOT_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.NOT_RM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.NOT_RM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.NOT, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m8, r8</code><p>
	 * <code>08 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.OR_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m8, r8</code><p>
	 * <code>08 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.OR_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m16, r16</code><p>
	 * <code>o16 09 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.OR_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m16, r16</code><p>
	 * <code>o16 09 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.OR_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m32, r32</code><p>
	 * <code>o32 09 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.OR_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m32, r32</code><p>
	 * <code>o32 09 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.OR_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m64, r64</code><p>
	 * <code>o64 09 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void or(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.OR_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m64, r64</code><p>
	 * <code>o64 09 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void or(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.OR_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r8, r/m8</code><p>
	 * <code>0A /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.OR_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r16, r/m16</code><p>
	 * <code>o16 0B /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.OR_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r32, r/m32</code><p>
	 * <code>o32 0B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.OR_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r64, r/m64</code><p>
	 * <code>o64 0B /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void or(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.OR_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR AL, imm8</code><p>
	 * <code>0C ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m8, imm8</code><p>
	 * <code>80 /1 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.OR_AL_IMM8 : Code.OR_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR AX, imm16</code><p>
	 * <code>o16 0D iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m16, imm16</code><p>
	 * <code>o16 81 /1 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m16, imm8</code><p>
	 * <code>o16 83 /1 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.OR_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.OR_RM16_IMM8 : Code.OR_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR EAX, imm32</code><p>
	 * <code>o32 0D id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m32, imm32</code><p>
	 * <code>o32 81 /1 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m32, imm8</code><p>
	 * <code>o32 83 /1 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.OR_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.OR_RM32_IMM8 : Code.OR_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR RAX, imm32</code><p>
	 * <code>o64 0D id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>OR r/m64, imm32</code><p>
	 * <code>o64 81 /1 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>OR r/m64, imm8</code><p>
	 * <code>o64 83 /1 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void or(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.OR_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.OR_RM64_IMM8 : Code.OR_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>OR</code> instruction<hr>
	 * <p>
	 * <code>OR r/m64, imm32</code><p>
	 * <code>o64 81 /1 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>OR r/m64, imm8</code><p>
	 * <code>o64 83 /1 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>OR r/m32, imm32</code><p>
	 * <code>o32 81 /1 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m32, imm8</code><p>
	 * <code>o32 83 /1 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m16, imm16</code><p>
	 * <code>o16 81 /1 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m16, imm8</code><p>
	 * <code>o16 83 /1 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>OR r/m8, imm8</code><p>
	 * <code>80 /1 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void or(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.OR_RM64_IMM8 : Code.OR_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.OR_RM32_IMM8 : Code.OR_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.OR_RM16_IMM8 : Code.OR_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.OR_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.OR, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ORPD</code> instruction<hr>
	 * <p>
	 * <code>ORPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 56 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void orpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ORPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ORPD</code> instruction<hr>
	 * <p>
	 * <code>ORPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 56 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void orpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ORPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>ORPS</code> instruction<hr>
	 * <p>
	 * <code>ORPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 56 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void orps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.ORPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>ORPS</code> instruction<hr>
	 * <p>
	 * <code>ORPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 56 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void orps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.ORPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>OUT</code> instruction<hr>
	 * <p>
	 * <code>OUT DX, AL</code><p>
	 * <code>EE</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void out(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.OUT_DX_AL, dst.get(), src.get()));
	}

	/**
	 * <code>OUT</code> instruction<hr>
	 * <p>
	 * <code>OUT imm8, AL</code><p>
	 * <code>E6 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void out(int imm, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.OUT_IMM8_AL, imm, src.get()));
	}

	/**
	 * <code>OUT</code> instruction<hr>
	 * <p>
	 * <code>OUT DX, AX</code><p>
	 * <code>o16 EF</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void out(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.OUT_DX_AX, dst.get(), src.get()));
	}

	/**
	 * <code>OUT</code> instruction<hr>
	 * <p>
	 * <code>OUT imm8, AX</code><p>
	 * <code>o16 E7 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void out(int imm, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.OUT_IMM8_AX, imm, src.get()));
	}

	/**
	 * <code>OUT</code> instruction<hr>
	 * <p>
	 * <code>OUT DX, EAX</code><p>
	 * <code>o32 EF</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void out(AsmRegister16 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.OUT_DX_EAX, dst.get(), src.get()));
	}

	/**
	 * <code>OUT</code> instruction<hr>
	 * <p>
	 * <code>OUT imm8, EAX</code><p>
	 * <code>o32 E7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void out(int imm, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.OUT_IMM8_EAX, imm, src.get()));
	}

	/**
	 * <code>OUTSB</code> instruction<hr>
	 * <p>
	 * <code>OUTSB</code><p>
	 * <code>6E</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void outsb() {
		addInstruction(Instruction.createOutsb(getBitness()));
	}

	/**
	 * <code>OUTSD</code> instruction<hr>
	 * <p>
	 * <code>OUTSD</code><p>
	 * <code>o32 6F</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void outsd() {
		addInstruction(Instruction.createOutsd(getBitness()));
	}

	/**
	 * <code>OUTSW</code> instruction<hr>
	 * <p>
	 * <code>OUTSW</code><p>
	 * <code>o16 6F</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void outsw() {
		addInstruction(Instruction.createOutsw(getBitness()));
	}

	/**
	 * <code>PABSB</code> instruction<hr>
	 * <p>
	 * <code>PABSB mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 1C /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PABSB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PABSB</code> instruction<hr>
	 * <p>
	 * <code>PABSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 1C /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PABSB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PABSB</code> instruction<hr>
	 * <p>
	 * <code>PABSB mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 1C /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PABSB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PABSB</code> instruction<hr>
	 * <p>
	 * <code>PABSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 1C /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PABSB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PABSD</code> instruction<hr>
	 * <p>
	 * <code>PABSD mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 1E /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PABSD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PABSD</code> instruction<hr>
	 * <p>
	 * <code>PABSD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 1E /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PABSD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PABSD</code> instruction<hr>
	 * <p>
	 * <code>PABSD mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 1E /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PABSD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PABSD</code> instruction<hr>
	 * <p>
	 * <code>PABSD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 1E /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PABSD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PABSW</code> instruction<hr>
	 * <p>
	 * <code>PABSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 1D /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PABSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PABSW</code> instruction<hr>
	 * <p>
	 * <code>PABSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 1D /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PABSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PABSW</code> instruction<hr>
	 * <p>
	 * <code>PABSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 1D /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PABSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PABSW</code> instruction<hr>
	 * <p>
	 * <code>PABSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 1D /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pabsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PABSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>PACKSSDW mm1, mm2/m64</code><p>
	 * <code>NP 0F 6B /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packssdw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PACKSSDW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>PACKSSDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packssdw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PACKSSDW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>PACKSSDW mm1, mm2/m64</code><p>
	 * <code>NP 0F 6B /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packssdw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PACKSSDW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>PACKSSDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6B /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packssdw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PACKSSDW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKSSWB mm1, mm2/m64</code><p>
	 * <code>NP 0F 63 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packsswb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PACKSSWB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKSSWB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 63 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packsswb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PACKSSWB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKSSWB mm1, mm2/m64</code><p>
	 * <code>NP 0F 63 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packsswb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PACKSSWB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKSSWB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 63 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packsswb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PACKSSWB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>PACKUSDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 2B /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packusdw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PACKUSDW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>PACKUSDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 2B /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packusdw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PACKUSDW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKUSWB mm, mm/m64</code><p>
	 * <code>NP 0F 67 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packuswb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PACKUSWB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKUSWB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 67 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packuswb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PACKUSWB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKUSWB mm, mm/m64</code><p>
	 * <code>NP 0F 67 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packuswb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PACKUSWB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>PACKUSWB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 67 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void packuswb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PACKUSWB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDB</code> instruction<hr>
	 * <p>
	 * <code>PADDB mm, mm/m64</code><p>
	 * <code>NP 0F FC /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDB</code> instruction<hr>
	 * <p>
	 * <code>PADDB xmm1, xmm2/m128</code><p>
	 * <code>66 0F FC /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDB</code> instruction<hr>
	 * <p>
	 * <code>PADDB mm, mm/m64</code><p>
	 * <code>NP 0F FC /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDB</code> instruction<hr>
	 * <p>
	 * <code>PADDB xmm1, xmm2/m128</code><p>
	 * <code>66 0F FC /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDD</code> instruction<hr>
	 * <p>
	 * <code>PADDD mm, mm/m64</code><p>
	 * <code>NP 0F FE /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDD</code> instruction<hr>
	 * <p>
	 * <code>PADDD xmm1, xmm2/m128</code><p>
	 * <code>66 0F FE /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDD</code> instruction<hr>
	 * <p>
	 * <code>PADDD mm, mm/m64</code><p>
	 * <code>NP 0F FE /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDD</code> instruction<hr>
	 * <p>
	 * <code>PADDD xmm1, xmm2/m128</code><p>
	 * <code>66 0F FE /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDQ</code> instruction<hr>
	 * <p>
	 * <code>PADDQ mm, mm/m64</code><p>
	 * <code>NP 0F D4 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDQ</code> instruction<hr>
	 * <p>
	 * <code>PADDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F D4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDQ</code> instruction<hr>
	 * <p>
	 * <code>PADDQ mm, mm/m64</code><p>
	 * <code>NP 0F D4 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDQ</code> instruction<hr>
	 * <p>
	 * <code>PADDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F D4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDSB</code> instruction<hr>
	 * <p>
	 * <code>PADDSB mm, mm/m64</code><p>
	 * <code>NP 0F EC /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDSB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDSB</code> instruction<hr>
	 * <p>
	 * <code>PADDSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F EC /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDSB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDSB</code> instruction<hr>
	 * <p>
	 * <code>PADDSB mm, mm/m64</code><p>
	 * <code>NP 0F EC /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDSB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDSB</code> instruction<hr>
	 * <p>
	 * <code>PADDSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F EC /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDSB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDSIW</code> instruction<hr>
	 * <p>
	 * <code>PADDSIW mm, mm/m64</code><p>
	 * <code>0F 51 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void paddsiw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDSIW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDSIW</code> instruction<hr>
	 * <p>
	 * <code>PADDSIW mm, mm/m64</code><p>
	 * <code>0F 51 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void paddsiw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDSIW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDSW</code> instruction<hr>
	 * <p>
	 * <code>PADDSW mm, mm/m64</code><p>
	 * <code>NP 0F ED /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDSW</code> instruction<hr>
	 * <p>
	 * <code>PADDSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F ED /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDSW</code> instruction<hr>
	 * <p>
	 * <code>PADDSW mm, mm/m64</code><p>
	 * <code>NP 0F ED /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDSW</code> instruction<hr>
	 * <p>
	 * <code>PADDSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F ED /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDUSB</code> instruction<hr>
	 * <p>
	 * <code>PADDUSB mm, mm/m64</code><p>
	 * <code>NP 0F DC /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDUSB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDUSB</code> instruction<hr>
	 * <p>
	 * <code>PADDUSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F DC /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDUSB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDUSB</code> instruction<hr>
	 * <p>
	 * <code>PADDUSB mm, mm/m64</code><p>
	 * <code>NP 0F DC /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDUSB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDUSB</code> instruction<hr>
	 * <p>
	 * <code>PADDUSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F DC /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDUSB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDUSW</code> instruction<hr>
	 * <p>
	 * <code>PADDUSW mm, mm/m64</code><p>
	 * <code>NP 0F DD /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDUSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDUSW</code> instruction<hr>
	 * <p>
	 * <code>PADDUSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F DD /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDUSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDUSW</code> instruction<hr>
	 * <p>
	 * <code>PADDUSW mm, mm/m64</code><p>
	 * <code>NP 0F DD /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDUSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDUSW</code> instruction<hr>
	 * <p>
	 * <code>PADDUSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F DD /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddusw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDUSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDW</code> instruction<hr>
	 * <p>
	 * <code>PADDW mm, mm/m64</code><p>
	 * <code>NP 0F FD /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PADDW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PADDW</code> instruction<hr>
	 * <p>
	 * <code>PADDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F FD /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PADDW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PADDW</code> instruction<hr>
	 * <p>
	 * <code>PADDW mm, mm/m64</code><p>
	 * <code>NP 0F FD /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PADDW</code> instruction<hr>
	 * <p>
	 * <code>PADDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F FD /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void paddw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PADDW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PALIGNR</code> instruction<hr>
	 * <p>
	 * <code>PALIGNR mm1, mm2/m64, imm8</code><p>
	 * <code>NP 0F 3A 0F /r ib</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void palignr(AsmRegisterMM dst, AsmRegisterMM src1, int imm) {
		addInstruction(Instruction.create(Code.PALIGNR_MM_MMM64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PALIGNR</code> instruction<hr>
	 * <p>
	 * <code>PALIGNR xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0F /r ib</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void palignr(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PALIGNR_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PALIGNR</code> instruction<hr>
	 * <p>
	 * <code>PALIGNR mm1, mm2/m64, imm8</code><p>
	 * <code>NP 0F 3A 0F /r ib</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void palignr(AsmRegisterMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PALIGNR_MM_MMM64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PALIGNR</code> instruction<hr>
	 * <p>
	 * <code>PALIGNR xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0F /r ib</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void palignr(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PALIGNR_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PAND</code> instruction<hr>
	 * <p>
	 * <code>PAND mm, mm/m64</code><p>
	 * <code>NP 0F DB /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pand(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PAND_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PAND</code> instruction<hr>
	 * <p>
	 * <code>PAND xmm1, xmm2/m128</code><p>
	 * <code>66 0F DB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pand(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PAND_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PAND</code> instruction<hr>
	 * <p>
	 * <code>PAND mm, mm/m64</code><p>
	 * <code>NP 0F DB /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pand(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PAND_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PAND</code> instruction<hr>
	 * <p>
	 * <code>PAND xmm1, xmm2/m128</code><p>
	 * <code>66 0F DB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pand(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PAND_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PANDN</code> instruction<hr>
	 * <p>
	 * <code>PANDN mm, mm/m64</code><p>
	 * <code>NP 0F DF /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pandn(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PANDN_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PANDN</code> instruction<hr>
	 * <p>
	 * <code>PANDN xmm1, xmm2/m128</code><p>
	 * <code>66 0F DF /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pandn(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PANDN_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PANDN</code> instruction<hr>
	 * <p>
	 * <code>PANDN mm, mm/m64</code><p>
	 * <code>NP 0F DF /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pandn(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PANDN_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PANDN</code> instruction<hr>
	 * <p>
	 * <code>PANDN xmm1, xmm2/m128</code><p>
	 * <code>66 0F DF /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pandn(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PANDN_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PAUSE</code> instruction<hr>
	 * <p>
	 * <code>PAUSE</code><p>
	 * <code>F3 90</code><p>
	 * <code>Pentium 4 or later</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pause() {
		addInstruction(Instruction.create(Code.PAUSE));
	}

	/**
	 * <code>PAVEB</code> instruction<hr>
	 * <p>
	 * <code>PAVEB mm, mm/m64</code><p>
	 * <code>0F 50 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void paveb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PAVEB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PAVEB</code> instruction<hr>
	 * <p>
	 * <code>PAVEB mm, mm/m64</code><p>
	 * <code>0F 50 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void paveb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PAVEB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PAVGB</code> instruction<hr>
	 * <p>
	 * <code>PAVGB mm1, mm2/m64</code><p>
	 * <code>NP 0F E0 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PAVGB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PAVGB</code> instruction<hr>
	 * <p>
	 * <code>PAVGB xmm1, xmm2/m128</code><p>
	 * <code>66 0F E0 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PAVGB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PAVGB</code> instruction<hr>
	 * <p>
	 * <code>PAVGB mm1, mm2/m64</code><p>
	 * <code>NP 0F E0 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PAVGB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PAVGB</code> instruction<hr>
	 * <p>
	 * <code>PAVGB xmm1, xmm2/m128</code><p>
	 * <code>66 0F E0 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PAVGB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PAVGUSB</code> instruction<hr>
	 * <p>
	 * <code>PAVGUSB mm, mm/m64</code><p>
	 * <code>0F 0F /r BF</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgusb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PAVGUSB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PAVGUSB</code> instruction<hr>
	 * <p>
	 * <code>PAVGUSB mm, mm/m64</code><p>
	 * <code>0F 0F /r BF</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgusb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PAVGUSB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PAVGW</code> instruction<hr>
	 * <p>
	 * <code>PAVGW mm1, mm2/m64</code><p>
	 * <code>NP 0F E3 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PAVGW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PAVGW</code> instruction<hr>
	 * <p>
	 * <code>PAVGW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PAVGW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PAVGW</code> instruction<hr>
	 * <p>
	 * <code>PAVGW mm1, mm2/m64</code><p>
	 * <code>NP 0F E3 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PAVGW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PAVGW</code> instruction<hr>
	 * <p>
	 * <code>PAVGW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pavgw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PAVGW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PBLENDVB</code> instruction<hr>
	 * <p>
	 * <code>PBLENDVB xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>66 0F 38 10 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pblendvb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PBLENDVB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PBLENDVB</code> instruction<hr>
	 * <p>
	 * <code>PBLENDVB xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>66 0F 38 10 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pblendvb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PBLENDVB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PBLENDW</code> instruction<hr>
	 * <p>
	 * <code>PBLENDW xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0E /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pblendw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PBLENDW_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PBLENDW</code> instruction<hr>
	 * <p>
	 * <code>PBLENDW xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 0E /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pblendw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PBLENDW_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmulhqhqdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		pclmulqdq(dst, src, 17);
	}

	/**
	 * <code>PCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmulhqhqdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		pclmulqdq(dst, src, 17);
	}

	/**
	 * <code>PCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmulhqlqdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		pclmulqdq(dst, src, 1);
	}

	/**
	 * <code>PCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmulhqlqdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		pclmulqdq(dst, src, 1);
	}

	/**
	 * <code>PCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmullqhqdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		pclmulqdq(dst, src, 16);
	}

	/**
	 * <code>PCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmullqhqdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		pclmulqdq(dst, src, 16);
	}

	/**
	 * <code>PCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmullqlqdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		pclmulqdq(dst, src, 0);
	}

	/**
	 * <code>PCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmullqlqdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		pclmulqdq(dst, src, 0);
	}

	/**
	 * <code>PCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmulqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>PCLMULQDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 44 /r ib</code><p>
	 * <code>PCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pclmulqdq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQB mm, mm/m64</code><p>
	 * <code>NP 0F 74 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PCMPEQB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 74 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPEQB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQB mm, mm/m64</code><p>
	 * <code>NP 0F 74 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPEQB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 74 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPEQB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQD mm, mm/m64</code><p>
	 * <code>NP 0F 76 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PCMPEQD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 76 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPEQD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQD mm, mm/m64</code><p>
	 * <code>NP 0F 76 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPEQD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 76 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPEQD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 29 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPEQQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 29 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPEQQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQW mm, mm/m64</code><p>
	 * <code>NP 0F 75 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PCMPEQW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 75 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPEQW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQW mm, mm/m64</code><p>
	 * <code>NP 0F 75 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPEQW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>PCMPEQW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 75 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpeqw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPEQW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPESTRI</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 61 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpestri(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRI_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PCMPESTRI</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 61 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpestri(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRI_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCMPESTRI64</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRI64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 o64 0F 3A 61 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code>
	 */
	public void pcmpestri64(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRI64_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PCMPESTRI64</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRI64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 o64 0F 3A 61 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code>
	 */
	public void pcmpestri64(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRI64_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCMPESTRM</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 60 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpestrm(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRM_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PCMPESTRM</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 60 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpestrm(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRM_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCMPESTRM64</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRM64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 o64 0F 3A 60 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code>
	 */
	public void pcmpestrm64(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRM64_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PCMPESTRM64</code> instruction<hr>
	 * <p>
	 * <code>PCMPESTRM64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 o64 0F 3A 60 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>64-bit</code>
	 */
	public void pcmpestrm64(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPESTRM64_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTB mm, mm/m64</code><p>
	 * <code>NP 0F 64 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PCMPGTB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 64 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPGTB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTB mm, mm/m64</code><p>
	 * <code>NP 0F 64 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPGTB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 64 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPGTB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTD mm, mm/m64</code><p>
	 * <code>NP 0F 66 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PCMPGTD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 66 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPGTD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTD mm, mm/m64</code><p>
	 * <code>NP 0F 66 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPGTD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 66 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPGTD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 37 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPGTQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 37 /r</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPGTQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTW mm, mm/m64</code><p>
	 * <code>NP 0F 65 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PCMPGTW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 65 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PCMPGTW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTW mm, mm/m64</code><p>
	 * <code>NP 0F 65 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPGTW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>PCMPGTW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 65 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpgtw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PCMPGTW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PCMPISTRI</code> instruction<hr>
	 * <p>
	 * <code>PCMPISTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 63 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpistri(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPISTRI_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PCMPISTRI</code> instruction<hr>
	 * <p>
	 * <code>PCMPISTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 63 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpistri(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPISTRI_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCMPISTRM</code> instruction<hr>
	 * <p>
	 * <code>PCMPISTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 62 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpistrm(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPISTRM_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PCMPISTRM</code> instruction<hr>
	 * <p>
	 * <code>PCMPISTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 62 /r ib</code><p>
	 * <code>SSE4.2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcmpistrm(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PCMPISTRM_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PCOMMIT</code> instruction<hr>
	 * <p>
	 * <code>PCOMMIT</code><p>
	 * <code>66 0F AE F8</code><p>
	 * <code>PCOMMIT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pcommit() {
		addInstruction(Instruction.create(Code.PCOMMIT));
	}

	/**
	 * <code>PCONFIG</code> instruction<hr>
	 * <p>
	 * <code>PCONFIG</code><p>
	 * <code>NP 0F 01 C5</code><p>
	 * <code>PCONFIG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pconfig() {
		addInstruction(Instruction.create(Code.PCONFIG));
	}

	/**
	 * <code>PDEP</code> instruction<hr>
	 * <p>
	 * <code>PDEP r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.F2.0F38.W0 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pdep(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_PDEP_R32_R32_RM32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>PDEP</code> instruction<hr>
	 * <p>
	 * <code>PDEP r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.F2.0F38.W1 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void pdep(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_PDEP_R64_R64_RM64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>PDEP</code> instruction<hr>
	 * <p>
	 * <code>PDEP r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.F2.0F38.W0 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pdep(AsmRegister32 dst, AsmRegister32 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_PDEP_R32_R32_RM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PDEP</code> instruction<hr>
	 * <p>
	 * <code>PDEP r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.F2.0F38.W1 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void pdep(AsmRegister64 dst, AsmRegister64 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_PDEP_R64_R64_RM64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PDISTIB</code> instruction<hr>
	 * <p>
	 * <code>PDISTIB mm, m64</code><p>
	 * <code>0F 54 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pdistib(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PDISTIB_MM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PEXT</code> instruction<hr>
	 * <p>
	 * <code>PEXT r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.F3.0F38.W0 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pext(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_PEXT_R32_R32_RM32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>PEXT</code> instruction<hr>
	 * <p>
	 * <code>PEXT r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.F3.0F38.W1 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void pext(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_PEXT_R64_R64_RM64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>PEXT</code> instruction<hr>
	 * <p>
	 * <code>PEXT r32a, r32b, r/m32</code><p>
	 * <code>VEX.LZ.F3.0F38.W0 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pext(AsmRegister32 dst, AsmRegister32 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_PEXT_R32_R32_RM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PEXT</code> instruction<hr>
	 * <p>
	 * <code>PEXT r64a, r64b, r/m64</code><p>
	 * <code>VEX.LZ.F3.0F38.W1 F5 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void pext(AsmRegister64 dst, AsmRegister64 src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_PEXT_R64_R64_RM64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PEXTRB</code> instruction<hr>
	 * <p>
	 * <code>PEXTRB r32/m8, xmm2, imm8</code><p>
	 * <code>66 0F 3A 14 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pextrb(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRB_R32M8_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRB</code> instruction<hr>
	 * <p>
	 * <code>PEXTRB r64/m8, xmm2, imm8</code><p>
	 * <code>66 o64 0F 3A 14 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>64-bit</code>
	 */
	public void pextrb(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRB_R64M8_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRB</code> instruction<hr>
	 * <p>
	 * <code>PEXTRB r32/m8, xmm2, imm8</code><p>
	 * <code>66 0F 3A 14 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pextrb(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRB_R32M8_XMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>PEXTRD</code> instruction<hr>
	 * <p>
	 * <code>PEXTRD r/m32, xmm2, imm8</code><p>
	 * <code>66 0F 3A 16 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pextrd(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRD_RM32_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRD</code> instruction<hr>
	 * <p>
	 * <code>PEXTRD r/m32, xmm2, imm8</code><p>
	 * <code>66 0F 3A 16 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pextrd(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRD_RM32_XMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>PEXTRQ</code> instruction<hr>
	 * <p>
	 * <code>PEXTRQ r/m64, xmm2, imm8</code><p>
	 * <code>66 o64 0F 3A 16 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>64-bit</code>
	 */
	public void pextrq(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRQ_RM64_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRQ</code> instruction<hr>
	 * <p>
	 * <code>PEXTRQ r/m64, xmm2, imm8</code><p>
	 * <code>66 o64 0F 3A 16 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>64-bit</code>
	 */
	public void pextrq(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRQ_RM64_XMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>PEXTRW</code> instruction<hr>
	 * <p>
	 * <code>PEXTRW r32, mm, imm8</code><p>
	 * <code>NP 0F C5 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pextrw(AsmRegister32 dst, AsmRegisterMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRW_R32_MM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRW</code> instruction<hr>
	 * <p>
	 * <code>PEXTRW r64, mm, imm8</code><p>
	 * <code>NP o64 0F C5 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void pextrw(AsmRegister64 dst, AsmRegisterMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRW_R64_MM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRW</code> instruction<hr>
	 * <p>
	 * <code>PEXTRW r32, xmm, imm8</code><p>
	 * <code>66 0F C5 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pextrw(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRW_R32_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRW</code> instruction<hr>
	 * <p>
	 * <code>PEXTRW r64, xmm, imm8</code><p>
	 * <code>66 o64 0F C5 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void pextrw(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRW_R64_XMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PEXTRW</code> instruction<hr>
	 * <p>
	 * <code>PEXTRW r32/m16, xmm, imm8</code><p>
	 * <code>66 0F 3A 15 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pextrw(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PEXTRW_R32M16_XMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>PF2ID</code> instruction<hr>
	 * <p>
	 * <code>PF2ID mm, mm/m64</code><p>
	 * <code>0F 0F /r 1D</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pf2id(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PF2ID_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PF2ID</code> instruction<hr>
	 * <p>
	 * <code>PF2ID mm, mm/m64</code><p>
	 * <code>0F 0F /r 1D</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pf2id(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PF2ID_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PF2IW</code> instruction<hr>
	 * <p>
	 * <code>PF2IW mm, mm/m64</code><p>
	 * <code>0F 0F /r 1C</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pf2iw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PF2IW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PF2IW</code> instruction<hr>
	 * <p>
	 * <code>PF2IW mm, mm/m64</code><p>
	 * <code>0F 0F /r 1C</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pf2iw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PF2IW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFACC</code> instruction<hr>
	 * <p>
	 * <code>PFACC mm, mm/m64</code><p>
	 * <code>0F 0F /r AE</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfacc(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFACC_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFACC</code> instruction<hr>
	 * <p>
	 * <code>PFACC mm, mm/m64</code><p>
	 * <code>0F 0F /r AE</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfacc(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFACC_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFADD</code> instruction<hr>
	 * <p>
	 * <code>PFADD mm, mm/m64</code><p>
	 * <code>0F 0F /r 9E</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfadd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFADD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFADD</code> instruction<hr>
	 * <p>
	 * <code>PFADD mm, mm/m64</code><p>
	 * <code>0F 0F /r 9E</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfadd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFADD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFCMPEQ</code> instruction<hr>
	 * <p>
	 * <code>PFCMPEQ mm, mm/m64</code><p>
	 * <code>0F 0F /r B0</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfcmpeq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFCMPEQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFCMPEQ</code> instruction<hr>
	 * <p>
	 * <code>PFCMPEQ mm, mm/m64</code><p>
	 * <code>0F 0F /r B0</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfcmpeq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFCMPEQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFCMPGE</code> instruction<hr>
	 * <p>
	 * <code>PFCMPGE mm, mm/m64</code><p>
	 * <code>0F 0F /r 90</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfcmpge(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFCMPGE_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFCMPGE</code> instruction<hr>
	 * <p>
	 * <code>PFCMPGE mm, mm/m64</code><p>
	 * <code>0F 0F /r 90</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfcmpge(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFCMPGE_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFCMPGT</code> instruction<hr>
	 * <p>
	 * <code>PFCMPGT mm, mm/m64</code><p>
	 * <code>0F 0F /r A0</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfcmpgt(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFCMPGT_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFCMPGT</code> instruction<hr>
	 * <p>
	 * <code>PFCMPGT mm, mm/m64</code><p>
	 * <code>0F 0F /r A0</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfcmpgt(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFCMPGT_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFMAX</code> instruction<hr>
	 * <p>
	 * <code>PFMAX mm, mm/m64</code><p>
	 * <code>0F 0F /r A4</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfmax(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFMAX_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFMAX</code> instruction<hr>
	 * <p>
	 * <code>PFMAX mm, mm/m64</code><p>
	 * <code>0F 0F /r A4</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfmax(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFMAX_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFMIN</code> instruction<hr>
	 * <p>
	 * <code>PFMIN mm, mm/m64</code><p>
	 * <code>0F 0F /r 94</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfmin(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFMIN_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFMIN</code> instruction<hr>
	 * <p>
	 * <code>PFMIN mm, mm/m64</code><p>
	 * <code>0F 0F /r 94</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfmin(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFMIN_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFMUL</code> instruction<hr>
	 * <p>
	 * <code>PFMUL mm, mm/m64</code><p>
	 * <code>0F 0F /r B4</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfmul(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFMUL_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFMUL</code> instruction<hr>
	 * <p>
	 * <code>PFMUL mm, mm/m64</code><p>
	 * <code>0F 0F /r B4</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfmul(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFMUL_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFNACC</code> instruction<hr>
	 * <p>
	 * <code>PFNACC mm, mm/m64</code><p>
	 * <code>0F 0F /r 8A</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfnacc(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFNACC_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFNACC</code> instruction<hr>
	 * <p>
	 * <code>PFNACC mm, mm/m64</code><p>
	 * <code>0F 0F /r 8A</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfnacc(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFNACC_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFPNACC</code> instruction<hr>
	 * <p>
	 * <code>PFPNACC mm, mm/m64</code><p>
	 * <code>0F 0F /r 8E</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfpnacc(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFPNACC_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFPNACC</code> instruction<hr>
	 * <p>
	 * <code>PFPNACC mm, mm/m64</code><p>
	 * <code>0F 0F /r 8E</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfpnacc(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFPNACC_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFRCP</code> instruction<hr>
	 * <p>
	 * <code>PFRCP mm, mm/m64</code><p>
	 * <code>0F 0F /r 96</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrcp(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCP_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFRCP</code> instruction<hr>
	 * <p>
	 * <code>PFRCP mm, mm/m64</code><p>
	 * <code>0F 0F /r 96</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrcp(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCP_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFRCPIT1</code> instruction<hr>
	 * <p>
	 * <code>PFRCPIT1 mm, mm/m64</code><p>
	 * <code>0F 0F /r A6</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrcpit1(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCPIT1_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFRCPIT1</code> instruction<hr>
	 * <p>
	 * <code>PFRCPIT1 mm, mm/m64</code><p>
	 * <code>0F 0F /r A6</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrcpit1(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCPIT1_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFRCPIT2</code> instruction<hr>
	 * <p>
	 * <code>PFRCPIT2 mm, mm/m64</code><p>
	 * <code>0F 0F /r B6</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrcpit2(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCPIT2_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFRCPIT2</code> instruction<hr>
	 * <p>
	 * <code>PFRCPIT2 mm, mm/m64</code><p>
	 * <code>0F 0F /r B6</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrcpit2(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCPIT2_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFRCPV</code> instruction<hr>
	 * <p>
	 * <code>PFRCPV mm, mm/m64</code><p>
	 * <code>0F 0F /r 86</code><p>
	 * <code>AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pfrcpv(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCPV_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFRCPV</code> instruction<hr>
	 * <p>
	 * <code>PFRCPV mm, mm/m64</code><p>
	 * <code>0F 0F /r 86</code><p>
	 * <code>AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pfrcpv(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRCPV_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFRSQIT1</code> instruction<hr>
	 * <p>
	 * <code>PFRSQIT1 mm, mm/m64</code><p>
	 * <code>0F 0F /r A7</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrsqit1(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRSQIT1_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFRSQIT1</code> instruction<hr>
	 * <p>
	 * <code>PFRSQIT1 mm, mm/m64</code><p>
	 * <code>0F 0F /r A7</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrsqit1(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRSQIT1_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFRSQRT</code> instruction<hr>
	 * <p>
	 * <code>PFRSQRT mm, mm/m64</code><p>
	 * <code>0F 0F /r 97</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrsqrt(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRSQRT_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFRSQRT</code> instruction<hr>
	 * <p>
	 * <code>PFRSQRT mm, mm/m64</code><p>
	 * <code>0F 0F /r 97</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfrsqrt(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRSQRT_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFRSQRTV</code> instruction<hr>
	 * <p>
	 * <code>PFRSQRTV mm, mm/m64</code><p>
	 * <code>0F 0F /r 87</code><p>
	 * <code>AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pfrsqrtv(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRSQRTV_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFRSQRTV</code> instruction<hr>
	 * <p>
	 * <code>PFRSQRTV mm, mm/m64</code><p>
	 * <code>0F 0F /r 87</code><p>
	 * <code>AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pfrsqrtv(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFRSQRTV_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFSUB</code> instruction<hr>
	 * <p>
	 * <code>PFSUB mm, mm/m64</code><p>
	 * <code>0F 0F /r 9A</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfsub(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFSUB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFSUB</code> instruction<hr>
	 * <p>
	 * <code>PFSUB mm, mm/m64</code><p>
	 * <code>0F 0F /r 9A</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfsub(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFSUB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PFSUBR</code> instruction<hr>
	 * <p>
	 * <code>PFSUBR mm, mm/m64</code><p>
	 * <code>0F 0F /r AA</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfsubr(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PFSUBR_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PFSUBR</code> instruction<hr>
	 * <p>
	 * <code>PFSUBR mm, mm/m64</code><p>
	 * <code>0F 0F /r AA</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pfsubr(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PFSUBR_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHADDD</code> instruction<hr>
	 * <p>
	 * <code>PHADDD mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 02 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PHADDD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PHADDD</code> instruction<hr>
	 * <p>
	 * <code>PHADDD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 02 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PHADDD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PHADDD</code> instruction<hr>
	 * <p>
	 * <code>PHADDD mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 02 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHADDD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHADDD</code> instruction<hr>
	 * <p>
	 * <code>PHADDD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 02 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHADDD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHADDSW</code> instruction<hr>
	 * <p>
	 * <code>PHADDSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 03 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PHADDSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PHADDSW</code> instruction<hr>
	 * <p>
	 * <code>PHADDSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 03 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PHADDSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PHADDSW</code> instruction<hr>
	 * <p>
	 * <code>PHADDSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 03 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHADDSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHADDSW</code> instruction<hr>
	 * <p>
	 * <code>PHADDSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 03 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHADDSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHADDW</code> instruction<hr>
	 * <p>
	 * <code>PHADDW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 01 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PHADDW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PHADDW</code> instruction<hr>
	 * <p>
	 * <code>PHADDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 01 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PHADDW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PHADDW</code> instruction<hr>
	 * <p>
	 * <code>PHADDW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 01 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHADDW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHADDW</code> instruction<hr>
	 * <p>
	 * <code>PHADDW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 01 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phaddw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHADDW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHMINPOSUW</code> instruction<hr>
	 * <p>
	 * <code>PHMINPOSUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 41 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phminposuw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PHMINPOSUW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PHMINPOSUW</code> instruction<hr>
	 * <p>
	 * <code>PHMINPOSUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 41 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phminposuw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHMINPOSUW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHSUBD</code> instruction<hr>
	 * <p>
	 * <code>PHSUBD mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 06 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PHSUBD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PHSUBD</code> instruction<hr>
	 * <p>
	 * <code>PHSUBD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 06 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PHSUBD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PHSUBD</code> instruction<hr>
	 * <p>
	 * <code>PHSUBD mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 06 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHSUBD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHSUBD</code> instruction<hr>
	 * <p>
	 * <code>PHSUBD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 06 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHSUBD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 07 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PHSUBSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 07 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PHSUBSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 07 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHSUBSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 07 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHSUBSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHSUBW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 05 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PHSUBW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PHSUBW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 05 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PHSUBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PHSUBW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 05 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHSUBW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PHSUBW</code> instruction<hr>
	 * <p>
	 * <code>PHSUBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 05 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void phsubw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PHSUBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PI2FD</code> instruction<hr>
	 * <p>
	 * <code>PI2FD mm, mm/m64</code><p>
	 * <code>0F 0F /r 0D</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pi2fd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PI2FD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PI2FD</code> instruction<hr>
	 * <p>
	 * <code>PI2FD mm, mm/m64</code><p>
	 * <code>0F 0F /r 0D</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pi2fd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PI2FD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PI2FW</code> instruction<hr>
	 * <p>
	 * <code>PI2FW mm, mm/m64</code><p>
	 * <code>0F 0F /r 0C</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pi2fw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PI2FW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PI2FW</code> instruction<hr>
	 * <p>
	 * <code>PI2FW mm, mm/m64</code><p>
	 * <code>0F 0F /r 0C</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pi2fw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PI2FW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PINSRB</code> instruction<hr>
	 * <p>
	 * <code>PINSRB xmm1, r32/m8, imm8</code><p>
	 * <code>66 0F 3A 20 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrb(AsmRegisterXMM dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRB_XMM_R32M8_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRB</code> instruction<hr>
	 * <p>
	 * <code>PINSRB xmm1, r64/m8, imm8</code><p>
	 * <code>66 o64 0F 3A 20 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>64-bit</code>
	 */
	public void pinsrb(AsmRegisterXMM dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRB_XMM_R64M8_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRB</code> instruction<hr>
	 * <p>
	 * <code>PINSRB xmm1, r32/m8, imm8</code><p>
	 * <code>66 0F 3A 20 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrb(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRB_XMM_R32M8_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PINSRD</code> instruction<hr>
	 * <p>
	 * <code>PINSRD xmm1, r/m32, imm8</code><p>
	 * <code>66 0F 3A 22 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrd(AsmRegisterXMM dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRD_XMM_RM32_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRD</code> instruction<hr>
	 * <p>
	 * <code>PINSRD xmm1, r/m32, imm8</code><p>
	 * <code>66 0F 3A 22 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRD_XMM_RM32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PINSRQ</code> instruction<hr>
	 * <p>
	 * <code>PINSRQ xmm1, r/m64, imm8</code><p>
	 * <code>66 o64 0F 3A 22 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>64-bit</code>
	 */
	public void pinsrq(AsmRegisterXMM dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRQ_XMM_RM64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRQ</code> instruction<hr>
	 * <p>
	 * <code>PINSRQ xmm1, r/m64, imm8</code><p>
	 * <code>66 o64 0F 3A 22 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>64-bit</code>
	 */
	public void pinsrq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRQ_XMM_RM64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PINSRW</code> instruction<hr>
	 * <p>
	 * <code>PINSRW mm, r32/m16, imm8</code><p>
	 * <code>NP 0F C4 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrw(AsmRegisterMM dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRW_MM_R32M16_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRW</code> instruction<hr>
	 * <p>
	 * <code>PINSRW xmm, r32/m16, imm8</code><p>
	 * <code>66 0F C4 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrw(AsmRegisterXMM dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRW_XMM_R32M16_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRW</code> instruction<hr>
	 * <p>
	 * <code>PINSRW mm, r64/m16, imm8</code><p>
	 * <code>NP o64 0F C4 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void pinsrw(AsmRegisterMM dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRW_MM_R64M16_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRW</code> instruction<hr>
	 * <p>
	 * <code>PINSRW xmm, r64/m16, imm8</code><p>
	 * <code>66 o64 0F C4 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void pinsrw(AsmRegisterXMM dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRW_XMM_R64M16_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PINSRW</code> instruction<hr>
	 * <p>
	 * <code>PINSRW mm, r32/m16, imm8</code><p>
	 * <code>NP 0F C4 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrw(AsmRegisterMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRW_MM_R32M16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PINSRW</code> instruction<hr>
	 * <p>
	 * <code>PINSRW xmm, r32/m16, imm8</code><p>
	 * <code>66 0F C4 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pinsrw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PINSRW_XMM_R32M16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PMACHRIW</code> instruction<hr>
	 * <p>
	 * <code>PMACHRIW mm, m64</code><p>
	 * <code>0F 5E /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmachriw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMACHRIW_MM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>PMADDUBSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 04 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddubsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMADDUBSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>PMADDUBSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 04 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddubsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMADDUBSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>PMADDUBSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 04 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddubsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMADDUBSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>PMADDUBSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 04 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddubsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMADDUBSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMADDWD</code> instruction<hr>
	 * <p>
	 * <code>PMADDWD mm, mm/m64</code><p>
	 * <code>NP 0F F5 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddwd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMADDWD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMADDWD</code> instruction<hr>
	 * <p>
	 * <code>PMADDWD xmm1, xmm2/m128</code><p>
	 * <code>66 0F F5 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMADDWD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMADDWD</code> instruction<hr>
	 * <p>
	 * <code>PMADDWD mm, mm/m64</code><p>
	 * <code>NP 0F F5 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddwd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMADDWD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMADDWD</code> instruction<hr>
	 * <p>
	 * <code>PMADDWD xmm1, xmm2/m128</code><p>
	 * <code>66 0F F5 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaddwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMADDWD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAGW</code> instruction<hr>
	 * <p>
	 * <code>PMAGW mm, mm/m64</code><p>
	 * <code>0F 52 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmagw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMAGW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMAGW</code> instruction<hr>
	 * <p>
	 * <code>PMAGW mm, mm/m64</code><p>
	 * <code>0F 52 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmagw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAGW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXSB</code> instruction<hr>
	 * <p>
	 * <code>PMAXSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3C /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMAXSB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXSB</code> instruction<hr>
	 * <p>
	 * <code>PMAXSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3C /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXSB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXSD</code> instruction<hr>
	 * <p>
	 * <code>PMAXSD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3D /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMAXSD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXSD</code> instruction<hr>
	 * <p>
	 * <code>PMAXSD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3D /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXSD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXSW</code> instruction<hr>
	 * <p>
	 * <code>PMAXSW mm1, mm2/m64</code><p>
	 * <code>NP 0F EE /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMAXSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXSW</code> instruction<hr>
	 * <p>
	 * <code>PMAXSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F EE /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMAXSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXSW</code> instruction<hr>
	 * <p>
	 * <code>PMAXSW mm1, mm2/m64</code><p>
	 * <code>NP 0F EE /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXSW</code> instruction<hr>
	 * <p>
	 * <code>PMAXSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F EE /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXUB</code> instruction<hr>
	 * <p>
	 * <code>PMAXUB mm1, mm2/m64</code><p>
	 * <code>NP 0F DE /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxub(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMAXUB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXUB</code> instruction<hr>
	 * <p>
	 * <code>PMAXUB xmm1, xmm2/m128</code><p>
	 * <code>66 0F DE /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxub(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMAXUB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXUB</code> instruction<hr>
	 * <p>
	 * <code>PMAXUB mm1, mm2/m64</code><p>
	 * <code>NP 0F DE /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxub(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXUB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXUB</code> instruction<hr>
	 * <p>
	 * <code>PMAXUB xmm1, xmm2/m128</code><p>
	 * <code>66 0F DE /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxub(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXUB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXUD</code> instruction<hr>
	 * <p>
	 * <code>PMAXUD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3F /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxud(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMAXUD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXUD</code> instruction<hr>
	 * <p>
	 * <code>PMAXUD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3F /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxud(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXUD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMAXUW</code> instruction<hr>
	 * <p>
	 * <code>PMAXUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3E /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxuw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMAXUW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMAXUW</code> instruction<hr>
	 * <p>
	 * <code>PMAXUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3E /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmaxuw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMAXUW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINSB</code> instruction<hr>
	 * <p>
	 * <code>PMINSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 38 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMINSB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMINSB</code> instruction<hr>
	 * <p>
	 * <code>PMINSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 38 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINSB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINSD</code> instruction<hr>
	 * <p>
	 * <code>PMINSD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 39 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMINSD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMINSD</code> instruction<hr>
	 * <p>
	 * <code>PMINSD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 39 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINSD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINSW</code> instruction<hr>
	 * <p>
	 * <code>PMINSW mm1, mm2/m64</code><p>
	 * <code>NP 0F EA /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMINSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMINSW</code> instruction<hr>
	 * <p>
	 * <code>PMINSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F EA /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMINSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMINSW</code> instruction<hr>
	 * <p>
	 * <code>PMINSW mm1, mm2/m64</code><p>
	 * <code>NP 0F EA /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINSW</code> instruction<hr>
	 * <p>
	 * <code>PMINSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F EA /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINUB</code> instruction<hr>
	 * <p>
	 * <code>PMINUB mm1, mm2/m64</code><p>
	 * <code>NP 0F DA /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminub(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMINUB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMINUB</code> instruction<hr>
	 * <p>
	 * <code>PMINUB xmm1, xmm2/m128</code><p>
	 * <code>66 0F DA /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminub(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMINUB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMINUB</code> instruction<hr>
	 * <p>
	 * <code>PMINUB mm1, mm2/m64</code><p>
	 * <code>NP 0F DA /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminub(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINUB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINUB</code> instruction<hr>
	 * <p>
	 * <code>PMINUB xmm1, xmm2/m128</code><p>
	 * <code>66 0F DA /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminub(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINUB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINUD</code> instruction<hr>
	 * <p>
	 * <code>PMINUD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3B /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminud(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMINUD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMINUD</code> instruction<hr>
	 * <p>
	 * <code>PMINUD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3B /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminud(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINUD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMINUW</code> instruction<hr>
	 * <p>
	 * <code>PMINUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3A /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminuw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMINUW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMINUW</code> instruction<hr>
	 * <p>
	 * <code>PMINUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 3A /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pminuw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMINUW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>PMOVMSKB r32, mm</code><p>
	 * <code>NP 0F D7 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovmskb(AsmRegister32 dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMOVMSKB_R32_MM, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>PMOVMSKB r64, mm</code><p>
	 * <code>NP o64 0F D7 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>64-bit</code>
	 */
	public void pmovmskb(AsmRegister64 dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMOVMSKB_R64_MM, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>PMOVMSKB r32, xmm</code><p>
	 * <code>66 0F D7 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovmskb(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVMSKB_R32_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>PMOVMSKB r64, xmm</code><p>
	 * <code>66 o64 0F D7 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>64-bit</code>
	 */
	public void pmovmskb(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVMSKB_R64_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXBD xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 21 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxbd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVSXBD_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXBD xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 21 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxbd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVSXBD_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXBQ xmm1, xmm2/m16</code><p>
	 * <code>66 0F 38 22 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxbq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVSXBQ_XMM_XMMM16, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXBQ xmm1, xmm2/m16</code><p>
	 * <code>66 0F 38 22 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxbq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVSXBQ_XMM_XMMM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXBW xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 20 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVSXBW_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXBW xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 20 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVSXBW_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXDQ xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 25 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVSXDQ_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXDQ xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 25 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVSXDQ_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXWD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 23 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVSXWD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXWD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 23 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVSXWD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXWQ xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 24 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxwq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVSXWQ_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVSXWQ xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 24 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovsxwq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVSXWQ_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXBD xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 31 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxbd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVZXBD_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXBD xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 31 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxbd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVZXBD_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXBQ xmm1, xmm2/m16</code><p>
	 * <code>66 0F 38 32 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxbq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVZXBQ_XMM_XMMM16, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXBQ xmm1, xmm2/m16</code><p>
	 * <code>66 0F 38 32 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxbq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVZXBQ_XMM_XMMM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXBW xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 30 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVZXBW_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXBW xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 30 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVZXBW_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXDQ xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 35 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVZXDQ_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXDQ xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 35 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVZXDQ_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXWD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 33 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVZXWD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXWD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 38 33 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVZXWD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXWQ xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 34 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxwq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMOVZXWQ_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>PMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>PMOVZXWQ xmm1, xmm2/m32</code><p>
	 * <code>66 0F 38 34 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmovzxwq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMOVZXWQ_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULDQ</code> instruction<hr>
	 * <p>
	 * <code>PMULDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 28 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmuldq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMULDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMULDQ</code> instruction<hr>
	 * <p>
	 * <code>PMULDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 28 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmuldq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHRIW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRIW mm, mm/m64</code><p>
	 * <code>0F 5D /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmulhriw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMULHRIW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHRIW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRIW mm, mm/m64</code><p>
	 * <code>0F 5D /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmulhriw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHRIW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 0B /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhrsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMULHRSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 0B /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhrsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMULHRSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRSW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 0B /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhrsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHRSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 0B /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhrsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHRSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHRW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRW mm, mm/m64</code><p>
	 * <code>0F 0F /r B7</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhrw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PMULHRW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHRW</code> instruction<hr>
	 * <p>
	 * <code>PMULHRW mm, mm/m64</code><p>
	 * <code>0F 0F /r B7</code><p>
	 * <code>3DNOW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhrw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PMULHRW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHRW_CYRIX</code> instruction<hr>
	 * <p>
	 * <code>PMULHRW mm, mm/m64</code><p>
	 * <code>0F 59 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmulhrw_cyrix(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMULHRW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHRW_CYRIX</code> instruction<hr>
	 * <p>
	 * <code>PMULHRW mm, mm/m64</code><p>
	 * <code>0F 59 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmulhrw_cyrix(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHRW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHUW</code> instruction<hr>
	 * <p>
	 * <code>PMULHUW mm1, mm2/m64</code><p>
	 * <code>NP 0F E4 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhuw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMULHUW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHUW</code> instruction<hr>
	 * <p>
	 * <code>PMULHUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhuw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMULHUW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHUW</code> instruction<hr>
	 * <p>
	 * <code>PMULHUW mm1, mm2/m64</code><p>
	 * <code>NP 0F E4 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhuw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHUW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHUW</code> instruction<hr>
	 * <p>
	 * <code>PMULHUW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhuw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHUW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHW</code> instruction<hr>
	 * <p>
	 * <code>PMULHW mm, mm/m64</code><p>
	 * <code>NP 0F E5 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMULHW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHW</code> instruction<hr>
	 * <p>
	 * <code>PMULHW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E5 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMULHW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMULHW</code> instruction<hr>
	 * <p>
	 * <code>PMULHW mm, mm/m64</code><p>
	 * <code>NP 0F E5 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULHW</code> instruction<hr>
	 * <p>
	 * <code>PMULHW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E5 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulhw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULHW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULLD</code> instruction<hr>
	 * <p>
	 * <code>PMULLD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 40 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulld(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMULLD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMULLD</code> instruction<hr>
	 * <p>
	 * <code>PMULLD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 40 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmulld(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULLD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULLW</code> instruction<hr>
	 * <p>
	 * <code>PMULLW mm, mm/m64</code><p>
	 * <code>NP 0F D5 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmullw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMULLW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULLW</code> instruction<hr>
	 * <p>
	 * <code>PMULLW xmm1, xmm2/m128</code><p>
	 * <code>66 0F D5 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmullw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMULLW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMULLW</code> instruction<hr>
	 * <p>
	 * <code>PMULLW mm, mm/m64</code><p>
	 * <code>NP 0F D5 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmullw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULLW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULLW</code> instruction<hr>
	 * <p>
	 * <code>PMULLW xmm1, xmm2/m128</code><p>
	 * <code>66 0F D5 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmullw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULLW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>PMULUDQ mm1, mm2/m64</code><p>
	 * <code>NP 0F F4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmuludq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PMULUDQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>PMULUDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F F4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmuludq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PMULUDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>PMULUDQ mm1, mm2/m64</code><p>
	 * <code>NP 0F F4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmuludq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULUDQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>PMULUDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F F4 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pmuludq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMULUDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMVGEZB</code> instruction<hr>
	 * <p>
	 * <code>PMVGEZB mm, m64</code><p>
	 * <code>0F 5C /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmvgezb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMVGEZB_MM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMVLZB</code> instruction<hr>
	 * <p>
	 * <code>PMVLZB mm, m64</code><p>
	 * <code>0F 5B /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmvlzb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMVLZB_MM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMVNZB</code> instruction<hr>
	 * <p>
	 * <code>PMVNZB mm, m64</code><p>
	 * <code>0F 5A /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmvnzb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMVNZB_MM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PMVZB</code> instruction<hr>
	 * <p>
	 * <code>PMVZB mm, m64</code><p>
	 * <code>0F 58 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pmvzb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PMVZB_MM_M64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>POP</code> instruction<hr>
	 * <p>
	 * <code>POP r16</code><p>
	 * <code>o16 58+rw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pop(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.POP_R16, dst.get()));
	}

	/**
	 * <code>POP</code> instruction<hr>
	 * <p>
	 * <code>POP r32</code><p>
	 * <code>o32 58+rd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pop(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.POP_R32, dst.get()));
	}

	/**
	 * <code>POP</code> instruction<hr>
	 * <p>
	 * <code>POP r64</code><p>
	 * <code>o64 58+ro</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void pop(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.POP_R64, dst.get()));
	}

	/**
	 * <code>POP</code> instruction<hr>
	 * <p>
	 * <code>POP FS</code><p>
	 * <code>o64 0F A1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>POP GS</code><p>
	 * <code>o64 0F A9</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>POP ES</code><p>
	 * <code>o32 07</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP SS</code><p>
	 * <code>o32 17</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP DS</code><p>
	 * <code>o32 1F</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP FS</code><p>
	 * <code>o32 0F A1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP GS</code><p>
	 * <code>o32 0F A9</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP ES</code><p>
	 * <code>o16 07</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP SS</code><p>
	 * <code>o16 17</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP DS</code><p>
	 * <code>o16 1F</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP FS</code><p>
	 * <code>o16 0F A1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>POP GS</code><p>
	 * <code>o16 0F A9</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pop(AsmRegisterSegment dst) {
		int code;
		if (dst.getRegister() == Register.FS) {
			if (getBitness() == 64) {
				code = Code.POPQ_FS;
			} else code = getBitness() >= 32 ? Code.POPD_FS : Code.POPW_FS;
		} else if (dst.getRegister() == Register.GS) {
			if (getBitness() == 64) {
				code = Code.POPQ_GS;
			} else code = getBitness() >= 32 ? Code.POPD_GS : Code.POPW_GS;
		} else if (dst.getRegister() == Register.ES) {
			code = getBitness() >= 32 ? Code.POPD_ES : Code.POPW_ES;
		} else if (dst.getRegister() == Register.SS) {
			code = getBitness() >= 32 ? Code.POPD_SS : Code.POPW_SS;
		} else if (dst.getRegister() == Register.DS) {
			code = getBitness() >= 32 ? Code.POPD_DS : Code.POPW_DS;
		} else {
			throw noOpCodeFoundFor(Mnemonic.POP, dst);
		}
		addInstruction(Instruction.create(code, dst.get()));
	}

	/**
	 * <code>POP</code> instruction<hr>
	 * <p>
	 * <code>POP r/m64</code><p>
	 * <code>o64 8F /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>POP r/m32</code><p>
	 * <code>o32 8F /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>POP r/m16</code><p>
	 * <code>o16 8F /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pop(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.POP_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.POP_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.POP_RM16;
		} else {
			throw noOpCodeFoundFor(Mnemonic.POP, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>POPA</code> instruction<hr>
	 * <p>
	 * <code>POPA</code><p>
	 * <code>o16 61</code><p>
	 * <code>186+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void popa() {
		addInstruction(Instruction.create(Code.POPAW));
	}

	/**
	 * <code>POPAD</code> instruction<hr>
	 * <p>
	 * <code>POPAD</code><p>
	 * <code>o32 61</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void popad() {
		addInstruction(Instruction.create(Code.POPAD));
	}

	/**
	 * <code>POPCNT</code> instruction<hr>
	 * <p>
	 * <code>POPCNT r16, r/m16</code><p>
	 * <code>o16 F3 0F B8 /r</code><p>
	 * <code>POPCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void popcnt(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.POPCNT_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>POPCNT</code> instruction<hr>
	 * <p>
	 * <code>POPCNT r32, r/m32</code><p>
	 * <code>o32 F3 0F B8 /r</code><p>
	 * <code>POPCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void popcnt(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.POPCNT_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>POPCNT</code> instruction<hr>
	 * <p>
	 * <code>POPCNT r64, r/m64</code><p>
	 * <code>F3 o64 0F B8 /r</code><p>
	 * <code>POPCNT</code><p>
	 * <code>64-bit</code>
	 */
	public void popcnt(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.POPCNT_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>POPCNT</code> instruction<hr>
	 * <p>
	 * <code>POPCNT r16, r/m16</code><p>
	 * <code>o16 F3 0F B8 /r</code><p>
	 * <code>POPCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void popcnt(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.POPCNT_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>POPCNT</code> instruction<hr>
	 * <p>
	 * <code>POPCNT r32, r/m32</code><p>
	 * <code>o32 F3 0F B8 /r</code><p>
	 * <code>POPCNT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void popcnt(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.POPCNT_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>POPCNT</code> instruction<hr>
	 * <p>
	 * <code>POPCNT r64, r/m64</code><p>
	 * <code>F3 o64 0F B8 /r</code><p>
	 * <code>POPCNT</code><p>
	 * <code>64-bit</code>
	 */
	public void popcnt(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.POPCNT_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>POPF</code> instruction<hr>
	 * <p>
	 * <code>POPF</code><p>
	 * <code>o16 9D</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void popf() {
		addInstruction(Instruction.create(Code.POPFW));
	}

	/**
	 * <code>POPFD</code> instruction<hr>
	 * <p>
	 * <code>POPFD</code><p>
	 * <code>o32 9D</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void popfd() {
		addInstruction(Instruction.create(Code.POPFD));
	}

	/**
	 * <code>POPFQ</code> instruction<hr>
	 * <p>
	 * <code>POPFQ</code><p>
	 * <code>o64 9D</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void popfq() {
		addInstruction(Instruction.create(Code.POPFQ));
	}

	/**
	 * <code>POR</code> instruction<hr>
	 * <p>
	 * <code>POR mm, mm/m64</code><p>
	 * <code>NP 0F EB /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void por(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.POR_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>POR</code> instruction<hr>
	 * <p>
	 * <code>POR xmm1, xmm2/m128</code><p>
	 * <code>66 0F EB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void por(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.POR_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>POR</code> instruction<hr>
	 * <p>
	 * <code>POR mm, mm/m64</code><p>
	 * <code>NP 0F EB /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void por(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.POR_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>POR</code> instruction<hr>
	 * <p>
	 * <code>POR xmm1, xmm2/m128</code><p>
	 * <code>66 0F EB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void por(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.POR_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PREFETCH</code> instruction<hr>
	 * <p>
	 * <code>PREFETCH m8</code><p>
	 * <code>0F 0D /0</code><p>
	 * <code>PREFETCHW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void prefetch(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.PREFETCH_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PREFETCHNTA</code> instruction<hr>
	 * <p>
	 * <code>PREFETCHNTA m8</code><p>
	 * <code>0F 18 /0</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void prefetchnta(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.PREFETCHNTA_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PREFETCHT0</code> instruction<hr>
	 * <p>
	 * <code>PREFETCHT0 m8</code><p>
	 * <code>0F 18 /1</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void prefetcht0(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.PREFETCHT0_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PREFETCHT1</code> instruction<hr>
	 * <p>
	 * <code>PREFETCHT1 m8</code><p>
	 * <code>0F 18 /2</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void prefetcht1(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.PREFETCHT1_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PREFETCHT2</code> instruction<hr>
	 * <p>
	 * <code>PREFETCHT2 m8</code><p>
	 * <code>0F 18 /3</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void prefetcht2(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.PREFETCHT2_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PREFETCHW</code> instruction<hr>
	 * <p>
	 * <code>PREFETCHW m8</code><p>
	 * <code>0F 0D /1</code><p>
	 * <code>PREFETCHW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void prefetchw(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.PREFETCHW_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PREFETCHWT1</code> instruction<hr>
	 * <p>
	 * <code>PREFETCHWT1 m8</code><p>
	 * <code>0F 0D /2</code><p>
	 * <code>PREFETCHWT1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void prefetchwt1(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.PREFETCHWT1_M8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSADBW</code> instruction<hr>
	 * <p>
	 * <code>PSADBW mm1, mm2/m64</code><p>
	 * <code>NP 0F F6 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psadbw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSADBW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSADBW</code> instruction<hr>
	 * <p>
	 * <code>PSADBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F F6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psadbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSADBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSADBW</code> instruction<hr>
	 * <p>
	 * <code>PSADBW mm1, mm2/m64</code><p>
	 * <code>NP 0F F6 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psadbw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSADBW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSADBW</code> instruction<hr>
	 * <p>
	 * <code>PSADBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F F6 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psadbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSADBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSHUFB</code> instruction<hr>
	 * <p>
	 * <code>PSHUFB mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 00 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSHUFB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSHUFB</code> instruction<hr>
	 * <p>
	 * <code>PSHUFB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 00 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSHUFB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSHUFB</code> instruction<hr>
	 * <p>
	 * <code>PSHUFB mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 00 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSHUFB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSHUFB</code> instruction<hr>
	 * <p>
	 * <code>PSHUFB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 00 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSHUFB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSHUFD</code> instruction<hr>
	 * <p>
	 * <code>PSHUFD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 70 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PSHUFD</code> instruction<hr>
	 * <p>
	 * <code>PSHUFD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 70 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>PSHUFHW xmm1, xmm2/m128, imm8</code><p>
	 * <code>F3 0F 70 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufhw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFHW_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>PSHUFHW xmm1, xmm2/m128, imm8</code><p>
	 * <code>F3 0F 70 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufhw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFHW_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>PSHUFLW xmm1, xmm2/m128, imm8</code><p>
	 * <code>F2 0F 70 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshuflw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFLW_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>PSHUFLW xmm1, xmm2/m128, imm8</code><p>
	 * <code>F2 0F 70 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshuflw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFLW_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PSHUFW</code> instruction<hr>
	 * <p>
	 * <code>PSHUFW mm1, mm2/m64, imm8</code><p>
	 * <code>NP 0F 70 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufw(AsmRegisterMM dst, AsmRegisterMM src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFW_MM_MMM64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>PSHUFW</code> instruction<hr>
	 * <p>
	 * <code>PSHUFW mm1, mm2/m64, imm8</code><p>
	 * <code>NP 0F 70 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pshufw(AsmRegisterMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.PSHUFW_MM_MMM64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>PSIGNB</code> instruction<hr>
	 * <p>
	 * <code>PSIGNB mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 08 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSIGNB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSIGNB</code> instruction<hr>
	 * <p>
	 * <code>PSIGNB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 08 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSIGNB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSIGNB</code> instruction<hr>
	 * <p>
	 * <code>PSIGNB mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 08 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSIGNB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSIGNB</code> instruction<hr>
	 * <p>
	 * <code>PSIGNB xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 08 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSIGNB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSIGND</code> instruction<hr>
	 * <p>
	 * <code>PSIGND mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 0A /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSIGND_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSIGND</code> instruction<hr>
	 * <p>
	 * <code>PSIGND xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 0A /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSIGND_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSIGND</code> instruction<hr>
	 * <p>
	 * <code>PSIGND mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 0A /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSIGND_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSIGND</code> instruction<hr>
	 * <p>
	 * <code>PSIGND xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 0A /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSIGND_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSIGNW</code> instruction<hr>
	 * <p>
	 * <code>PSIGNW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 09 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSIGNW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSIGNW</code> instruction<hr>
	 * <p>
	 * <code>PSIGNW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 09 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSIGNW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSIGNW</code> instruction<hr>
	 * <p>
	 * <code>PSIGNW mm1, mm2/m64</code><p>
	 * <code>NP 0F 38 09 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSIGNW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSIGNW</code> instruction<hr>
	 * <p>
	 * <code>PSIGNW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 09 /r</code><p>
	 * <code>SSSE3</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psignw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSIGNW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSLLD</code> instruction<hr>
	 * <p>
	 * <code>PSLLD mm, mm/m64</code><p>
	 * <code>NP 0F F2 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pslld(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSLLD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSLLD</code> instruction<hr>
	 * <p>
	 * <code>PSLLD xmm1, xmm2/m128</code><p>
	 * <code>66 0F F2 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pslld(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSLLD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSLLD</code> instruction<hr>
	 * <p>
	 * <code>PSLLD mm, mm/m64</code><p>
	 * <code>NP 0F F2 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pslld(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSLLD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSLLD</code> instruction<hr>
	 * <p>
	 * <code>PSLLD xmm1, xmm2/m128</code><p>
	 * <code>66 0F F2 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pslld(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSLLD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSLLD</code> instruction<hr>
	 * <p>
	 * <code>PSLLD mm, imm8</code><p>
	 * <code>NP 0F 72 /6 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pslld(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSLLD_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSLLD</code> instruction<hr>
	 * <p>
	 * <code>PSLLD xmm1, imm8</code><p>
	 * <code>66 0F 72 /6 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pslld(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSLLD_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSLLDQ</code> instruction<hr>
	 * <p>
	 * <code>PSLLDQ xmm1, imm8</code><p>
	 * <code>66 0F 73 /7 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pslldq(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSLLDQ_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSLLQ</code> instruction<hr>
	 * <p>
	 * <code>PSLLQ mm, mm/m64</code><p>
	 * <code>NP 0F F3 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSLLQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSLLQ</code> instruction<hr>
	 * <p>
	 * <code>PSLLQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F F3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSLLQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSLLQ</code> instruction<hr>
	 * <p>
	 * <code>PSLLQ mm, mm/m64</code><p>
	 * <code>NP 0F F3 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSLLQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSLLQ</code> instruction<hr>
	 * <p>
	 * <code>PSLLQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F F3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSLLQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSLLQ</code> instruction<hr>
	 * <p>
	 * <code>PSLLQ mm, imm8</code><p>
	 * <code>NP 0F 73 /6 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllq(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSLLQ_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSLLQ</code> instruction<hr>
	 * <p>
	 * <code>PSLLQ xmm1, imm8</code><p>
	 * <code>66 0F 73 /6 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllq(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSLLQ_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSLLW</code> instruction<hr>
	 * <p>
	 * <code>PSLLW mm, mm/m64</code><p>
	 * <code>NP 0F F1 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSLLW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSLLW</code> instruction<hr>
	 * <p>
	 * <code>PSLLW xmm1, xmm2/m128</code><p>
	 * <code>66 0F F1 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSLLW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSLLW</code> instruction<hr>
	 * <p>
	 * <code>PSLLW mm, mm/m64</code><p>
	 * <code>NP 0F F1 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSLLW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSLLW</code> instruction<hr>
	 * <p>
	 * <code>PSLLW xmm1, xmm2/m128</code><p>
	 * <code>66 0F F1 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSLLW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSLLW</code> instruction<hr>
	 * <p>
	 * <code>PSLLW mm1, imm8</code><p>
	 * <code>NP 0F 71 /6 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllw(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSLLW_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSLLW</code> instruction<hr>
	 * <p>
	 * <code>PSLLW xmm1, imm8</code><p>
	 * <code>66 0F 71 /6 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psllw(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSLLW_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSMASH</code> instruction<hr>
	 * <p>
	 * <code>PSMASH</code><p>
	 * <code>F3 0F 01 FF</code><p>
	 * <code>SEV-SNP</code><p>
	 * <code>64-bit</code>
	 */
	public void psmash() {
		addInstruction(Instruction.create(Code.PSMASH));
	}

	/**
	 * <code>PSRAD</code> instruction<hr>
	 * <p>
	 * <code>PSRAD mm, mm/m64</code><p>
	 * <code>NP 0F E2 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrad(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSRAD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSRAD</code> instruction<hr>
	 * <p>
	 * <code>PSRAD xmm1, xmm2/m128</code><p>
	 * <code>66 0F E2 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrad(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSRAD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSRAD</code> instruction<hr>
	 * <p>
	 * <code>PSRAD mm, mm/m64</code><p>
	 * <code>NP 0F E2 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrad(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRAD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRAD</code> instruction<hr>
	 * <p>
	 * <code>PSRAD xmm1, xmm2/m128</code><p>
	 * <code>66 0F E2 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrad(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRAD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRAD</code> instruction<hr>
	 * <p>
	 * <code>PSRAD mm, imm8</code><p>
	 * <code>NP 0F 72 /4 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrad(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRAD_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRAD</code> instruction<hr>
	 * <p>
	 * <code>PSRAD xmm1, imm8</code><p>
	 * <code>66 0F 72 /4 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrad(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRAD_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRAW</code> instruction<hr>
	 * <p>
	 * <code>PSRAW mm, mm/m64</code><p>
	 * <code>NP 0F E1 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psraw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSRAW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSRAW</code> instruction<hr>
	 * <p>
	 * <code>PSRAW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E1 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psraw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSRAW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSRAW</code> instruction<hr>
	 * <p>
	 * <code>PSRAW mm, mm/m64</code><p>
	 * <code>NP 0F E1 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psraw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRAW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRAW</code> instruction<hr>
	 * <p>
	 * <code>PSRAW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E1 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psraw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRAW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRAW</code> instruction<hr>
	 * <p>
	 * <code>PSRAW mm, imm8</code><p>
	 * <code>NP 0F 71 /4 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psraw(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRAW_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRAW</code> instruction<hr>
	 * <p>
	 * <code>PSRAW xmm1, imm8</code><p>
	 * <code>66 0F 71 /4 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psraw(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRAW_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRLD</code> instruction<hr>
	 * <p>
	 * <code>PSRLD mm, mm/m64</code><p>
	 * <code>NP 0F D2 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrld(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSRLD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSRLD</code> instruction<hr>
	 * <p>
	 * <code>PSRLD xmm1, xmm2/m128</code><p>
	 * <code>66 0F D2 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrld(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSRLD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSRLD</code> instruction<hr>
	 * <p>
	 * <code>PSRLD mm, mm/m64</code><p>
	 * <code>NP 0F D2 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrld(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRLD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRLD</code> instruction<hr>
	 * <p>
	 * <code>PSRLD xmm1, xmm2/m128</code><p>
	 * <code>66 0F D2 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrld(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRLD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRLD</code> instruction<hr>
	 * <p>
	 * <code>PSRLD mm, imm8</code><p>
	 * <code>NP 0F 72 /2 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrld(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRLD_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRLD</code> instruction<hr>
	 * <p>
	 * <code>PSRLD xmm1, imm8</code><p>
	 * <code>66 0F 72 /2 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrld(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRLD_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRLDQ</code> instruction<hr>
	 * <p>
	 * <code>PSRLDQ xmm1, imm8</code><p>
	 * <code>66 0F 73 /3 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrldq(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRLDQ_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRLQ</code> instruction<hr>
	 * <p>
	 * <code>PSRLQ mm, mm/m64</code><p>
	 * <code>NP 0F D3 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSRLQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSRLQ</code> instruction<hr>
	 * <p>
	 * <code>PSRLQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F D3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSRLQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSRLQ</code> instruction<hr>
	 * <p>
	 * <code>PSRLQ mm, mm/m64</code><p>
	 * <code>NP 0F D3 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRLQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRLQ</code> instruction<hr>
	 * <p>
	 * <code>PSRLQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F D3 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRLQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRLQ</code> instruction<hr>
	 * <p>
	 * <code>PSRLQ mm, imm8</code><p>
	 * <code>NP 0F 73 /2 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlq(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRLQ_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRLQ</code> instruction<hr>
	 * <p>
	 * <code>PSRLQ xmm1, imm8</code><p>
	 * <code>66 0F 73 /2 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlq(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRLQ_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRLW</code> instruction<hr>
	 * <p>
	 * <code>PSRLW mm, mm/m64</code><p>
	 * <code>NP 0F D1 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSRLW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSRLW</code> instruction<hr>
	 * <p>
	 * <code>PSRLW xmm1, xmm2/m128</code><p>
	 * <code>66 0F D1 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSRLW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSRLW</code> instruction<hr>
	 * <p>
	 * <code>PSRLW mm, mm/m64</code><p>
	 * <code>NP 0F D1 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRLW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRLW</code> instruction<hr>
	 * <p>
	 * <code>PSRLW xmm1, xmm2/m128</code><p>
	 * <code>66 0F D1 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSRLW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSRLW</code> instruction<hr>
	 * <p>
	 * <code>PSRLW mm, imm8</code><p>
	 * <code>NP 0F 71 /2 ib</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlw(AsmRegisterMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRLW_MM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSRLW</code> instruction<hr>
	 * <p>
	 * <code>PSRLW xmm1, imm8</code><p>
	 * <code>66 0F 71 /2 ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psrlw(AsmRegisterXMM dst, int imm) {
		addInstruction(Instruction.create(Code.PSRLW_XMM_IMM8, dst.get(), imm));
	}

	/**
	 * <code>PSUBB</code> instruction<hr>
	 * <p>
	 * <code>PSUBB mm, mm/m64</code><p>
	 * <code>NP 0F F8 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBB</code> instruction<hr>
	 * <p>
	 * <code>PSUBB xmm1, xmm2/m128</code><p>
	 * <code>66 0F F8 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBB</code> instruction<hr>
	 * <p>
	 * <code>PSUBB mm, mm/m64</code><p>
	 * <code>NP 0F F8 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBB</code> instruction<hr>
	 * <p>
	 * <code>PSUBB xmm1, xmm2/m128</code><p>
	 * <code>66 0F F8 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBD</code> instruction<hr>
	 * <p>
	 * <code>PSUBD mm, mm/m64</code><p>
	 * <code>NP 0F FA /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBD</code> instruction<hr>
	 * <p>
	 * <code>PSUBD xmm1, xmm2/m128</code><p>
	 * <code>66 0F FA /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBD</code> instruction<hr>
	 * <p>
	 * <code>PSUBD mm, mm/m64</code><p>
	 * <code>NP 0F FA /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBD</code> instruction<hr>
	 * <p>
	 * <code>PSUBD xmm1, xmm2/m128</code><p>
	 * <code>66 0F FA /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBQ</code> instruction<hr>
	 * <p>
	 * <code>PSUBQ mm1, mm2/m64</code><p>
	 * <code>NP 0F FB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBQ</code> instruction<hr>
	 * <p>
	 * <code>PSUBQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F FB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBQ</code> instruction<hr>
	 * <p>
	 * <code>PSUBQ mm1, mm2/m64</code><p>
	 * <code>NP 0F FB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBQ</code> instruction<hr>
	 * <p>
	 * <code>PSUBQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F FB /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBSB mm, mm/m64</code><p>
	 * <code>NP 0F E8 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBSB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F E8 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBSB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBSB mm, mm/m64</code><p>
	 * <code>NP 0F E8 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBSB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F E8 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBSB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBSIW</code> instruction<hr>
	 * <p>
	 * <code>PSUBSIW mm, mm/m64</code><p>
	 * <code>0F 55 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void psubsiw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBSIW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBSIW</code> instruction<hr>
	 * <p>
	 * <code>PSUBSIW mm, mm/m64</code><p>
	 * <code>0F 55 /r</code><p>
	 * <code>CYRIX_EMMI</code><p>
	 * <code>16/32-bit</code>
	 */
	public void psubsiw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBSIW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBSW mm, mm/m64</code><p>
	 * <code>NP 0F E9 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E9 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBSW mm, mm/m64</code><p>
	 * <code>NP 0F E9 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F E9 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSB mm, mm/m64</code><p>
	 * <code>NP 0F D8 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusb(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBUSB_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F D8 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBUSB_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSB mm, mm/m64</code><p>
	 * <code>NP 0F D8 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusb(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBUSB_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSB xmm1, xmm2/m128</code><p>
	 * <code>66 0F D8 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBUSB_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSW mm, mm/m64</code><p>
	 * <code>NP 0F D9 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBUSW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F D9 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBUSW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSW mm, mm/m64</code><p>
	 * <code>NP 0F D9 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBUSW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>PSUBUSW xmm1, xmm2/m128</code><p>
	 * <code>66 0F D9 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubusw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBUSW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBW</code> instruction<hr>
	 * <p>
	 * <code>PSUBW mm, mm/m64</code><p>
	 * <code>NP 0F F9 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PSUBW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBW</code> instruction<hr>
	 * <p>
	 * <code>PSUBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F F9 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PSUBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PSUBW</code> instruction<hr>
	 * <p>
	 * <code>PSUBW mm, mm/m64</code><p>
	 * <code>NP 0F F9 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSUBW</code> instruction<hr>
	 * <p>
	 * <code>PSUBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F F9 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void psubw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PSUBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PSWAPD</code> instruction<hr>
	 * <p>
	 * <code>PSWAPD mm, mm/m64</code><p>
	 * <code>0F 0F /r BB</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pswapd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.D3NOW_PSWAPD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PSWAPD</code> instruction<hr>
	 * <p>
	 * <code>PSWAPD mm, mm/m64</code><p>
	 * <code>0F 0F /r BB</code><p>
	 * <code>3DNOWEXT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pswapd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.D3NOW_PSWAPD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PTEST</code> instruction<hr>
	 * <p>
	 * <code>PTEST xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 17 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ptest(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PTEST_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PTEST</code> instruction<hr>
	 * <p>
	 * <code>PTEST xmm1, xmm2/m128</code><p>
	 * <code>66 0F 38 17 /r</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ptest(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PTEST_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PTWRITE</code> instruction<hr>
	 * <p>
	 * <code>PTWRITE r/m32</code><p>
	 * <code>F3 0F AE /4</code><p>
	 * <code>PTWRITE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ptwrite(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.PTWRITE_RM32, dst.get()));
	}

	/**
	 * <code>PTWRITE</code> instruction<hr>
	 * <p>
	 * <code>PTWRITE r/m64</code><p>
	 * <code>F3 o64 0F AE /4</code><p>
	 * <code>PTWRITE</code><p>
	 * <code>64-bit</code>
	 */
	public void ptwrite(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.PTWRITE_RM64, dst.get()));
	}

	/**
	 * <code>PTWRITE</code> instruction<hr>
	 * <p>
	 * <code>PTWRITE r/m64</code><p>
	 * <code>F3 o64 0F AE /4</code><p>
	 * <code>PTWRITE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>PTWRITE r/m32</code><p>
	 * <code>F3 0F AE /4</code><p>
	 * <code>PTWRITE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ptwrite(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.PTWRITE_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.PTWRITE_RM32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.PTWRITE, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHBW mm, mm/m64</code><p>
	 * <code>NP 0F 68 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhbw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PUNPCKHBW_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 68 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKHBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHBW mm, mm/m64</code><p>
	 * <code>NP 0F 68 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhbw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKHBW_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 68 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKHBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHDQ mm, mm/m64</code><p>
	 * <code>NP 0F 6A /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhdq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PUNPCKHDQ_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKHDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHDQ mm, mm/m64</code><p>
	 * <code>NP 0F 6A /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhdq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKHDQ_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6A /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKHDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHQDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhqdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKHQDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHQDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6D /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhqdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKHQDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHWD mm, mm/m64</code><p>
	 * <code>NP 0F 69 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhwd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PUNPCKHWD_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHWD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 69 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKHWD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHWD mm, mm/m64</code><p>
	 * <code>NP 0F 69 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhwd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKHWD_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKHWD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 69 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckhwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKHWD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLBW mm, mm/m32</code><p>
	 * <code>NP 0F 60 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklbw(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PUNPCKLBW_MM_MMM32, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 60 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKLBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLBW mm, mm/m32</code><p>
	 * <code>NP 0F 60 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklbw(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKLBW_MM_MMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLBW xmm1, xmm2/m128</code><p>
	 * <code>66 0F 60 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKLBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLDQ mm, mm/m32</code><p>
	 * <code>NP 0F 62 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckldq(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PUNPCKLDQ_MM_MMM32, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 62 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckldq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKLDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLDQ mm, mm/m32</code><p>
	 * <code>NP 0F 62 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckldq(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKLDQ_MM_MMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 62 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpckldq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKLDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLQDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklqdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKLQDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLQDQ xmm1, xmm2/m128</code><p>
	 * <code>66 0F 6C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklqdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKLQDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLWD mm, mm/m32</code><p>
	 * <code>NP 0F 61 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklwd(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PUNPCKLWD_MM_MMM32, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLWD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 61 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PUNPCKLWD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLWD mm, mm/m32</code><p>
	 * <code>NP 0F 61 /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklwd(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKLWD_MM_MMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>PUNPCKLWD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 61 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void punpcklwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PUNPCKLWD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUSH</code> instruction<hr>
	 * <p>
	 * <code>PUSH r16</code><p>
	 * <code>o16 50+rw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void push(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.PUSH_R16, dst.get()));
	}

	/**
	 * <code>PUSH</code> instruction<hr>
	 * <p>
	 * <code>PUSH r32</code><p>
	 * <code>o32 50+rd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void push(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.PUSH_R32, dst.get()));
	}

	/**
	 * <code>PUSH</code> instruction<hr>
	 * <p>
	 * <code>PUSH r64</code><p>
	 * <code>o64 50+ro</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void push(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.PUSH_R64, dst.get()));
	}

	/**
	 * <code>PUSH</code> instruction<hr>
	 * <p>
	 * <code>PUSH FS</code><p>
	 * <code>o64 0F A0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>PUSH GS</code><p>
	 * <code>o64 0F A8</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>PUSH ES</code><p>
	 * <code>o32 06</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH CS</code><p>
	 * <code>o32 0E</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH SS</code><p>
	 * <code>o32 16</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH DS</code><p>
	 * <code>o32 1E</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH FS</code><p>
	 * <code>o32 0F A0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH GS</code><p>
	 * <code>o32 0F A8</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH ES</code><p>
	 * <code>o16 06</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH CS</code><p>
	 * <code>o16 0E</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH SS</code><p>
	 * <code>o16 16</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH DS</code><p>
	 * <code>o16 1E</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH FS</code><p>
	 * <code>o16 0F A0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>PUSH GS</code><p>
	 * <code>o16 0F A8</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void push(AsmRegisterSegment dst) {
		int code;
		if (dst.getRegister() == Register.FS) {
			if (getBitness() == 64) {
				code = Code.PUSHQ_FS;
			} else code = getBitness() >= 32 ? Code.PUSHD_FS : Code.PUSHW_FS;
		} else if (dst.getRegister() == Register.GS) {
			if (getBitness() == 64) {
				code = Code.PUSHQ_GS;
			} else code = getBitness() >= 32 ? Code.PUSHD_GS : Code.PUSHW_GS;
		} else if (dst.getRegister() == Register.ES) {
			code = getBitness() >= 32 ? Code.PUSHD_ES : Code.PUSHW_ES;
		} else if (dst.getRegister() == Register.CS) {
			code = getBitness() >= 32 ? Code.PUSHD_CS : Code.PUSHW_CS;
		} else if (dst.getRegister() == Register.SS) {
			code = getBitness() >= 32 ? Code.PUSHD_SS : Code.PUSHW_SS;
		} else if (dst.getRegister() == Register.DS) {
			code = getBitness() >= 32 ? Code.PUSHD_DS : Code.PUSHW_DS;
		} else {
			throw noOpCodeFoundFor(Mnemonic.PUSH, dst);
		}
		addInstruction(Instruction.create(code, dst.get()));
	}

	/**
	 * <code>PUSH</code> instruction<hr>
	 * <p>
	 * <code>PUSH r/m64</code><p>
	 * <code>o64 FF /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>PUSH r/m32</code><p>
	 * <code>o32 FF /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH r/m16</code><p>
	 * <code>o16 FF /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void push(AsmMemoryOperand dst) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.PUSH_RM64;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.PUSH_RM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.PUSH_RM16;
		} else {
			throw noOpCodeFoundFor(Mnemonic.PUSH, dst);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PUSH</code> instruction<hr>
	 * <p>
	 * <code>PUSH imm32</code><p>
	 * <code>o64 68 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>PUSH imm32</code><p>
	 * <code>o32 68 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH imm16</code><p>
	 * <code>o16 68 iw</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>PUSH imm8</code><p>
	 * <code>o64 6A ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>PUSH imm8</code><p>
	 * <code>o32 6A ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>PUSH imm8</code><p>
	 * <code>o16 6A ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void push(int imm) {
		int code;
		if (getBitness() == 64) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.PUSHQ_IMM8 : Code.PUSHQ_IMM32;
		} else if (getBitness() >= 32) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.PUSHD_IMM8 : Code.PUSHD_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.PUSHW_IMM8 : Code.PUSH_IMM16;
		addInstruction(Instruction.create(code, imm));
	}

	/**
	 * <code>PUSHA</code> instruction<hr>
	 * <p>
	 * <code>PUSHA</code><p>
	 * <code>o16 60</code><p>
	 * <code>186+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pusha() {
		addInstruction(Instruction.create(Code.PUSHAW));
	}

	/**
	 * <code>PUSHAD</code> instruction<hr>
	 * <p>
	 * <code>PUSHAD</code><p>
	 * <code>o32 60</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pushad() {
		addInstruction(Instruction.create(Code.PUSHAD));
	}

	/**
	 * <code>PUSHF</code> instruction<hr>
	 * <p>
	 * <code>PUSHF</code><p>
	 * <code>o16 9C</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pushf() {
		addInstruction(Instruction.create(Code.PUSHFW));
	}

	/**
	 * <code>PUSHFD</code> instruction<hr>
	 * <p>
	 * <code>PUSHFD</code><p>
	 * <code>o32 9C</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pushfd() {
		addInstruction(Instruction.create(Code.PUSHFD));
	}

	/**
	 * <code>PUSHFQ</code> instruction<hr>
	 * <p>
	 * <code>PUSHFQ</code><p>
	 * <code>o64 9C</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void pushfq() {
		addInstruction(Instruction.create(Code.PUSHFQ));
	}

	/**
	 * <code>PVALIDATE</code> instruction<hr>
	 * <p>
	 * <code>PVALIDATE</code><p>
	 * <code>a64 F2 0F 01 FF</code><p>
	 * <code>SEV-SNP</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>PVALIDATE</code><p>
	 * <code>a32 F2 0F 01 FF</code><p>
	 * <code>SEV-SNP</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>PVALIDATE</code><p>
	 * <code>a16 F2 0F 01 FF</code><p>
	 * <code>SEV-SNP</code><p>
	 * <code>16/32-bit</code>
	 */
	public void pvalidate() {
		int code;
		if (getBitness() == 64) {
			code = Code.PVALIDATEQ;
		} else code = getBitness() >= 32 ? Code.PVALIDATED : Code.PVALIDATEW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>PXOR</code> instruction<hr>
	 * <p>
	 * <code>PXOR mm, mm/m64</code><p>
	 * <code>NP 0F EF /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pxor(AsmRegisterMM dst, AsmRegisterMM src) {
		addInstruction(Instruction.create(Code.PXOR_MM_MMM64, dst.get(), src.get()));
	}

	/**
	 * <code>PXOR</code> instruction<hr>
	 * <p>
	 * <code>PXOR xmm1, xmm2/m128</code><p>
	 * <code>66 0F EF /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pxor(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.PXOR_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>PXOR</code> instruction<hr>
	 * <p>
	 * <code>PXOR mm, mm/m64</code><p>
	 * <code>NP 0F EF /r</code><p>
	 * <code>MMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pxor(AsmRegisterMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PXOR_MM_MMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>PXOR</code> instruction<hr>
	 * <p>
	 * <code>PXOR xmm1, xmm2/m128</code><p>
	 * <code>66 0F EF /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void pxor(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.PXOR_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m8, CL</code><p>
	 * <code>D2 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCL_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m16, CL</code><p>
	 * <code>o16 D3 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCL_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m32, CL</code><p>
	 * <code>o32 D3 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCL_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m64, CL</code><p>
	 * <code>o64 D3 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void rcl(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCL_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m64, CL</code><p>
	 * <code>o64 D3 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m32, CL</code><p>
	 * <code>o32 D3 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m16, CL</code><p>
	 * <code>o16 D3 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m8, CL</code><p>
	 * <code>D2 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.RCL_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.RCL_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.RCL_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.RCL_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.RCL, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m8, 1</code><p>
	 * <code>D0 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m8, imm8</code><p>
	 * <code>C0 /2 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCL_RM8_1 : Code.RCL_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m16, 1</code><p>
	 * <code>o16 D1 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m16, imm8</code><p>
	 * <code>o16 C1 /2 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCL_RM16_1 : Code.RCL_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m32, 1</code><p>
	 * <code>o32 D1 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m32, imm8</code><p>
	 * <code>o32 C1 /2 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCL_RM32_1 : Code.RCL_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m64, 1</code><p>
	 * <code>o64 D1 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m64, imm8</code><p>
	 * <code>o64 C1 /2 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void rcl(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCL_RM64_1 : Code.RCL_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCL</code> instruction<hr>
	 * <p>
	 * <code>RCL r/m64, 1</code><p>
	 * <code>o64 D1 /2</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m64, imm8</code><p>
	 * <code>o64 C1 /2 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m32, 1</code><p>
	 * <code>o32 D1 /2</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m32, imm8</code><p>
	 * <code>o32 C1 /2 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m16, 1</code><p>
	 * <code>o16 D1 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m16, imm8</code><p>
	 * <code>o16 C1 /2 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m8, 1</code><p>
	 * <code>D0 /2</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCL r/m8, imm8</code><p>
	 * <code>C0 /2 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcl(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.RCL_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.RCL_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.RCL_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.RCL_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.RCL, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.RCL_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.RCL_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.RCL_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.RCL_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.RCL, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>RCPPS</code> instruction<hr>
	 * <p>
	 * <code>RCPPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 53 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcpps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.RCPPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>RCPPS</code> instruction<hr>
	 * <p>
	 * <code>RCPPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 53 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcpps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.RCPPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RCPSS</code> instruction<hr>
	 * <p>
	 * <code>RCPSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 53 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcpss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.RCPSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>RCPSS</code> instruction<hr>
	 * <p>
	 * <code>RCPSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 53 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcpss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.RCPSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m8, CL</code><p>
	 * <code>D2 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCR_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m16, CL</code><p>
	 * <code>o16 D3 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCR_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m32, CL</code><p>
	 * <code>o32 D3 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCR_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m64, CL</code><p>
	 * <code>o64 D3 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void rcr(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.RCR_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m64, CL</code><p>
	 * <code>o64 D3 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m32, CL</code><p>
	 * <code>o32 D3 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m16, CL</code><p>
	 * <code>o16 D3 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m8, CL</code><p>
	 * <code>D2 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.RCR_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.RCR_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.RCR_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.RCR_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.RCR, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m8, 1</code><p>
	 * <code>D0 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m8, imm8</code><p>
	 * <code>C0 /3 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCR_RM8_1 : Code.RCR_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m16, 1</code><p>
	 * <code>o16 D1 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m16, imm8</code><p>
	 * <code>o16 C1 /3 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCR_RM16_1 : Code.RCR_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m32, 1</code><p>
	 * <code>o32 D1 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m32, imm8</code><p>
	 * <code>o32 C1 /3 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCR_RM32_1 : Code.RCR_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m64, 1</code><p>
	 * <code>o64 D1 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m64, imm8</code><p>
	 * <code>o64 C1 /3 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void rcr(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.RCR_RM64_1 : Code.RCR_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>RCR</code> instruction<hr>
	 * <p>
	 * <code>RCR r/m64, 1</code><p>
	 * <code>o64 D1 /3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m64, imm8</code><p>
	 * <code>o64 C1 /3 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m32, 1</code><p>
	 * <code>o32 D1 /3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m32, imm8</code><p>
	 * <code>o32 C1 /3 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m16, 1</code><p>
	 * <code>o16 D1 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m16, imm8</code><p>
	 * <code>o16 C1 /3 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m8, 1</code><p>
	 * <code>D0 /3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RCR r/m8, imm8</code><p>
	 * <code>C0 /3 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rcr(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.RCR_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.RCR_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.RCR_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.RCR_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.RCR, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.RCR_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.RCR_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.RCR_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.RCR_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.RCR, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>RDFSBASE</code> instruction<hr>
	 * <p>
	 * <code>RDFSBASE r32</code><p>
	 * <code>F3 0F AE /0</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void rdfsbase(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.RDFSBASE_R32, dst.get()));
	}

	/**
	 * <code>RDFSBASE</code> instruction<hr>
	 * <p>
	 * <code>RDFSBASE r64</code><p>
	 * <code>F3 o64 0F AE /0</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void rdfsbase(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.RDFSBASE_R64, dst.get()));
	}

	/**
	 * <code>RDGSBASE</code> instruction<hr>
	 * <p>
	 * <code>RDGSBASE r32</code><p>
	 * <code>F3 0F AE /1</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void rdgsbase(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.RDGSBASE_R32, dst.get()));
	}

	/**
	 * <code>RDGSBASE</code> instruction<hr>
	 * <p>
	 * <code>RDGSBASE r64</code><p>
	 * <code>F3 o64 0F AE /1</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void rdgsbase(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.RDGSBASE_R64, dst.get()));
	}

	/**
	 * <code>RDM</code> instruction<hr>
	 * <p>
	 * <code>RDM</code><p>
	 * <code>0F 3A</code><p>
	 * <code>AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void rdm() {
		addInstruction(Instruction.create(Code.RDM));
	}

	/**
	 * <code>RDMSR</code> instruction<hr>
	 * <p>
	 * <code>RDMSR</code><p>
	 * <code>0F 32</code><p>
	 * <code>MSR</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdmsr() {
		addInstruction(Instruction.create(Code.RDMSR));
	}

	/**
	 * <code>RDPID</code> instruction<hr>
	 * <p>
	 * <code>RDPID r32</code><p>
	 * <code>F3 0F C7 /7</code><p>
	 * <code>RDPID</code><p>
	 * <code>16/32-bit</code>
	 */
	public void rdpid(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.RDPID_R32, dst.get()));
	}

	/**
	 * <code>RDPID</code> instruction<hr>
	 * <p>
	 * <code>RDPID r64</code><p>
	 * <code>F3 0F C7 /7</code><p>
	 * <code>RDPID</code><p>
	 * <code>64-bit</code>
	 */
	public void rdpid(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.RDPID_R64, dst.get()));
	}

	/**
	 * <code>RDPKRU</code> instruction<hr>
	 * <p>
	 * <code>RDPKRU</code><p>
	 * <code>NP 0F 01 EE</code><p>
	 * <code>PKU</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdpkru() {
		addInstruction(Instruction.create(Code.RDPKRU));
	}

	/**
	 * <code>RDPMC</code> instruction<hr>
	 * <p>
	 * <code>RDPMC</code><p>
	 * <code>0F 33</code><p>
	 * <code>Pentium MMX or later, or Pentium Pro or later</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdpmc() {
		addInstruction(Instruction.create(Code.RDPMC));
	}

	/**
	 * <code>RDPRU</code> instruction<hr>
	 * <p>
	 * <code>RDPRU</code><p>
	 * <code>0F 01 FD</code><p>
	 * <code>RDPRU</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdpru() {
		addInstruction(Instruction.create(Code.RDPRU));
	}

	/**
	 * <code>RDRAND</code> instruction<hr>
	 * <p>
	 * <code>RDRAND r16</code><p>
	 * <code>o16 0F C7 /6</code><p>
	 * <code>RDRAND</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdrand(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.RDRAND_R16, dst.get()));
	}

	/**
	 * <code>RDRAND</code> instruction<hr>
	 * <p>
	 * <code>RDRAND r32</code><p>
	 * <code>o32 0F C7 /6</code><p>
	 * <code>RDRAND</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdrand(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.RDRAND_R32, dst.get()));
	}

	/**
	 * <code>RDRAND</code> instruction<hr>
	 * <p>
	 * <code>RDRAND r64</code><p>
	 * <code>o64 0F C7 /6</code><p>
	 * <code>RDRAND</code><p>
	 * <code>64-bit</code>
	 */
	public void rdrand(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.RDRAND_R64, dst.get()));
	}

	/**
	 * <code>RDSEED</code> instruction<hr>
	 * <p>
	 * <code>RDSEED r16</code><p>
	 * <code>o16 0F C7 /7</code><p>
	 * <code>RDSEED</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdseed(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.RDSEED_R16, dst.get()));
	}

	/**
	 * <code>RDSEED</code> instruction<hr>
	 * <p>
	 * <code>RDSEED r32</code><p>
	 * <code>o32 0F C7 /7</code><p>
	 * <code>RDSEED</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdseed(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.RDSEED_R32, dst.get()));
	}

	/**
	 * <code>RDSEED</code> instruction<hr>
	 * <p>
	 * <code>RDSEED r64</code><p>
	 * <code>o64 0F C7 /7</code><p>
	 * <code>RDSEED</code><p>
	 * <code>64-bit</code>
	 */
	public void rdseed(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.RDSEED_R64, dst.get()));
	}

	/**
	 * <code>RDSHR</code> instruction<hr>
	 * <p>
	 * <code>RDSHR r/m32</code><p>
	 * <code>0F 36 /0</code><p>
	 * <code>Cyrix 6x86MX, M II, III</code><p>
	 * <code>16/32-bit</code>
	 */
	public void rdshr(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.RDSHR_RM32, dst.get()));
	}

	/**
	 * <code>RDSHR</code> instruction<hr>
	 * <p>
	 * <code>RDSHR r/m32</code><p>
	 * <code>0F 36 /0</code><p>
	 * <code>Cyrix 6x86MX, M II, III</code><p>
	 * <code>16/32-bit</code>
	 */
	public void rdshr(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.RDSHR_RM32, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RDSSPD</code> instruction<hr>
	 * <p>
	 * <code>RDSSPD r32</code><p>
	 * <code>F3 0F 1E /1</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdsspd(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.RDSSPD_R32, dst.get()));
	}

	/**
	 * <code>RDSSPQ</code> instruction<hr>
	 * <p>
	 * <code>RDSSPQ r64</code><p>
	 * <code>F3 o64 0F 1E /1</code><p>
	 * <code>CET_SS</code><p>
	 * <code>64-bit</code>
	 */
	public void rdsspq(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.RDSSPQ_R64, dst.get()));
	}

	/**
	 * <code>RDTSC</code> instruction<hr>
	 * <p>
	 * <code>RDTSC</code><p>
	 * <code>0F 31</code><p>
	 * <code>TSC</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdtsc() {
		addInstruction(Instruction.create(Code.RDTSC));
	}

	/**
	 * <code>RDTSCP</code> instruction<hr>
	 * <p>
	 * <code>RDTSCP</code><p>
	 * <code>0F 01 F9</code><p>
	 * <code>RDTSCP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdtscp() {
		addInstruction(Instruction.create(Code.RDTSCP));
	}

	/**
	 * <code>RDUDBG</code> instruction<hr>
	 * <p>
	 * <code>RDUDBG</code><p>
	 * <code>0F 0E</code><p>
	 * <code>UDBG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rdudbg() {
		addInstruction(Instruction.create(Code.RDUDBG));
	}

	/**
	 * <code>RESERVEDNOP_0F0D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 0D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f0d(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F0D, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F0D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 0D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f0d(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F0D, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F0D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 0D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f0d(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F0D, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F0D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 0D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f0d(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F0D, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F0D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 0D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f0d(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F0D, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F0D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 0D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f0d(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F0D, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F18</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 18 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f18(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F18, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F18</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 18 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f18(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F18, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F18</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 18 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f18(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F18, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F18</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 18 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f18(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F18, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F18</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 18 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f18(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F18, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F18</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 18 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f18(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F18, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F19</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 19 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f19(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F19, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F19</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 19 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f19(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F19, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F19</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 19 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f19(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F19, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F19</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 19 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f19(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F19, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F19</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 19 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f19(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F19, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F19</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 19 /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f19(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F19, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1A</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1A /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1a(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1A, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1A</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1A /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1a(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1A, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1A</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1A /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1a(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1A, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1A</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1A /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1a(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1A, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1A</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1A /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1a(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1A, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1A</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1A /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1a(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1A, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1B</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1B /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1b(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1B, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1B</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1B /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1b(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1B, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1B</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1B /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1b(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1B, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1B</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1B /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1b(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1B, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1B</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1B /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1b(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1B, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1B</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1B /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1b(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1B, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1C</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1C /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1c(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1C, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1C</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1C /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1c(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1C, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1C</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1C /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1c(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1C, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1C</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1C /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1c(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1C, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1C</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1C /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1c(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1C, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1C</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1C /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1c(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1C, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1d(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1D, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1d(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1D, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1d(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1D, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1d(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1D, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1d(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1D, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1D</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1D /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1d(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1D, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1E</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1E /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1e(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1E, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1E</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1E /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1e(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1E, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1E</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1E /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1e(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1E, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1E</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1E /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1e(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1E, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1E</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1E /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1e(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1E, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1E</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1E /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1e(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1E, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1F</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1F /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1f(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1F, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1F</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m16, r16</code><p>
	 * <code>o16 0F 1F /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1f(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM16_R16_0F1F, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1F</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1F /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1f(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1F, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1F</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m32, r32</code><p>
	 * <code>o32 0F 1F /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void reservednop_0f1f(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM32_R32_0F1F, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1F</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1F /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1f(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1F, dst.get(), src.get()));
	}

	/**
	 * <code>RESERVEDNOP_0F1F</code> instruction<hr>
	 * <p>
	 * <code>RESERVEDNOP r/m64, r64</code><p>
	 * <code>o64 0F 1F /r</code><p>
	 * <code>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</code><p>
	 * <code>64-bit</code>
	 */
	public void reservednop_0f1f(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.RESERVEDNOP_RM64_R64_0F1F, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>RET</code> instruction<hr>
	 * <p>
	 * <code>RET</code><p>
	 * <code>o64 C3</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RET</code><p>
	 * <code>o32 C3</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>RET</code><p>
	 * <code>o16 C3</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ret() {
		int code;
		if (getBitness() == 64) {
			code = Code.RETNQ;
		} else code = getBitness() >= 32 ? Code.RETND : Code.RETNW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>RET</code> instruction<hr>
	 * <p>
	 * <code>RET imm16</code><p>
	 * <code>o64 C2 iw</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RET imm16</code><p>
	 * <code>o32 C2 iw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>RET imm16</code><p>
	 * <code>o16 C2 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ret(int imm) {
		int code;
		if (getBitness() == 64) {
			code = Code.RETNQ_IMM16;
		} else code = getBitness() >= 32 ? Code.RETND_IMM16 : Code.RETNW_IMM16;
		addInstruction(Instruction.create(code, imm));
	}

	/**
	 * <code>RETF</code> instruction<hr>
	 * <p>
	 * <code>RETF</code><p>
	 * <code>o64 CB</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RETF</code><p>
	 * <code>o32 CB</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RETF</code><p>
	 * <code>o16 CB</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void retf() {
		int code;
		if (getBitness() == 64) {
			code = Code.RETFQ;
		} else code = getBitness() >= 32 ? Code.RETFD : Code.RETFW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>RETF</code> instruction<hr>
	 * <p>
	 * <code>RETF imm16</code><p>
	 * <code>o64 CA iw</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>RETF imm16</code><p>
	 * <code>o32 CA iw</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>RETF imm16</code><p>
	 * <code>o16 CA iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void retf(int imm) {
		int code;
		if (getBitness() == 64) {
			code = Code.RETFQ_IMM16;
		} else code = getBitness() >= 32 ? Code.RETFD_IMM16 : Code.RETFW_IMM16;
		addInstruction(Instruction.create(code, imm));
	}

	/**
	 * <code>RMPADJUST</code> instruction<hr>
	 * <p>
	 * <code>RMPADJUST</code><p>
	 * <code>F3 0F 01 FE</code><p>
	 * <code>SEV-SNP</code><p>
	 * <code>64-bit</code>
	 */
	public void rmpadjust() {
		addInstruction(Instruction.create(Code.RMPADJUST));
	}

	/**
	 * <code>RMPUPDATE</code> instruction<hr>
	 * <p>
	 * <code>RMPUPDATE</code><p>
	 * <code>F2 0F 01 FE</code><p>
	 * <code>SEV-SNP</code><p>
	 * <code>64-bit</code>
	 */
	public void rmpupdate() {
		addInstruction(Instruction.create(Code.RMPUPDATE));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m8, CL</code><p>
	 * <code>D2 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROL_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m16, CL</code><p>
	 * <code>o16 D3 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROL_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m32, CL</code><p>
	 * <code>o32 D3 /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROL_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m64, CL</code><p>
	 * <code>o64 D3 /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void rol(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROL_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m64, CL</code><p>
	 * <code>o64 D3 /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m32, CL</code><p>
	 * <code>o32 D3 /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m16, CL</code><p>
	 * <code>o16 D3 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m8, CL</code><p>
	 * <code>D2 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.ROL_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.ROL_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.ROL_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.ROL_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.ROL, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m8, 1</code><p>
	 * <code>D0 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m8, imm8</code><p>
	 * <code>C0 /0 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROL_RM8_1 : Code.ROL_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m16, 1</code><p>
	 * <code>o16 D1 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m16, imm8</code><p>
	 * <code>o16 C1 /0 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROL_RM16_1 : Code.ROL_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m32, 1</code><p>
	 * <code>o32 D1 /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m32, imm8</code><p>
	 * <code>o32 C1 /0 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROL_RM32_1 : Code.ROL_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m64, 1</code><p>
	 * <code>o64 D1 /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m64, imm8</code><p>
	 * <code>o64 C1 /0 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void rol(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROL_RM64_1 : Code.ROL_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROL</code> instruction<hr>
	 * <p>
	 * <code>ROL r/m64, 1</code><p>
	 * <code>o64 D1 /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m64, imm8</code><p>
	 * <code>o64 C1 /0 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m32, 1</code><p>
	 * <code>o32 D1 /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m32, imm8</code><p>
	 * <code>o32 C1 /0 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m16, 1</code><p>
	 * <code>o16 D1 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m16, imm8</code><p>
	 * <code>o16 C1 /0 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m8, 1</code><p>
	 * <code>D0 /0</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROL r/m8, imm8</code><p>
	 * <code>C0 /0 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rol(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.ROL_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.ROL_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.ROL_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.ROL_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.ROL, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.ROL_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.ROL_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.ROL_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.ROL_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.ROL, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m8, CL</code><p>
	 * <code>D2 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROR_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m16, CL</code><p>
	 * <code>o16 D3 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROR_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m32, CL</code><p>
	 * <code>o32 D3 /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROR_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m64, CL</code><p>
	 * <code>o64 D3 /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void ror(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.ROR_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m64, CL</code><p>
	 * <code>o64 D3 /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m32, CL</code><p>
	 * <code>o32 D3 /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m16, CL</code><p>
	 * <code>o16 D3 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m8, CL</code><p>
	 * <code>D2 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.ROR_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.ROR_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.ROR_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.ROR_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.ROR, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m8, 1</code><p>
	 * <code>D0 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m8, imm8</code><p>
	 * <code>C0 /1 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROR_RM8_1 : Code.ROR_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m16, 1</code><p>
	 * <code>o16 D1 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m16, imm8</code><p>
	 * <code>o16 C1 /1 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROR_RM16_1 : Code.ROR_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m32, 1</code><p>
	 * <code>o32 D1 /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m32, imm8</code><p>
	 * <code>o32 C1 /1 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROR_RM32_1 : Code.ROR_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m64, 1</code><p>
	 * <code>o64 D1 /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m64, imm8</code><p>
	 * <code>o64 C1 /1 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void ror(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.ROR_RM64_1 : Code.ROR_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>ROR</code> instruction<hr>
	 * <p>
	 * <code>ROR r/m64, 1</code><p>
	 * <code>o64 D1 /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m64, imm8</code><p>
	 * <code>o64 C1 /1 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m32, 1</code><p>
	 * <code>o32 D1 /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m32, imm8</code><p>
	 * <code>o32 C1 /1 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m16, 1</code><p>
	 * <code>o16 D1 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m16, imm8</code><p>
	 * <code>o16 C1 /1 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m8, 1</code><p>
	 * <code>D0 /1</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>ROR r/m8, imm8</code><p>
	 * <code>C0 /1 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ror(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.ROR_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.ROR_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.ROR_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.ROR_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.ROR, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.ROR_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.ROR_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.ROR_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.ROR_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.ROR, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>RORX</code> instruction<hr>
	 * <p>
	 * <code>RORX r32, r/m32, imm8</code><p>
	 * <code>VEX.LZ.F2.0F3A.W0 F0 /r ib</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rorx(AsmRegister32 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_RORX_R32_RM32_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>RORX</code> instruction<hr>
	 * <p>
	 * <code>RORX r64, r/m64, imm8</code><p>
	 * <code>VEX.LZ.F2.0F3A.W1 F0 /r ib</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void rorx(AsmRegister64 dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_RORX_R64_RM64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>RORX</code> instruction<hr>
	 * <p>
	 * <code>RORX r32, r/m32, imm8</code><p>
	 * <code>VEX.LZ.F2.0F3A.W0 F0 /r ib</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rorx(AsmRegister32 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_RORX_R32_RM32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>RORX</code> instruction<hr>
	 * <p>
	 * <code>RORX r64, r/m64, imm8</code><p>
	 * <code>VEX.LZ.F2.0F3A.W1 F0 /r ib</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void rorx(AsmRegister64 dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_RORX_R64_RM64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ROUNDPD</code> instruction<hr>
	 * <p>
	 * <code>ROUNDPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 09 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundpd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDPD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>ROUNDPD</code> instruction<hr>
	 * <p>
	 * <code>ROUNDPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 09 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundpd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDPD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ROUNDPS</code> instruction<hr>
	 * <p>
	 * <code>ROUNDPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 08 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDPS_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>ROUNDPS</code> instruction<hr>
	 * <p>
	 * <code>ROUNDPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F 3A 08 /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDPS_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ROUNDSD</code> instruction<hr>
	 * <p>
	 * <code>ROUNDSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>66 0F 3A 0B /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundsd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDSD_XMM_XMMM64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>ROUNDSD</code> instruction<hr>
	 * <p>
	 * <code>ROUNDSD xmm1, xmm2/m64, imm8</code><p>
	 * <code>66 0F 3A 0B /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundsd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDSD_XMM_XMMM64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>ROUNDSS</code> instruction<hr>
	 * <p>
	 * <code>ROUNDSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>66 0F 3A 0A /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundss(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDSS_XMM_XMMM32_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>ROUNDSS</code> instruction<hr>
	 * <p>
	 * <code>ROUNDSS xmm1, xmm2/m32, imm8</code><p>
	 * <code>66 0F 3A 0A /r ib</code><p>
	 * <code>SSE4.1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void roundss(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.ROUNDSS_XMM_XMMM32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>RSDC</code> instruction<hr>
	 * <p>
	 * <code>RSDC Sreg, m80</code><p>
	 * <code>0F 79 /r</code><p>
	 * <code>Cyrix, AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void rsdc(AsmRegisterSegment dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.RSDC_SREG_M80, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RSLDT</code> instruction<hr>
	 * <p>
	 * <code>RSLDT m80</code><p>
	 * <code>0F 7B /0</code><p>
	 * <code>Cyrix, AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void rsldt(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.RSLDT_M80, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RSM</code> instruction<hr>
	 * <p>
	 * <code>RSM</code><p>
	 * <code>0F AA</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rsm() {
		addInstruction(Instruction.create(Code.RSM));
	}

	/**
	 * <code>RSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>RSQRTPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 52 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rsqrtps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.RSQRTPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>RSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>RSQRTPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 52 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rsqrtps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.RSQRTPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RSQRTSS</code> instruction<hr>
	 * <p>
	 * <code>RSQRTSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 52 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rsqrtss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.RSQRTSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>RSQRTSS</code> instruction<hr>
	 * <p>
	 * <code>RSQRTSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 52 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rsqrtss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.RSQRTSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RSTORSSP</code> instruction<hr>
	 * <p>
	 * <code>RSTORSSP m64</code><p>
	 * <code>F3 0F 01 /5</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void rstorssp(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.RSTORSSP_M64, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>RSTS</code> instruction<hr>
	 * <p>
	 * <code>RSTS m80</code><p>
	 * <code>0F 7D /0</code><p>
	 * <code>Cyrix, AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void rsts(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.RSTS_M80, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SAHF</code> instruction<hr>
	 * <p>
	 * <code>SAHF</code><p>
	 * <code>9E</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sahf() {
		addInstruction(Instruction.create(Code.SAHF));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m8, CL</code><p>
	 * <code>D2 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAL_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m16, CL</code><p>
	 * <code>o16 D3 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAL_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m32, CL</code><p>
	 * <code>o32 D3 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAL_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m64, CL</code><p>
	 * <code>o64 D3 /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sal(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAL_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m64, CL</code><p>
	 * <code>o64 D3 /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m32, CL</code><p>
	 * <code>o32 D3 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m16, CL</code><p>
	 * <code>o16 D3 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m8, CL</code><p>
	 * <code>D2 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SAL_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SAL_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SAL_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SAL_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SAL, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m8, 1</code><p>
	 * <code>D0 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m8, imm8</code><p>
	 * <code>C0 /6 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAL_RM8_1 : Code.SAL_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m16, 1</code><p>
	 * <code>o16 D1 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m16, imm8</code><p>
	 * <code>o16 C1 /6 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAL_RM16_1 : Code.SAL_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m32, 1</code><p>
	 * <code>o32 D1 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m32, imm8</code><p>
	 * <code>o32 C1 /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAL_RM32_1 : Code.SAL_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m64, 1</code><p>
	 * <code>o64 D1 /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m64, imm8</code><p>
	 * <code>o64 C1 /6 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sal(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAL_RM64_1 : Code.SAL_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAL</code> instruction<hr>
	 * <p>
	 * <code>SAL r/m64, 1</code><p>
	 * <code>o64 D1 /6</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m64, imm8</code><p>
	 * <code>o64 C1 /6 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m32, 1</code><p>
	 * <code>o32 D1 /6</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m32, imm8</code><p>
	 * <code>o32 C1 /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m16, 1</code><p>
	 * <code>o16 D1 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m16, imm8</code><p>
	 * <code>o16 C1 /6 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m8, 1</code><p>
	 * <code>D0 /6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAL r/m8, imm8</code><p>
	 * <code>C0 /6 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sal(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.SAL_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.SAL_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.SAL_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.SAL_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.SAL, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SAL_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SAL_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SAL_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SAL_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SAL, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SALC</code> instruction<hr>
	 * <p>
	 * <code>SALC</code><p>
	 * <code>D6</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void salc() {
		addInstruction(Instruction.create(Code.SALC));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m8, CL</code><p>
	 * <code>D2 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAR_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m16, CL</code><p>
	 * <code>o16 D3 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAR_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m32, CL</code><p>
	 * <code>o32 D3 /7</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAR_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m64, CL</code><p>
	 * <code>o64 D3 /7</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sar(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SAR_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m64, CL</code><p>
	 * <code>o64 D3 /7</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m32, CL</code><p>
	 * <code>o32 D3 /7</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m16, CL</code><p>
	 * <code>o16 D3 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m8, CL</code><p>
	 * <code>D2 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SAR_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SAR_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SAR_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SAR_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SAR, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m8, 1</code><p>
	 * <code>D0 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m8, imm8</code><p>
	 * <code>C0 /7 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAR_RM8_1 : Code.SAR_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m16, 1</code><p>
	 * <code>o16 D1 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m16, imm8</code><p>
	 * <code>o16 C1 /7 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAR_RM16_1 : Code.SAR_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m32, 1</code><p>
	 * <code>o32 D1 /7</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m32, imm8</code><p>
	 * <code>o32 C1 /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAR_RM32_1 : Code.SAR_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m64, 1</code><p>
	 * <code>o64 D1 /7</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m64, imm8</code><p>
	 * <code>o64 C1 /7 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sar(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SAR_RM64_1 : Code.SAR_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SAR</code> instruction<hr>
	 * <p>
	 * <code>SAR r/m64, 1</code><p>
	 * <code>o64 D1 /7</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m64, imm8</code><p>
	 * <code>o64 C1 /7 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m32, 1</code><p>
	 * <code>o32 D1 /7</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m32, imm8</code><p>
	 * <code>o32 C1 /7 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m16, 1</code><p>
	 * <code>o16 D1 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m16, imm8</code><p>
	 * <code>o16 C1 /7 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m8, 1</code><p>
	 * <code>D0 /7</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SAR r/m8, imm8</code><p>
	 * <code>C0 /7 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sar(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.SAR_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.SAR_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.SAR_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.SAR_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.SAR, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SAR_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SAR_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SAR_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SAR_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SAR, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SARX</code> instruction<hr>
	 * <p>
	 * <code>SARX r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.F3.0F38.W0 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sarx(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_SARX_R32_RM32_R32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SARX</code> instruction<hr>
	 * <p>
	 * <code>SARX r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.F3.0F38.W0 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sarx(AsmRegister32 dst, AsmMemoryOperand src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_SARX_R32_RM32_R32, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>SARX</code> instruction<hr>
	 * <p>
	 * <code>SARX r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.F3.0F38.W1 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void sarx(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_SARX_R64_RM64_R64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SARX</code> instruction<hr>
	 * <p>
	 * <code>SARX r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.F3.0F38.W1 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void sarx(AsmRegister64 dst, AsmMemoryOperand src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_SARX_R64_RM64_R64, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>SAVEPREVSSP</code> instruction<hr>
	 * <p>
	 * <code>SAVEPREVSSP</code><p>
	 * <code>F3 0F 01 EA</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void saveprevssp() {
		addInstruction(Instruction.create(Code.SAVEPREVSSP));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m8, r8</code><p>
	 * <code>18 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SBB_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m8, r8</code><p>
	 * <code>18 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SBB_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m16, r16</code><p>
	 * <code>o16 19 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.SBB_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m16, r16</code><p>
	 * <code>o16 19 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.SBB_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m32, r32</code><p>
	 * <code>o32 19 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.SBB_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m32, r32</code><p>
	 * <code>o32 19 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.SBB_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m64, r64</code><p>
	 * <code>o64 19 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sbb(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.SBB_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m64, r64</code><p>
	 * <code>o64 19 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sbb(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.SBB_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r8, r/m8</code><p>
	 * <code>1A /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SBB_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r16, r/m16</code><p>
	 * <code>o16 1B /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SBB_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r32, r/m32</code><p>
	 * <code>o32 1B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SBB_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r64, r/m64</code><p>
	 * <code>o64 1B /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sbb(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SBB_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB AL, imm8</code><p>
	 * <code>1C ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m8, imm8</code><p>
	 * <code>80 /3 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.SBB_AL_IMM8 : Code.SBB_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB AX, imm16</code><p>
	 * <code>o16 1D iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m16, imm16</code><p>
	 * <code>o16 81 /3 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m16, imm8</code><p>
	 * <code>o16 83 /3 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.SBB_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.SBB_RM16_IMM8 : Code.SBB_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB EAX, imm32</code><p>
	 * <code>o32 1D id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m32, imm32</code><p>
	 * <code>o32 81 /3 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m32, imm8</code><p>
	 * <code>o32 83 /3 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.SBB_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.SBB_RM32_IMM8 : Code.SBB_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB RAX, imm32</code><p>
	 * <code>o64 1D id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m64, imm32</code><p>
	 * <code>o64 81 /3 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m64, imm8</code><p>
	 * <code>o64 83 /3 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sbb(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.SBB_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.SBB_RM64_IMM8 : Code.SBB_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SBB</code> instruction<hr>
	 * <p>
	 * <code>SBB r/m64, imm32</code><p>
	 * <code>o64 81 /3 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m64, imm8</code><p>
	 * <code>o64 83 /3 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m32, imm32</code><p>
	 * <code>o32 81 /3 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m32, imm8</code><p>
	 * <code>o32 83 /3 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m16, imm16</code><p>
	 * <code>o16 81 /3 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m16, imm8</code><p>
	 * <code>o16 83 /3 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SBB r/m8, imm8</code><p>
	 * <code>80 /3 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sbb(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.SBB_RM64_IMM8 : Code.SBB_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.SBB_RM32_IMM8 : Code.SBB_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.SBB_RM16_IMM8 : Code.SBB_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SBB_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SBB, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SCASB</code> instruction<hr>
	 * <p>
	 * <code>SCASB</code><p>
	 * <code>AE</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void scasb() {
		addInstruction(Instruction.createScasb(getBitness()));
	}

	/**
	 * <code>SCASD</code> instruction<hr>
	 * <p>
	 * <code>SCASD</code><p>
	 * <code>o32 AF</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void scasd() {
		addInstruction(Instruction.createScasd(getBitness()));
	}

	/**
	 * <code>SCASQ</code> instruction<hr>
	 * <p>
	 * <code>SCASQ</code><p>
	 * <code>o64 AF</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void scasq() {
		addInstruction(Instruction.createScasq(getBitness()));
	}

	/**
	 * <code>SCASW</code> instruction<hr>
	 * <p>
	 * <code>SCASW</code><p>
	 * <code>o16 AF</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void scasw() {
		addInstruction(Instruction.createScasw(getBitness()));
	}

	/**
	 * <code>SEAMCALL</code> instruction<hr>
	 * <p>
	 * <code>SEAMCALL</code><p>
	 * <code>66 0F 01 CF</code><p>
	 * <code>TDX</code><p>
	 * <code>64-bit</code>
	 */
	public void seamcall() {
		addInstruction(Instruction.create(Code.SEAMCALL));
	}

	/**
	 * <code>SEAMOPS</code> instruction<hr>
	 * <p>
	 * <code>SEAMOPS</code><p>
	 * <code>66 0F 01 CE</code><p>
	 * <code>TDX</code><p>
	 * <code>64-bit</code>
	 */
	public void seamops() {
		addInstruction(Instruction.create(Code.SEAMOPS));
	}

	/**
	 * <code>SEAMRET</code> instruction<hr>
	 * <p>
	 * <code>SEAMRET</code><p>
	 * <code>66 0F 01 CD</code><p>
	 * <code>TDX</code><p>
	 * <code>64-bit</code>
	 */
	public void seamret() {
		addInstruction(Instruction.create(Code.SEAMRET));
	}

	/**
	 * <code>SENDUIPI</code> instruction<hr>
	 * <p>
	 * <code>SENDUIPI r64</code><p>
	 * <code>F3 0F C7 /6</code><p>
	 * <code>UINTR</code><p>
	 * <code>64-bit</code>
	 */
	public void senduipi(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.SENDUIPI_R64, dst.get()));
	}

	/**
	 * <code>SERIALIZE</code> instruction<hr>
	 * <p>
	 * <code>SERIALIZE</code><p>
	 * <code>NP 0F 01 E8</code><p>
	 * <code>SERIALIZE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void serialize() {
		addInstruction(Instruction.create(Code.SERIALIZE));
	}

	/**
	 * <code>SETA</code> instruction<hr>
	 * <p>
	 * <code>SETA r/m8</code><p>
	 * <code>0F 97 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void seta(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETA_RM8, dst.get()));
	}

	/**
	 * <code>SETA</code> instruction<hr>
	 * <p>
	 * <code>SETA r/m8</code><p>
	 * <code>0F 97 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void seta(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETA_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETAE</code> instruction<hr>
	 * <p>
	 * <code>SETAE r/m8</code><p>
	 * <code>0F 93 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setae(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETAE_RM8, dst.get()));
	}

	/**
	 * <code>SETAE</code> instruction<hr>
	 * <p>
	 * <code>SETAE r/m8</code><p>
	 * <code>0F 93 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setae(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETAE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETB</code> instruction<hr>
	 * <p>
	 * <code>SETB r/m8</code><p>
	 * <code>0F 92 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setb(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETB_RM8, dst.get()));
	}

	/**
	 * <code>SETB</code> instruction<hr>
	 * <p>
	 * <code>SETB r/m8</code><p>
	 * <code>0F 92 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setb(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETB_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETBE</code> instruction<hr>
	 * <p>
	 * <code>SETBE r/m8</code><p>
	 * <code>0F 96 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setbe(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETBE_RM8, dst.get()));
	}

	/**
	 * <code>SETBE</code> instruction<hr>
	 * <p>
	 * <code>SETBE r/m8</code><p>
	 * <code>0F 96 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setbe(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETBE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETC</code> instruction<hr>
	 * <p>
	 * <code>SETB r/m8</code><p>
	 * <code>0F 92 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setc(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETB_RM8, dst.get()));
	}

	/**
	 * <code>SETC</code> instruction<hr>
	 * <p>
	 * <code>SETB r/m8</code><p>
	 * <code>0F 92 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setc(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETB_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETE</code> instruction<hr>
	 * <p>
	 * <code>SETE r/m8</code><p>
	 * <code>0F 94 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sete(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETE_RM8, dst.get()));
	}

	/**
	 * <code>SETE</code> instruction<hr>
	 * <p>
	 * <code>SETE r/m8</code><p>
	 * <code>0F 94 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sete(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETG</code> instruction<hr>
	 * <p>
	 * <code>SETG r/m8</code><p>
	 * <code>0F 9F /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setg(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETG_RM8, dst.get()));
	}

	/**
	 * <code>SETG</code> instruction<hr>
	 * <p>
	 * <code>SETG r/m8</code><p>
	 * <code>0F 9F /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setg(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETG_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETGE</code> instruction<hr>
	 * <p>
	 * <code>SETGE r/m8</code><p>
	 * <code>0F 9D /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setge(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETGE_RM8, dst.get()));
	}

	/**
	 * <code>SETGE</code> instruction<hr>
	 * <p>
	 * <code>SETGE r/m8</code><p>
	 * <code>0F 9D /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setge(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETGE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETL</code> instruction<hr>
	 * <p>
	 * <code>SETL r/m8</code><p>
	 * <code>0F 9C /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setl(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETL_RM8, dst.get()));
	}

	/**
	 * <code>SETL</code> instruction<hr>
	 * <p>
	 * <code>SETL r/m8</code><p>
	 * <code>0F 9C /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setl(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETL_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETLE</code> instruction<hr>
	 * <p>
	 * <code>SETLE r/m8</code><p>
	 * <code>0F 9E /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setle(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETLE_RM8, dst.get()));
	}

	/**
	 * <code>SETLE</code> instruction<hr>
	 * <p>
	 * <code>SETLE r/m8</code><p>
	 * <code>0F 9E /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setle(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETLE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNA</code> instruction<hr>
	 * <p>
	 * <code>SETBE r/m8</code><p>
	 * <code>0F 96 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setna(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETBE_RM8, dst.get()));
	}

	/**
	 * <code>SETNA</code> instruction<hr>
	 * <p>
	 * <code>SETBE r/m8</code><p>
	 * <code>0F 96 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setna(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETBE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNAE</code> instruction<hr>
	 * <p>
	 * <code>SETB r/m8</code><p>
	 * <code>0F 92 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnae(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETB_RM8, dst.get()));
	}

	/**
	 * <code>SETNAE</code> instruction<hr>
	 * <p>
	 * <code>SETB r/m8</code><p>
	 * <code>0F 92 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnae(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETB_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNB</code> instruction<hr>
	 * <p>
	 * <code>SETAE r/m8</code><p>
	 * <code>0F 93 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnb(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETAE_RM8, dst.get()));
	}

	/**
	 * <code>SETNB</code> instruction<hr>
	 * <p>
	 * <code>SETAE r/m8</code><p>
	 * <code>0F 93 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnb(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETAE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNBE</code> instruction<hr>
	 * <p>
	 * <code>SETA r/m8</code><p>
	 * <code>0F 97 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnbe(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETA_RM8, dst.get()));
	}

	/**
	 * <code>SETNBE</code> instruction<hr>
	 * <p>
	 * <code>SETA r/m8</code><p>
	 * <code>0F 97 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnbe(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETA_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNC</code> instruction<hr>
	 * <p>
	 * <code>SETAE r/m8</code><p>
	 * <code>0F 93 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnc(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETAE_RM8, dst.get()));
	}

	/**
	 * <code>SETNC</code> instruction<hr>
	 * <p>
	 * <code>SETAE r/m8</code><p>
	 * <code>0F 93 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnc(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETAE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNE</code> instruction<hr>
	 * <p>
	 * <code>SETNE r/m8</code><p>
	 * <code>0F 95 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setne(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETNE_RM8, dst.get()));
	}

	/**
	 * <code>SETNE</code> instruction<hr>
	 * <p>
	 * <code>SETNE r/m8</code><p>
	 * <code>0F 95 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setne(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETNE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNG</code> instruction<hr>
	 * <p>
	 * <code>SETLE r/m8</code><p>
	 * <code>0F 9E /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setng(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETLE_RM8, dst.get()));
	}

	/**
	 * <code>SETNG</code> instruction<hr>
	 * <p>
	 * <code>SETLE r/m8</code><p>
	 * <code>0F 9E /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setng(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETLE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNGE</code> instruction<hr>
	 * <p>
	 * <code>SETL r/m8</code><p>
	 * <code>0F 9C /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnge(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETL_RM8, dst.get()));
	}

	/**
	 * <code>SETNGE</code> instruction<hr>
	 * <p>
	 * <code>SETL r/m8</code><p>
	 * <code>0F 9C /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnge(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETL_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNL</code> instruction<hr>
	 * <p>
	 * <code>SETGE r/m8</code><p>
	 * <code>0F 9D /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnl(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETGE_RM8, dst.get()));
	}

	/**
	 * <code>SETNL</code> instruction<hr>
	 * <p>
	 * <code>SETGE r/m8</code><p>
	 * <code>0F 9D /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnl(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETGE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNLE</code> instruction<hr>
	 * <p>
	 * <code>SETG r/m8</code><p>
	 * <code>0F 9F /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnle(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETG_RM8, dst.get()));
	}

	/**
	 * <code>SETNLE</code> instruction<hr>
	 * <p>
	 * <code>SETG r/m8</code><p>
	 * <code>0F 9F /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnle(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETG_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNO</code> instruction<hr>
	 * <p>
	 * <code>SETNO r/m8</code><p>
	 * <code>0F 91 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setno(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETNO_RM8, dst.get()));
	}

	/**
	 * <code>SETNO</code> instruction<hr>
	 * <p>
	 * <code>SETNO r/m8</code><p>
	 * <code>0F 91 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setno(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETNO_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNP</code> instruction<hr>
	 * <p>
	 * <code>SETNP r/m8</code><p>
	 * <code>0F 9B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnp(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETNP_RM8, dst.get()));
	}

	/**
	 * <code>SETNP</code> instruction<hr>
	 * <p>
	 * <code>SETNP r/m8</code><p>
	 * <code>0F 9B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnp(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETNP_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNS</code> instruction<hr>
	 * <p>
	 * <code>SETNS r/m8</code><p>
	 * <code>0F 99 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setns(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETNS_RM8, dst.get()));
	}

	/**
	 * <code>SETNS</code> instruction<hr>
	 * <p>
	 * <code>SETNS r/m8</code><p>
	 * <code>0F 99 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setns(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETNS_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETNZ</code> instruction<hr>
	 * <p>
	 * <code>SETNE r/m8</code><p>
	 * <code>0F 95 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnz(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETNE_RM8, dst.get()));
	}

	/**
	 * <code>SETNZ</code> instruction<hr>
	 * <p>
	 * <code>SETNE r/m8</code><p>
	 * <code>0F 95 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setnz(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETNE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETO</code> instruction<hr>
	 * <p>
	 * <code>SETO r/m8</code><p>
	 * <code>0F 90 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void seto(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETO_RM8, dst.get()));
	}

	/**
	 * <code>SETO</code> instruction<hr>
	 * <p>
	 * <code>SETO r/m8</code><p>
	 * <code>0F 90 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void seto(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETO_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETP</code> instruction<hr>
	 * <p>
	 * <code>SETP r/m8</code><p>
	 * <code>0F 9A /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setp(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETP_RM8, dst.get()));
	}

	/**
	 * <code>SETP</code> instruction<hr>
	 * <p>
	 * <code>SETP r/m8</code><p>
	 * <code>0F 9A /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setp(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETP_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETPE</code> instruction<hr>
	 * <p>
	 * <code>SETP r/m8</code><p>
	 * <code>0F 9A /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setpe(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETP_RM8, dst.get()));
	}

	/**
	 * <code>SETPE</code> instruction<hr>
	 * <p>
	 * <code>SETP r/m8</code><p>
	 * <code>0F 9A /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setpe(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETP_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETPO</code> instruction<hr>
	 * <p>
	 * <code>SETNP r/m8</code><p>
	 * <code>0F 9B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setpo(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETNP_RM8, dst.get()));
	}

	/**
	 * <code>SETPO</code> instruction<hr>
	 * <p>
	 * <code>SETNP r/m8</code><p>
	 * <code>0F 9B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setpo(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETNP_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETS</code> instruction<hr>
	 * <p>
	 * <code>SETS r/m8</code><p>
	 * <code>0F 98 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sets(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETS_RM8, dst.get()));
	}

	/**
	 * <code>SETS</code> instruction<hr>
	 * <p>
	 * <code>SETS r/m8</code><p>
	 * <code>0F 98 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sets(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETS_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SETSSBSY</code> instruction<hr>
	 * <p>
	 * <code>SETSSBSY</code><p>
	 * <code>F3 0F 01 E8</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setssbsy() {
		addInstruction(Instruction.create(Code.SETSSBSY));
	}

	/**
	 * <code>SETZ</code> instruction<hr>
	 * <p>
	 * <code>SETE r/m8</code><p>
	 * <code>0F 94 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setz(AsmRegister8 dst) {
		addInstruction(Instruction.create(Code.SETE_RM8, dst.get()));
	}

	/**
	 * <code>SETZ</code> instruction<hr>
	 * <p>
	 * <code>SETE r/m8</code><p>
	 * <code>0F 94 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void setz(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SETE_RM8, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SFENCE</code> instruction<hr>
	 * <p>
	 * <code>SFENCE</code><p>
	 * <code>NP 0F AE F8</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sfence() {
		addInstruction(Instruction.create(Code.SFENCE));
	}

	/**
	 * <code>SGDT</code> instruction<hr>
	 * <p>
	 * <code>SGDT m</code><p>
	 * <code>0F 01 /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SGDT m</code><p>
	 * <code>o32 0F 01 /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>SGDT m</code><p>
	 * <code>o16 0F 01 /0</code><p>
	 * <code>286+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void sgdt(AsmMemoryOperand dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.SGDT_M1664;
		} else code = getBitness() >= 32 ? Code.SGDT_M1632 : Code.SGDT_M1632_16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SHA1MSG1</code> instruction<hr>
	 * <p>
	 * <code>SHA1MSG1 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 C9 /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1msg1(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SHA1MSG1_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SHA1MSG1</code> instruction<hr>
	 * <p>
	 * <code>SHA1MSG1 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 C9 /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1msg1(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SHA1MSG1_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SHA1MSG2</code> instruction<hr>
	 * <p>
	 * <code>SHA1MSG2 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 CA /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1msg2(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SHA1MSG2_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SHA1MSG2</code> instruction<hr>
	 * <p>
	 * <code>SHA1MSG2 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 CA /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1msg2(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SHA1MSG2_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SHA1NEXTE</code> instruction<hr>
	 * <p>
	 * <code>SHA1NEXTE xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 C8 /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1nexte(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SHA1NEXTE_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SHA1NEXTE</code> instruction<hr>
	 * <p>
	 * <code>SHA1NEXTE xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 C8 /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1nexte(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SHA1NEXTE_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SHA1RNDS4</code> instruction<hr>
	 * <p>
	 * <code>SHA1RNDS4 xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F 3A CC /r ib</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1rnds4(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.SHA1RNDS4_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHA1RNDS4</code> instruction<hr>
	 * <p>
	 * <code>SHA1RNDS4 xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F 3A CC /r ib</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha1rnds4(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.SHA1RNDS4_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SHA256MSG1</code> instruction<hr>
	 * <p>
	 * <code>SHA256MSG1 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 CC /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha256msg1(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SHA256MSG1_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SHA256MSG1</code> instruction<hr>
	 * <p>
	 * <code>SHA256MSG1 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 CC /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha256msg1(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SHA256MSG1_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SHA256MSG2</code> instruction<hr>
	 * <p>
	 * <code>SHA256MSG2 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 CD /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha256msg2(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SHA256MSG2_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SHA256MSG2</code> instruction<hr>
	 * <p>
	 * <code>SHA256MSG2 xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 38 CD /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha256msg2(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SHA256MSG2_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SHA256RNDS2</code> instruction<hr>
	 * <p>
	 * <code>SHA256RNDS2 xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>NP 0F 38 CB /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha256rnds2(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SHA256RNDS2_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SHA256RNDS2</code> instruction<hr>
	 * <p>
	 * <code>SHA256RNDS2 xmm1, xmm2/m128, &lt;XMM0&gt;</code><p>
	 * <code>NP 0F 38 CB /r</code><p>
	 * <code>SHA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sha256rnds2(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SHA256RNDS2_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m8, CL</code><p>
	 * <code>D2 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHL_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m16, CL</code><p>
	 * <code>o16 D3 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHL_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m32, CL</code><p>
	 * <code>o32 D3 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHL_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m64, CL</code><p>
	 * <code>o64 D3 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shl(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHL_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m64, CL</code><p>
	 * <code>o64 D3 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m32, CL</code><p>
	 * <code>o32 D3 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m16, CL</code><p>
	 * <code>o16 D3 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m8, CL</code><p>
	 * <code>D2 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SHL_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SHL_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SHL_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SHL_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SHL, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m8, 1</code><p>
	 * <code>D0 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m8, imm8</code><p>
	 * <code>C0 /4 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHL_RM8_1 : Code.SHL_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m16, 1</code><p>
	 * <code>o16 D1 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m16, imm8</code><p>
	 * <code>o16 C1 /4 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHL_RM16_1 : Code.SHL_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m32, 1</code><p>
	 * <code>o32 D1 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m32, imm8</code><p>
	 * <code>o32 C1 /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHL_RM32_1 : Code.SHL_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m64, 1</code><p>
	 * <code>o64 D1 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m64, imm8</code><p>
	 * <code>o64 C1 /4 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shl(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHL_RM64_1 : Code.SHL_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHL</code> instruction<hr>
	 * <p>
	 * <code>SHL r/m64, 1</code><p>
	 * <code>o64 D1 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m64, imm8</code><p>
	 * <code>o64 C1 /4 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m32, 1</code><p>
	 * <code>o32 D1 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m32, imm8</code><p>
	 * <code>o32 C1 /4 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m16, 1</code><p>
	 * <code>o16 D1 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m16, imm8</code><p>
	 * <code>o16 C1 /4 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m8, 1</code><p>
	 * <code>D0 /4</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHL r/m8, imm8</code><p>
	 * <code>C0 /4 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shl(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.SHL_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.SHL_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.SHL_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.SHL_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.SHL, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SHL_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SHL_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SHL_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SHL_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SHL, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m16, r16, CL</code><p>
	 * <code>o16 0F A5 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmRegister16 dst, AsmRegister16 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHLD_RM16_R16_CL, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m16, r16, CL</code><p>
	 * <code>o16 0F A5 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmMemoryOperand dst, AsmRegister16 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHLD_RM16_R16_CL, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m32, r32, CL</code><p>
	 * <code>o32 0F A5 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmRegister32 dst, AsmRegister32 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHLD_RM32_R32_CL, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m32, r32, CL</code><p>
	 * <code>o32 0F A5 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmMemoryOperand dst, AsmRegister32 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHLD_RM32_R32_CL, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m64, r64, CL</code><p>
	 * <code>o64 0F A5 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shld(AsmRegister64 dst, AsmRegister64 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHLD_RM64_R64_CL, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m64, r64, CL</code><p>
	 * <code>o64 0F A5 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shld(AsmMemoryOperand dst, AsmRegister64 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHLD_RM64_R64_CL, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m16, r16, imm8</code><p>
	 * <code>o16 0F A4 /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmRegister16 dst, AsmRegister16 src1, int imm) {
		addInstruction(Instruction.create(Code.SHLD_RM16_R16_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m16, r16, imm8</code><p>
	 * <code>o16 0F A4 /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmMemoryOperand dst, AsmRegister16 src1, int imm) {
		addInstruction(Instruction.create(Code.SHLD_RM16_R16_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m32, r32, imm8</code><p>
	 * <code>o32 0F A4 /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmRegister32 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.SHLD_RM32_R32_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m32, r32, imm8</code><p>
	 * <code>o32 0F A4 /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shld(AsmMemoryOperand dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.SHLD_RM32_R32_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m64, r64, imm8</code><p>
	 * <code>o64 0F A4 /r ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shld(AsmRegister64 dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.SHLD_RM64_R64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHLD</code> instruction<hr>
	 * <p>
	 * <code>SHLD r/m64, r64, imm8</code><p>
	 * <code>o64 0F A4 /r ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shld(AsmMemoryOperand dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.SHLD_RM64_R64_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>SHLX</code> instruction<hr>
	 * <p>
	 * <code>SHLX r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.66.0F38.W0 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shlx(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_SHLX_R32_RM32_R32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLX</code> instruction<hr>
	 * <p>
	 * <code>SHLX r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.66.0F38.W0 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shlx(AsmRegister32 dst, AsmMemoryOperand src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_SHLX_R32_RM32_R32, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>SHLX</code> instruction<hr>
	 * <p>
	 * <code>SHLX r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.66.0F38.W1 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void shlx(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_SHLX_R64_RM64_R64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHLX</code> instruction<hr>
	 * <p>
	 * <code>SHLX r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.66.0F38.W1 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void shlx(AsmRegister64 dst, AsmMemoryOperand src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_SHLX_R64_RM64_R64, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m8, CL</code><p>
	 * <code>D2 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHR_RM8_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m16, CL</code><p>
	 * <code>o16 D3 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmRegister16 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHR_RM16_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m32, CL</code><p>
	 * <code>o32 D3 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmRegister32 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHR_RM32_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m64, CL</code><p>
	 * <code>o64 D3 /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shr(AsmRegister64 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SHR_RM64_CL, dst.get(), src.get()));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m64, CL</code><p>
	 * <code>o64 D3 /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m32, CL</code><p>
	 * <code>o32 D3 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m16, CL</code><p>
	 * <code>o16 D3 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m8, CL</code><p>
	 * <code>D2 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmMemoryOperand dst, AsmRegister8 src) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SHR_RM64_CL;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SHR_RM32_CL;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SHR_RM16_CL;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SHR_RM8_CL;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SHR, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m8, 1</code><p>
	 * <code>D0 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m8, imm8</code><p>
	 * <code>C0 /5 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmRegister8 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHR_RM8_1 : Code.SHR_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m16, 1</code><p>
	 * <code>o16 D1 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m16, imm8</code><p>
	 * <code>o16 C1 /5 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmRegister16 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHR_RM16_1 : Code.SHR_RM16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m32, 1</code><p>
	 * <code>o32 D1 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m32, imm8</code><p>
	 * <code>o32 C1 /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmRegister32 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHR_RM32_1 : Code.SHR_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m64, 1</code><p>
	 * <code>o64 D1 /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m64, imm8</code><p>
	 * <code>o64 C1 /5 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shr(AsmRegister64 dst, int imm) {
		int code;
		code = imm == 1 ? Code.SHR_RM64_1 : Code.SHR_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SHR</code> instruction<hr>
	 * <p>
	 * <code>SHR r/m64, 1</code><p>
	 * <code>o64 D1 /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m64, imm8</code><p>
	 * <code>o64 C1 /5 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m32, 1</code><p>
	 * <code>o32 D1 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m32, imm8</code><p>
	 * <code>o32 C1 /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m16, 1</code><p>
	 * <code>o16 D1 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m16, imm8</code><p>
	 * <code>o16 C1 /5 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m8, 1</code><p>
	 * <code>D0 /5</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SHR r/m8, imm8</code><p>
	 * <code>C0 /5 ib</code><p>
	 * <code>186+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shr(AsmMemoryOperand dst, int imm) {
		int code;
		if (imm == 1) {
			if (dst.size == MemoryOperandSize.QWORD) {
				code = Code.SHR_RM64_1;
			} else if (dst.size == MemoryOperandSize.DWORD) {
				code = Code.SHR_RM32_1;
			} else if (dst.size == MemoryOperandSize.WORD) {
				code = Code.SHR_RM16_1;
			} else if (dst.size == MemoryOperandSize.BYTE) {
				code = Code.SHR_RM8_1;
			} else {
				throw noOpCodeFoundFor(Mnemonic.SHR, dst, imm);
			}
		} else if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.SHR_RM64_IMM8;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.SHR_RM32_IMM8;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.SHR_RM16_IMM8;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SHR_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SHR, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m16, r16, CL</code><p>
	 * <code>o16 0F AD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmRegister16 dst, AsmRegister16 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHRD_RM16_R16_CL, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m16, r16, CL</code><p>
	 * <code>o16 0F AD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmMemoryOperand dst, AsmRegister16 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHRD_RM16_R16_CL, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m32, r32, CL</code><p>
	 * <code>o32 0F AD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmRegister32 dst, AsmRegister32 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHRD_RM32_R32_CL, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m32, r32, CL</code><p>
	 * <code>o32 0F AD /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmMemoryOperand dst, AsmRegister32 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHRD_RM32_R32_CL, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m64, r64, CL</code><p>
	 * <code>o64 0F AD /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shrd(AsmRegister64 dst, AsmRegister64 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHRD_RM64_R64_CL, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m64, r64, CL</code><p>
	 * <code>o64 0F AD /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shrd(AsmMemoryOperand dst, AsmRegister64 src1, AsmRegister8 src2) {
		addInstruction(Instruction.create(Code.SHRD_RM64_R64_CL, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m16, r16, imm8</code><p>
	 * <code>o16 0F AC /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmRegister16 dst, AsmRegister16 src1, int imm) {
		addInstruction(Instruction.create(Code.SHRD_RM16_R16_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m16, r16, imm8</code><p>
	 * <code>o16 0F AC /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmMemoryOperand dst, AsmRegister16 src1, int imm) {
		addInstruction(Instruction.create(Code.SHRD_RM16_R16_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m32, r32, imm8</code><p>
	 * <code>o32 0F AC /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmRegister32 dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.SHRD_RM32_R32_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m32, r32, imm8</code><p>
	 * <code>o32 0F AC /r ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrd(AsmMemoryOperand dst, AsmRegister32 src1, int imm) {
		addInstruction(Instruction.create(Code.SHRD_RM32_R32_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m64, r64, imm8</code><p>
	 * <code>o64 0F AC /r ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shrd(AsmRegister64 dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.SHRD_RM64_R64_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHRD</code> instruction<hr>
	 * <p>
	 * <code>SHRD r/m64, r64, imm8</code><p>
	 * <code>o64 0F AC /r ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void shrd(AsmMemoryOperand dst, AsmRegister64 src1, int imm) {
		addInstruction(Instruction.create(Code.SHRD_RM64_R64_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>SHRX</code> instruction<hr>
	 * <p>
	 * <code>SHRX r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.F2.0F38.W0 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrx(AsmRegister32 dst, AsmRegister32 src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_SHRX_R32_RM32_R32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRX</code> instruction<hr>
	 * <p>
	 * <code>SHRX r32a, r/m32, r32b</code><p>
	 * <code>VEX.LZ.F2.0F38.W0 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shrx(AsmRegister32 dst, AsmMemoryOperand src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.VEX_SHRX_R32_RM32_R32, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>SHRX</code> instruction<hr>
	 * <p>
	 * <code>SHRX r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.F2.0F38.W1 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void shrx(AsmRegister64 dst, AsmRegister64 src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_SHRX_R64_RM64_R64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>SHRX</code> instruction<hr>
	 * <p>
	 * <code>SHRX r64a, r/m64, r64b</code><p>
	 * <code>VEX.LZ.F2.0F38.W1 F7 /r</code><p>
	 * <code>BMI2</code><p>
	 * <code>64-bit</code>
	 */
	public void shrx(AsmRegister64 dst, AsmMemoryOperand src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.VEX_SHRX_R64_RM64_R64, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>SHUFPD</code> instruction<hr>
	 * <p>
	 * <code>SHUFPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C6 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shufpd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.SHUFPD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHUFPD</code> instruction<hr>
	 * <p>
	 * <code>SHUFPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>66 0F C6 /r ib</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shufpd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.SHUFPD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SHUFPS</code> instruction<hr>
	 * <p>
	 * <code>SHUFPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C6 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shufps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.SHUFPS_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>SHUFPS</code> instruction<hr>
	 * <p>
	 * <code>SHUFPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>NP 0F C6 /r ib</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void shufps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.SHUFPS_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SIDT</code> instruction<hr>
	 * <p>
	 * <code>SIDT m</code><p>
	 * <code>0F 01 /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SIDT m</code><p>
	 * <code>o32 0F 01 /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32-bit</code><hr>
	 * <p>
	 * <code>SIDT m</code><p>
	 * <code>o16 0F 01 /1</code><p>
	 * <code>286+</code><p>
	 * <code>16/32-bit</code>
	 */
	public void sidt(AsmMemoryOperand dst) {
		int code;
		if (getBitness() == 64) {
			code = Code.SIDT_M1664;
		} else code = getBitness() >= 32 ? Code.SIDT_M1632 : Code.SIDT_M1632_16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SKINIT</code> instruction<hr>
	 * <p>
	 * <code>SKINIT</code><p>
	 * <code>0F 01 DE</code><p>
	 * <code>SKINIT or SVM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void skinit() {
		addInstruction(Instruction.create(Code.SKINIT));
	}

	/**
	 * <code>SLDT</code> instruction<hr>
	 * <p>
	 * <code>SLDT r/m16</code><p>
	 * <code>o16 0F 00 /0</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sldt(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.SLDT_RM16, dst.get()));
	}

	/**
	 * <code>SLDT</code> instruction<hr>
	 * <p>
	 * <code>SLDT r32/m16</code><p>
	 * <code>o32 0F 00 /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sldt(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.SLDT_R32M16, dst.get()));
	}

	/**
	 * <code>SLDT</code> instruction<hr>
	 * <p>
	 * <code>SLDT r64/m16</code><p>
	 * <code>o64 0F 00 /0</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sldt(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.SLDT_R64M16, dst.get()));
	}

	/**
	 * <code>SLDT</code> instruction<hr>
	 * <p>
	 * <code>SLDT r32/m16</code><p>
	 * <code>o32 0F 00 /0</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SLDT r/m16</code><p>
	 * <code>o16 0F 00 /0</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sldt(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.SLDT_R32M16 : Code.SLDT_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SLWPCB</code> instruction<hr>
	 * <p>
	 * <code>SLWPCB r32</code><p>
	 * <code>XOP.L0.X9.W0 12 /1</code><p>
	 * <code>LWP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void slwpcb(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.XOP_SLWPCB_R32, dst.get()));
	}

	/**
	 * <code>SLWPCB</code> instruction<hr>
	 * <p>
	 * <code>SLWPCB r64</code><p>
	 * <code>XOP.L0.X9.W1 12 /1</code><p>
	 * <code>LWP</code><p>
	 * <code>64-bit</code>
	 */
	public void slwpcb(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.XOP_SLWPCB_R64, dst.get()));
	}

	/**
	 * <code>SMINT</code> instruction<hr>
	 * <p>
	 * <code>SMINT</code><p>
	 * <code>0F 38</code><p>
	 * <code>Cyrix 6x86MX+, AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void smint() {
		addInstruction(Instruction.create(Code.SMINT));
	}

	/**
	 * <code>SMINT_0F7E</code> instruction<hr>
	 * <p>
	 * <code>SMINT</code><p>
	 * <code>0F 7E</code><p>
	 * <code>Cyrix 6x86 or earlier</code><p>
	 * <code>16/32-bit</code>
	 */
	public void smint_0f7e() {
		addInstruction(Instruction.create(Code.SMINT_0F7E));
	}

	/**
	 * <code>SMSW</code> instruction<hr>
	 * <p>
	 * <code>SMSW r/m16</code><p>
	 * <code>o16 0F 01 /4</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void smsw(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.SMSW_RM16, dst.get()));
	}

	/**
	 * <code>SMSW</code> instruction<hr>
	 * <p>
	 * <code>SMSW r32/m16</code><p>
	 * <code>o32 0F 01 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void smsw(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.SMSW_R32M16, dst.get()));
	}

	/**
	 * <code>SMSW</code> instruction<hr>
	 * <p>
	 * <code>SMSW r64/m16</code><p>
	 * <code>o64 0F 01 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void smsw(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.SMSW_R64M16, dst.get()));
	}

	/**
	 * <code>SMSW</code> instruction<hr>
	 * <p>
	 * <code>SMSW r32/m16</code><p>
	 * <code>o32 0F 01 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SMSW r/m16</code><p>
	 * <code>o16 0F 01 /4</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void smsw(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.SMSW_R32M16 : Code.SMSW_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SQRTPD</code> instruction<hr>
	 * <p>
	 * <code>SQRTPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 51 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SQRTPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SQRTPD</code> instruction<hr>
	 * <p>
	 * <code>SQRTPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 51 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SQRTPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SQRTPS</code> instruction<hr>
	 * <p>
	 * <code>SQRTPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 51 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SQRTPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SQRTPS</code> instruction<hr>
	 * <p>
	 * <code>SQRTPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 51 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SQRTPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SQRTSD</code> instruction<hr>
	 * <p>
	 * <code>SQRTSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 51 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SQRTSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>SQRTSD</code> instruction<hr>
	 * <p>
	 * <code>SQRTSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 51 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SQRTSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SQRTSS</code> instruction<hr>
	 * <p>
	 * <code>SQRTSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 51 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SQRTSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>SQRTSS</code> instruction<hr>
	 * <p>
	 * <code>SQRTSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 51 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sqrtss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SQRTSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>STAC</code> instruction<hr>
	 * <p>
	 * <code>STAC</code><p>
	 * <code>NP 0F 01 CB</code><p>
	 * <code>SMAP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void stac() {
		addInstruction(Instruction.create(Code.STAC));
	}

	/**
	 * <code>STC</code> instruction<hr>
	 * <p>
	 * <code>STC</code><p>
	 * <code>F9</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void stc() {
		addInstruction(Instruction.create(Code.STC));
	}

	/**
	 * <code>STD</code> instruction<hr>
	 * <p>
	 * <code>STD</code><p>
	 * <code>FD</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void std() {
		addInstruction(Instruction.create(Code.STD));
	}

	/**
	 * <code>STGI</code> instruction<hr>
	 * <p>
	 * <code>STGI</code><p>
	 * <code>0F 01 DC</code><p>
	 * <code>SKINIT or SVM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void stgi() {
		addInstruction(Instruction.create(Code.STGI));
	}

	/**
	 * <code>STI</code> instruction<hr>
	 * <p>
	 * <code>STI</code><p>
	 * <code>FB</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sti() {
		addInstruction(Instruction.create(Code.STI));
	}

	/**
	 * <code>STMXCSR</code> instruction<hr>
	 * <p>
	 * <code>STMXCSR m32</code><p>
	 * <code>NP 0F AE /3</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void stmxcsr(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.STMXCSR_M32, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>STOSB</code> instruction<hr>
	 * <p>
	 * <code>STOSB</code><p>
	 * <code>AA</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void stosb() {
		addInstruction(Instruction.createStosb(getBitness()));
	}

	/**
	 * <code>STOSD</code> instruction<hr>
	 * <p>
	 * <code>STOSD</code><p>
	 * <code>o32 AB</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void stosd() {
		addInstruction(Instruction.createStosd(getBitness()));
	}

	/**
	 * <code>STOSQ</code> instruction<hr>
	 * <p>
	 * <code>STOSQ</code><p>
	 * <code>o64 AB</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void stosq() {
		addInstruction(Instruction.createStosq(getBitness()));
	}

	/**
	 * <code>STOSW</code> instruction<hr>
	 * <p>
	 * <code>STOSW</code><p>
	 * <code>o16 AB</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void stosw() {
		addInstruction(Instruction.createStosw(getBitness()));
	}

	/**
	 * <code>STR</code> instruction<hr>
	 * <p>
	 * <code>STR r/m16</code><p>
	 * <code>o16 0F 00 /1</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void str(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.STR_RM16, dst.get()));
	}

	/**
	 * <code>STR</code> instruction<hr>
	 * <p>
	 * <code>STR r32/m16</code><p>
	 * <code>o32 0F 00 /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void str(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.STR_R32M16, dst.get()));
	}

	/**
	 * <code>STR</code> instruction<hr>
	 * <p>
	 * <code>STR r64/m16</code><p>
	 * <code>o64 0F 00 /1</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void str(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.STR_R64M16, dst.get()));
	}

	/**
	 * <code>STR</code> instruction<hr>
	 * <p>
	 * <code>STR r32/m16</code><p>
	 * <code>o32 0F 00 /1</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>STR r/m16</code><p>
	 * <code>o16 0F 00 /1</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void str(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.STR_R32M16 : Code.STR_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>STTILECFG</code> instruction<hr>
	 * <p>
	 * <code>STTILECFG m512</code><p>
	 * <code>VEX.128.66.0F38.W0 49 !(11):000:bbb</code><p>
	 * <code>AMX-TILE</code><p>
	 * <code>64-bit</code>
	 */
	public void sttilecfg(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VEX_STTILECFG_M512, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>STUI</code> instruction<hr>
	 * <p>
	 * <code>STUI</code><p>
	 * <code>F3 0F 01 EF</code><p>
	 * <code>UINTR</code><p>
	 * <code>64-bit</code>
	 */
	public void stui() {
		addInstruction(Instruction.create(Code.STUI));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m8, r8</code><p>
	 * <code>28 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SUB_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m8, r8</code><p>
	 * <code>28 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.SUB_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m16, r16</code><p>
	 * <code>o16 29 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.SUB_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m16, r16</code><p>
	 * <code>o16 29 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.SUB_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m32, r32</code><p>
	 * <code>o32 29 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.SUB_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m32, r32</code><p>
	 * <code>o32 29 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.SUB_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m64, r64</code><p>
	 * <code>o64 29 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sub(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.SUB_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m64, r64</code><p>
	 * <code>o64 29 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sub(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.SUB_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r8, r/m8</code><p>
	 * <code>2A /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUB_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r16, r/m16</code><p>
	 * <code>o16 2B /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUB_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r32, r/m32</code><p>
	 * <code>o32 2B /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUB_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r64, r/m64</code><p>
	 * <code>o64 2B /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sub(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUB_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB AL, imm8</code><p>
	 * <code>2C ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m8, imm8</code><p>
	 * <code>80 /5 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.SUB_AL_IMM8 : Code.SUB_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB AX, imm16</code><p>
	 * <code>o16 2D iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m16, imm16</code><p>
	 * <code>o16 81 /5 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m16, imm8</code><p>
	 * <code>o16 83 /5 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.SUB_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.SUB_RM16_IMM8 : Code.SUB_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB EAX, imm32</code><p>
	 * <code>o32 2D id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m32, imm32</code><p>
	 * <code>o32 81 /5 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m32, imm8</code><p>
	 * <code>o32 83 /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.SUB_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.SUB_RM32_IMM8 : Code.SUB_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB RAX, imm32</code><p>
	 * <code>o64 2D id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m64, imm32</code><p>
	 * <code>o64 81 /5 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m64, imm8</code><p>
	 * <code>o64 83 /5 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void sub(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.SUB_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.SUB_RM64_IMM8 : Code.SUB_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>SUB</code> instruction<hr>
	 * <p>
	 * <code>SUB r/m64, imm32</code><p>
	 * <code>o64 81 /5 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m64, imm8</code><p>
	 * <code>o64 83 /5 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m32, imm32</code><p>
	 * <code>o32 81 /5 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m32, imm8</code><p>
	 * <code>o32 83 /5 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m16, imm16</code><p>
	 * <code>o16 81 /5 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m16, imm8</code><p>
	 * <code>o16 83 /5 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>SUB r/m8, imm8</code><p>
	 * <code>80 /5 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sub(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.SUB_RM64_IMM8 : Code.SUB_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.SUB_RM32_IMM8 : Code.SUB_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.SUB_RM16_IMM8 : Code.SUB_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.SUB_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.SUB, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>SUBPD</code> instruction<hr>
	 * <p>
	 * <code>SUBPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SUBPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SUBPD</code> instruction<hr>
	 * <p>
	 * <code>SUBPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 5C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUBPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SUBPS</code> instruction<hr>
	 * <p>
	 * <code>SUBPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SUBPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>SUBPS</code> instruction<hr>
	 * <p>
	 * <code>SUBPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 5C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUBPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SUBSD</code> instruction<hr>
	 * <p>
	 * <code>SUBSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SUBSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>SUBSD</code> instruction<hr>
	 * <p>
	 * <code>SUBSD xmm1, xmm2/m64</code><p>
	 * <code>F2 0F 5C /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUBSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SUBSS</code> instruction<hr>
	 * <p>
	 * <code>SUBSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.SUBSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>SUBSS</code> instruction<hr>
	 * <p>
	 * <code>SUBSS xmm1, xmm2/m32</code><p>
	 * <code>F3 0F 5C /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void subss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.SUBSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SVDC</code> instruction<hr>
	 * <p>
	 * <code>SVDC m80, Sreg</code><p>
	 * <code>0F 78 /r</code><p>
	 * <code>Cyrix, AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void svdc(AsmMemoryOperand dst, AsmRegisterSegment src) {
		addInstruction(Instruction.create(Code.SVDC_M80_SREG, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>SVLDT</code> instruction<hr>
	 * <p>
	 * <code>SVLDT m80</code><p>
	 * <code>0F 7A /0</code><p>
	 * <code>Cyrix, AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void svldt(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SVLDT_M80, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SVTS</code> instruction<hr>
	 * <p>
	 * <code>SVTS m80</code><p>
	 * <code>0F 7C /0</code><p>
	 * <code>Cyrix, AMD Geode GX/LX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void svts(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.SVTS_M80, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>SWAPGS</code> instruction<hr>
	 * <p>
	 * <code>SWAPGS</code><p>
	 * <code>0F 01 F8</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void swapgs() {
		addInstruction(Instruction.create(Code.SWAPGS));
	}

	/**
	 * <code>SYSCALL</code> instruction<hr>
	 * <p>
	 * <code>SYSCALL</code><p>
	 * <code>0F 05</code><p>
	 * <code>SYSCALL</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void syscall() {
		addInstruction(Instruction.create(Code.SYSCALL));
	}

	/**
	 * <code>SYSENTER</code> instruction<hr>
	 * <p>
	 * <code>SYSENTER</code><p>
	 * <code>0F 34</code><p>
	 * <code>SEP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sysenter() {
		addInstruction(Instruction.create(Code.SYSENTER));
	}

	/**
	 * <code>SYSEXIT</code> instruction<hr>
	 * <p>
	 * <code>SYSEXIT</code><p>
	 * <code>0F 35</code><p>
	 * <code>SEP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sysexit() {
		addInstruction(Instruction.create(Code.SYSEXITD));
	}

	/**
	 * <code>SYSEXITQ</code> instruction<hr>
	 * <p>
	 * <code>SYSEXITQ</code><p>
	 * <code>o64 0F 35</code><p>
	 * <code>SEP</code><p>
	 * <code>64-bit</code>
	 */
	public void sysexitq() {
		addInstruction(Instruction.create(Code.SYSEXITQ));
	}

	/**
	 * <code>SYSRET</code> instruction<hr>
	 * <p>
	 * <code>SYSRET</code><p>
	 * <code>0F 07</code><p>
	 * <code>SYSCALL</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void sysret() {
		addInstruction(Instruction.create(Code.SYSRETD));
	}

	/**
	 * <code>SYSRETQ</code> instruction<hr>
	 * <p>
	 * <code>SYSRETQ</code><p>
	 * <code>o64 0F 07</code><p>
	 * <code>SYSCALL</code><p>
	 * <code>64-bit</code>
	 */
	public void sysretq() {
		addInstruction(Instruction.create(Code.SYSRETQ));
	}

	/**
	 * <code>T1MSKC</code> instruction<hr>
	 * <p>
	 * <code>T1MSKC r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /7</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void t1mskc(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_T1MSKC_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>T1MSKC</code> instruction<hr>
	 * <p>
	 * <code>T1MSKC r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /7</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void t1mskc(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_T1MSKC_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>T1MSKC</code> instruction<hr>
	 * <p>
	 * <code>T1MSKC r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /7</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void t1mskc(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_T1MSKC_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>T1MSKC</code> instruction<hr>
	 * <p>
	 * <code>T1MSKC r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /7</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void t1mskc(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_T1MSKC_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>TDCALL</code> instruction<hr>
	 * <p>
	 * <code>TDCALL</code><p>
	 * <code>66 0F 01 CC</code><p>
	 * <code>TDX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tdcall() {
		addInstruction(Instruction.create(Code.TDCALL));
	}

	/**
	 * <code>TDPBF16PS</code> instruction<hr>
	 * <p>
	 * <code>TDPBF16PS tmm1, tmm2, tmm3</code><p>
	 * <code>VEX.128.F3.0F38.W0 5C 11:rrr:bbb</code><p>
	 * <code>AMX-BF16</code><p>
	 * <code>64-bit</code>
	 */
	public void tdpbf16ps(AsmRegisterTMM dst, AsmRegisterTMM src1, AsmRegisterTMM src2) {
		addInstruction(Instruction.create(Code.VEX_TDPBF16PS_TMM_TMM_TMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>TDPBSSD</code> instruction<hr>
	 * <p>
	 * <code>TDPBSSD tmm1, tmm2, tmm3</code><p>
	 * <code>VEX.128.F2.0F38.W0 5E 11:rrr:bbb</code><p>
	 * <code>AMX-INT8</code><p>
	 * <code>64-bit</code>
	 */
	public void tdpbssd(AsmRegisterTMM dst, AsmRegisterTMM src1, AsmRegisterTMM src2) {
		addInstruction(Instruction.create(Code.VEX_TDPBSSD_TMM_TMM_TMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>TDPBSUD</code> instruction<hr>
	 * <p>
	 * <code>TDPBSUD tmm1, tmm2, tmm3</code><p>
	 * <code>VEX.128.F3.0F38.W0 5E 11:rrr:bbb</code><p>
	 * <code>AMX-INT8</code><p>
	 * <code>64-bit</code>
	 */
	public void tdpbsud(AsmRegisterTMM dst, AsmRegisterTMM src1, AsmRegisterTMM src2) {
		addInstruction(Instruction.create(Code.VEX_TDPBSUD_TMM_TMM_TMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>TDPBUSD</code> instruction<hr>
	 * <p>
	 * <code>TDPBUSD tmm1, tmm2, tmm3</code><p>
	 * <code>VEX.128.66.0F38.W0 5E 11:rrr:bbb</code><p>
	 * <code>AMX-INT8</code><p>
	 * <code>64-bit</code>
	 */
	public void tdpbusd(AsmRegisterTMM dst, AsmRegisterTMM src1, AsmRegisterTMM src2) {
		addInstruction(Instruction.create(Code.VEX_TDPBUSD_TMM_TMM_TMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>TDPBUUD</code> instruction<hr>
	 * <p>
	 * <code>TDPBUUD tmm1, tmm2, tmm3</code><p>
	 * <code>VEX.128.0F38.W0 5E 11:rrr:bbb</code><p>
	 * <code>AMX-INT8</code><p>
	 * <code>64-bit</code>
	 */
	public void tdpbuud(AsmRegisterTMM dst, AsmRegisterTMM src1, AsmRegisterTMM src2) {
		addInstruction(Instruction.create(Code.VEX_TDPBUUD_TMM_TMM_TMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m8, r8</code><p>
	 * <code>84 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.TEST_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m8, r8</code><p>
	 * <code>84 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.TEST_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m16, r16</code><p>
	 * <code>o16 85 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.TEST_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m16, r16</code><p>
	 * <code>o16 85 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.TEST_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m32, r32</code><p>
	 * <code>o32 85 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.TEST_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m32, r32</code><p>
	 * <code>o32 85 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.TEST_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m64, r64</code><p>
	 * <code>o64 85 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void test(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.TEST_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m64, r64</code><p>
	 * <code>o64 85 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void test(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.TEST_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST AL, imm8</code><p>
	 * <code>A8 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>TEST r/m8, imm8</code><p>
	 * <code>F6 /0 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.TEST_AL_IMM8 : Code.TEST_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST AX, imm16</code><p>
	 * <code>o16 A9 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>TEST r/m16, imm16</code><p>
	 * <code>o16 F7 /0 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmRegister16 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AX ? Code.TEST_AX_IMM16 : Code.TEST_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST EAX, imm32</code><p>
	 * <code>o32 A9 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>TEST r/m32, imm32</code><p>
	 * <code>o32 F7 /0 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmRegister32 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.EAX ? Code.TEST_EAX_IMM32 : Code.TEST_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST RAX, imm32</code><p>
	 * <code>o64 A9 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>TEST r/m64, imm32</code><p>
	 * <code>o64 F7 /0 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void test(AsmRegister64 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.RAX ? Code.TEST_RAX_IMM32 : Code.TEST_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>TEST</code> instruction<hr>
	 * <p>
	 * <code>TEST r/m64, imm32</code><p>
	 * <code>o64 F7 /0 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>TEST r/m32, imm32</code><p>
	 * <code>o32 F7 /0 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>TEST r/m16, imm16</code><p>
	 * <code>o16 F7 /0 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>TEST r/m8, imm8</code><p>
	 * <code>F6 /0 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void test(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = Code.TEST_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = Code.TEST_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = Code.TEST_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.TEST_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.TEST, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>TESTUI</code> instruction<hr>
	 * <p>
	 * <code>TESTUI</code><p>
	 * <code>F3 0F 01 ED</code><p>
	 * <code>UINTR</code><p>
	 * <code>64-bit</code>
	 */
	public void testui() {
		addInstruction(Instruction.create(Code.TESTUI));
	}

	/**
	 * <code>TILELOADD</code> instruction<hr>
	 * <p>
	 * <code>TILELOADD tmm1, sibmem</code><p>
	 * <code>VEX.128.F2.0F38.W0 4B !(11):rrr:100</code><p>
	 * <code>AMX-TILE</code><p>
	 * <code>64-bit</code>
	 */
	public void tileloadd(AsmRegisterTMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_TILELOADD_TMM_SIBMEM, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>TILELOADDT1</code> instruction<hr>
	 * <p>
	 * <code>TILELOADDT1 tmm1, sibmem</code><p>
	 * <code>VEX.128.66.0F38.W0 4B !(11):rrr:100</code><p>
	 * <code>AMX-TILE</code><p>
	 * <code>64-bit</code>
	 */
	public void tileloaddt1(AsmRegisterTMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_TILELOADDT1_TMM_SIBMEM, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>TILERELEASE</code> instruction<hr>
	 * <p>
	 * <code>TILERELEASE</code><p>
	 * <code>VEX.128.0F38.W0 49 C0</code><p>
	 * <code>AMX-TILE</code><p>
	 * <code>64-bit</code>
	 */
	public void tilerelease() {
		addInstruction(Instruction.create(Code.VEX_TILERELEASE));
	}

	/**
	 * <code>TILESTORED</code> instruction<hr>
	 * <p>
	 * <code>TILESTORED sibmem, tmm1</code><p>
	 * <code>VEX.128.F3.0F38.W0 4B !(11):rrr:100</code><p>
	 * <code>AMX-TILE</code><p>
	 * <code>64-bit</code>
	 */
	public void tilestored(AsmMemoryOperand dst, AsmRegisterTMM src) {
		addInstruction(Instruction.create(Code.VEX_TILESTORED_SIBMEM_TMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>TILEZERO</code> instruction<hr>
	 * <p>
	 * <code>TILEZERO tmm1</code><p>
	 * <code>VEX.128.F2.0F38.W0 49 11:rrr:000</code><p>
	 * <code>AMX-TILE</code><p>
	 * <code>64-bit</code>
	 */
	public void tilezero(AsmRegisterTMM dst) {
		addInstruction(Instruction.create(Code.VEX_TILEZERO_TMM, dst.get()));
	}

	/**
	 * <code>TLBSYNC</code> instruction<hr>
	 * <p>
	 * <code>TLBSYNC</code><p>
	 * <code>NP 0F 01 FF</code><p>
	 * <code>INVLPGB</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tlbsync() {
		addInstruction(Instruction.create(Code.TLBSYNC));
	}

	/**
	 * <code>TPAUSE</code> instruction<hr>
	 * <p>
	 * <code>TPAUSE r32, &lt;edx&gt;, &lt;eax&gt;</code><p>
	 * <code>66 0F AE /6</code><p>
	 * <code>WAITPKG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tpause(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.TPAUSE_R32, dst.get()));
	}

	/**
	 * <code>TPAUSE</code> instruction<hr>
	 * <p>
	 * <code>TPAUSE r64, &lt;edx&gt;, &lt;eax&gt;</code><p>
	 * <code>66 o64 0F AE /6</code><p>
	 * <code>WAITPKG</code><p>
	 * <code>64-bit</code>
	 */
	public void tpause(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.TPAUSE_R64, dst.get()));
	}

	/**
	 * <code>TZCNT</code> instruction<hr>
	 * <p>
	 * <code>TZCNT r16, r/m16</code><p>
	 * <code>o16 F3 0F BC /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tzcnt(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.TZCNT_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>TZCNT</code> instruction<hr>
	 * <p>
	 * <code>TZCNT r32, r/m32</code><p>
	 * <code>o32 F3 0F BC /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tzcnt(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.TZCNT_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>TZCNT</code> instruction<hr>
	 * <p>
	 * <code>TZCNT r64, r/m64</code><p>
	 * <code>F3 o64 0F BC /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void tzcnt(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.TZCNT_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>TZCNT</code> instruction<hr>
	 * <p>
	 * <code>TZCNT r16, r/m16</code><p>
	 * <code>o16 F3 0F BC /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tzcnt(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.TZCNT_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>TZCNT</code> instruction<hr>
	 * <p>
	 * <code>TZCNT r32, r/m32</code><p>
	 * <code>o32 F3 0F BC /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tzcnt(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.TZCNT_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>TZCNT</code> instruction<hr>
	 * <p>
	 * <code>TZCNT r64, r/m64</code><p>
	 * <code>F3 o64 0F BC /r</code><p>
	 * <code>BMI1</code><p>
	 * <code>64-bit</code>
	 */
	public void tzcnt(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.TZCNT_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>TZMSK</code> instruction<hr>
	 * <p>
	 * <code>TZMSK r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /4</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tzmsk(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOP_TZMSK_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>TZMSK</code> instruction<hr>
	 * <p>
	 * <code>TZMSK r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /4</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void tzmsk(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOP_TZMSK_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>TZMSK</code> instruction<hr>
	 * <p>
	 * <code>TZMSK r32, r/m32</code><p>
	 * <code>XOP.L0.X9.W0 01 /4</code><p>
	 * <code>TBM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void tzmsk(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_TZMSK_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>TZMSK</code> instruction<hr>
	 * <p>
	 * <code>TZMSK r64, r/m64</code><p>
	 * <code>XOP.L0.X9.W1 01 /4</code><p>
	 * <code>TBM</code><p>
	 * <code>64-bit</code>
	 */
	public void tzmsk(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_TZMSK_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UCOMISD</code> instruction<hr>
	 * <p>
	 * <code>UCOMISD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 2E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ucomisd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.UCOMISD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>UCOMISD</code> instruction<hr>
	 * <p>
	 * <code>UCOMISD xmm1, xmm2/m64</code><p>
	 * <code>66 0F 2E /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ucomisd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UCOMISD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UCOMISS</code> instruction<hr>
	 * <p>
	 * <code>UCOMISS xmm1, xmm2/m32</code><p>
	 * <code>NP 0F 2E /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ucomiss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.UCOMISS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>UCOMISS</code> instruction<hr>
	 * <p>
	 * <code>UCOMISS xmm1, xmm2/m32</code><p>
	 * <code>NP 0F 2E /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ucomiss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UCOMISS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UD0</code> instruction<hr>
	 * <p>
	 * <code>UD0</code><p>
	 * <code>0F FF</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud0() {
		addInstruction(Instruction.create(Code.UD0));
	}

	/**
	 * <code>UD0</code> instruction<hr>
	 * <p>
	 * <code>UD0 r16, r/m16</code><p>
	 * <code>o16 0F FF /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud0(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.UD0_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>UD0</code> instruction<hr>
	 * <p>
	 * <code>UD0 r32, r/m32</code><p>
	 * <code>o32 0F FF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud0(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.UD0_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>UD0</code> instruction<hr>
	 * <p>
	 * <code>UD0 r64, r/m64</code><p>
	 * <code>o64 0F FF /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void ud0(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.UD0_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>UD0</code> instruction<hr>
	 * <p>
	 * <code>UD0 r16, r/m16</code><p>
	 * <code>o16 0F FF /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud0(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UD0_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UD0</code> instruction<hr>
	 * <p>
	 * <code>UD0 r32, r/m32</code><p>
	 * <code>o32 0F FF /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud0(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UD0_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UD0</code> instruction<hr>
	 * <p>
	 * <code>UD0 r64, r/m64</code><p>
	 * <code>o64 0F FF /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void ud0(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UD0_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UD1</code> instruction<hr>
	 * <p>
	 * <code>UD1 r16, r/m16</code><p>
	 * <code>o16 0F B9 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud1(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.UD1_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>UD1</code> instruction<hr>
	 * <p>
	 * <code>UD1 r32, r/m32</code><p>
	 * <code>o32 0F B9 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud1(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.UD1_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>UD1</code> instruction<hr>
	 * <p>
	 * <code>UD1 r64, r/m64</code><p>
	 * <code>o64 0F B9 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void ud1(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.UD1_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>UD1</code> instruction<hr>
	 * <p>
	 * <code>UD1 r16, r/m16</code><p>
	 * <code>o16 0F B9 /r</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud1(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UD1_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UD1</code> instruction<hr>
	 * <p>
	 * <code>UD1 r32, r/m32</code><p>
	 * <code>o32 0F B9 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud1(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UD1_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UD1</code> instruction<hr>
	 * <p>
	 * <code>UD1 r64, r/m64</code><p>
	 * <code>o64 0F B9 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void ud1(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UD1_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UD2</code> instruction<hr>
	 * <p>
	 * <code>UD2</code><p>
	 * <code>0F 0B</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void ud2() {
		addInstruction(Instruction.create(Code.UD2));
	}

	/**
	 * <code>UIRET</code> instruction<hr>
	 * <p>
	 * <code>UIRET</code><p>
	 * <code>F3 0F 01 EC</code><p>
	 * <code>UINTR</code><p>
	 * <code>64-bit</code>
	 */
	public void uiret() {
		addInstruction(Instruction.create(Code.UIRET));
	}

	/**
	 * <code>UMONITOR</code> instruction<hr>
	 * <p>
	 * <code>UMONITOR r16</code><p>
	 * <code>a16 F3 0F AE /6</code><p>
	 * <code>WAITPKG</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umonitor(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.UMONITOR_R16, dst.get()));
	}

	/**
	 * <code>UMONITOR</code> instruction<hr>
	 * <p>
	 * <code>UMONITOR r32</code><p>
	 * <code>a32 F3 0F AE /6</code><p>
	 * <code>WAITPKG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void umonitor(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.UMONITOR_R32, dst.get()));
	}

	/**
	 * <code>UMONITOR</code> instruction<hr>
	 * <p>
	 * <code>UMONITOR r64</code><p>
	 * <code>a64 F3 0F AE /6</code><p>
	 * <code>WAITPKG</code><p>
	 * <code>64-bit</code>
	 */
	public void umonitor(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.UMONITOR_R64, dst.get()));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r/m8, r8</code><p>
	 * <code>0F 10 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.UMOV_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r/m8, r8</code><p>
	 * <code>0F 10 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.UMOV_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r/m16, r16</code><p>
	 * <code>o16 0F 11 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.UMOV_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r/m16, r16</code><p>
	 * <code>o16 0F 11 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.UMOV_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r/m32, r32</code><p>
	 * <code>o32 0F 11 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.UMOV_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r/m32, r32</code><p>
	 * <code>o32 0F 11 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.UMOV_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r8, r/m8</code><p>
	 * <code>0F 12 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UMOV_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r16, r/m16</code><p>
	 * <code>o16 0F 13 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UMOV_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UMOV</code> instruction<hr>
	 * <p>
	 * <code>UMOV r32, r/m32</code><p>
	 * <code>o32 0F 13 /r</code><p>
	 * <code>386/486</code><p>
	 * <code>16/32-bit</code>
	 */
	public void umov(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UMOV_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UMWAIT</code> instruction<hr>
	 * <p>
	 * <code>UMWAIT r32, &lt;edx&gt;, &lt;eax&gt;</code><p>
	 * <code>F2 0F AE /6</code><p>
	 * <code>WAITPKG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void umwait(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.UMWAIT_R32, dst.get()));
	}

	/**
	 * <code>UMWAIT</code> instruction<hr>
	 * <p>
	 * <code>UMWAIT r64, &lt;edx&gt;, &lt;eax&gt;</code><p>
	 * <code>F2 o64 0F AE /6</code><p>
	 * <code>WAITPKG</code><p>
	 * <code>64-bit</code>
	 */
	public void umwait(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.UMWAIT_R64, dst.get()));
	}

	/**
	 * <code>UNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>UNPCKHPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 15 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpckhpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.UNPCKHPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>UNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>UNPCKHPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 15 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpckhpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UNPCKHPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>UNPCKHPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 15 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpckhps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.UNPCKHPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>UNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>UNPCKHPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 15 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpckhps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UNPCKHPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>UNPCKLPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 14 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpcklpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.UNPCKLPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>UNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>UNPCKLPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 14 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpcklpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UNPCKLPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>UNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>UNPCKLPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 14 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpcklps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.UNPCKLPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>UNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>UNPCKLPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 14 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void unpcklps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.UNPCKLPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>V4FMADDPS</code> instruction<hr>
	 * <p>
	 * <code>V4FMADDPS zmm1 {k1}{z}, zmm2+3, m128</code><p>
	 * <code>EVEX.512.F2.0F38.W0 9A /r</code><p>
	 * <code>AVX512_4FMAPS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void v4fmaddps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_V4FMADDPS_ZMM_K1Z_ZMMP3_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>V4FMADDSS</code> instruction<hr>
	 * <p>
	 * <code>V4FMADDSS xmm1 {k1}{z}, xmm2+3, m128</code><p>
	 * <code>EVEX.LIG.F2.0F38.W0 9B /r</code><p>
	 * <code>AVX512_4FMAPS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void v4fmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_V4FMADDSS_XMM_K1Z_XMMP3_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>V4FNMADDPS</code> instruction<hr>
	 * <p>
	 * <code>V4FNMADDPS zmm1 {k1}{z}, zmm2+3, m128</code><p>
	 * <code>EVEX.512.F2.0F38.W0 AA /r</code><p>
	 * <code>AVX512_4FMAPS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void v4fnmaddps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_V4FNMADDPS_ZMM_K1Z_ZMMP3_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>V4FNMADDSS</code> instruction<hr>
	 * <p>
	 * <code>V4FNMADDSS xmm1 {k1}{z}, xmm2+3, m128</code><p>
	 * <code>EVEX.LIG.F2.0F38.W0 AB /r</code><p>
	 * <code>AVX512_4FMAPS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void v4fnmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_V4FNMADDSS_XMM_K1Z_XMMP3_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VADDPD</code> instruction<hr>
	 * <p>
	 * <code>VADDPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDPD_XMM_XMM_XMMM128 : Code.EVEX_VADDPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VADDPD</code> instruction<hr>
	 * <p>
	 * <code>VADDPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDPD_YMM_YMM_YMMM256 : Code.EVEX_VADDPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VADDPD</code> instruction<hr>
	 * <p>
	 * <code>VADDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPD</code> instruction<hr>
	 * <p>
	 * <code>VADDPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VADDPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VADDPD_XMM_XMM_XMMM128 : Code.EVEX_VADDPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPD</code> instruction<hr>
	 * <p>
	 * <code>VADDPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VADDPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VADDPD_YMM_YMM_YMMM256 : Code.EVEX_VADDPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPD</code> instruction<hr>
	 * <p>
	 * <code>VADDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPH</code> instruction<hr>
	 * <p>
	 * <code>VADDPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VADDPH</code> instruction<hr>
	 * <p>
	 * <code>VADDPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VADDPH</code> instruction<hr>
	 * <p>
	 * <code>VADDPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 58 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPH</code> instruction<hr>
	 * <p>
	 * <code>VADDPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPH</code> instruction<hr>
	 * <p>
	 * <code>VADDPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPH</code> instruction<hr>
	 * <p>
	 * <code>VADDPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 58 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPS</code> instruction<hr>
	 * <p>
	 * <code>VADDPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDPS_XMM_XMM_XMMM128 : Code.EVEX_VADDPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VADDPS</code> instruction<hr>
	 * <p>
	 * <code>VADDPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDPS_YMM_YMM_YMMM256 : Code.EVEX_VADDPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VADDPS</code> instruction<hr>
	 * <p>
	 * <code>VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPS</code> instruction<hr>
	 * <p>
	 * <code>VADDPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VADDPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VADDPS_XMM_XMM_XMMM128 : Code.EVEX_VADDPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPS</code> instruction<hr>
	 * <p>
	 * <code>VADDPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VADDPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VADDPS_YMM_YMM_YMMM256 : Code.EVEX_VADDPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDPS</code> instruction<hr>
	 * <p>
	 * <code>VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDSD</code> instruction<hr>
	 * <p>
	 * <code>VADDSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDSD_XMM_XMM_XMMM64 : Code.EVEX_VADDSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDSD</code> instruction<hr>
	 * <p>
	 * <code>VADDSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDSD_XMM_XMM_XMMM64 : Code.EVEX_VADDSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDSH</code> instruction<hr>
	 * <p>
	 * <code>VADDSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 58 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDSH</code> instruction<hr>
	 * <p>
	 * <code>VADDSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 58 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VADDSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDSS</code> instruction<hr>
	 * <p>
	 * <code>VADDSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDSS_XMM_XMM_XMMM32 : Code.EVEX_VADDSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDSS</code> instruction<hr>
	 * <p>
	 * <code>VADDSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 58 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VADDSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VADDSS_XMM_XMM_XMMM32 : Code.EVEX_VADDSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPS_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPS_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPS_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VADDSUBPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG D0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaddsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VADDSUBPS_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESDEC</code> instruction<hr>
	 * <p>
	 * <code>VAESDEC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DE /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDEC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DE /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdec(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDEC_XMM_XMM_XMMM128 : Code.EVEX_VAESDEC_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESDEC</code> instruction<hr>
	 * <p>
	 * <code>VAESDEC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DE /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDEC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DE /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdec(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDEC_YMM_YMM_YMMM256 : Code.EVEX_VAESDEC_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESDEC</code> instruction<hr>
	 * <p>
	 * <code>VAESDEC zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DE /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdec(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESDEC_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESDEC</code> instruction<hr>
	 * <p>
	 * <code>VAESDEC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DE /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDEC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DE /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdec(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDEC_XMM_XMM_XMMM128 : Code.EVEX_VAESDEC_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESDEC</code> instruction<hr>
	 * <p>
	 * <code>VAESDEC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DE /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDEC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DE /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdec(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDEC_YMM_YMM_YMMM256 : Code.EVEX_VAESDEC_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESDEC</code> instruction<hr>
	 * <p>
	 * <code>VAESDEC zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DE /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdec(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESDEC_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESDECLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DF /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDECLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DF /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdeclast(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDECLAST_XMM_XMM_XMMM128 : Code.EVEX_VAESDECLAST_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESDECLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DF /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDECLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DF /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdeclast(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDECLAST_YMM_YMM_YMMM256 : Code.EVEX_VAESDECLAST_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESDECLAST zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DF /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdeclast(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESDECLAST_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESDECLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DF /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDECLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DF /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdeclast(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDECLAST_XMM_XMM_XMMM128 : Code.EVEX_VAESDECLAST_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESDECLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DF /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESDECLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DF /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdeclast(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESDECLAST_YMM_YMM_YMMM256 : Code.EVEX_VAESDECLAST_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESDECLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESDECLAST zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DF /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesdeclast(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESDECLAST_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESENC</code> instruction<hr>
	 * <p>
	 * <code>VAESENC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DC /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DC /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenc(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENC_XMM_XMM_XMMM128 : Code.EVEX_VAESENC_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESENC</code> instruction<hr>
	 * <p>
	 * <code>VAESENC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DC /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DC /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenc(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENC_YMM_YMM_YMMM256 : Code.EVEX_VAESENC_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESENC</code> instruction<hr>
	 * <p>
	 * <code>VAESENC zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DC /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenc(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESENC_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESENC</code> instruction<hr>
	 * <p>
	 * <code>VAESENC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DC /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENC xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DC /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenc(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENC_XMM_XMM_XMMM128 : Code.EVEX_VAESENC_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESENC</code> instruction<hr>
	 * <p>
	 * <code>VAESENC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DC /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENC ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DC /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenc(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENC_YMM_YMM_YMMM256 : Code.EVEX_VAESENC_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESENC</code> instruction<hr>
	 * <p>
	 * <code>VAESENC zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DC /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenc(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESENC_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESENCLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DD /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENCLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DD /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenclast(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENCLAST_XMM_XMM_XMMM128 : Code.EVEX_VAESENCLAST_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESENCLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DD /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENCLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DD /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenclast(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENCLAST_YMM_YMM_YMMM256 : Code.EVEX_VAESENCLAST_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESENCLAST zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DD /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenclast(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESENCLAST_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VAESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESENCLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DD /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENCLAST xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG DD /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenclast(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENCLAST_XMM_XMM_XMMM128 : Code.EVEX_VAESENCLAST_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESENCLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG DD /r</code><p>
	 * <code>VAES</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VAESENCLAST ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG DD /r</code><p>
	 * <code>AVX512VL and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenclast(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VAESENCLAST_YMM_YMM_YMMM256 : Code.EVEX_VAESENCLAST_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESENCLAST</code> instruction<hr>
	 * <p>
	 * <code>VAESENCLAST zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG DD /r</code><p>
	 * <code>AVX512F and VAES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesenclast(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VAESENCLAST_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESIMC</code> instruction<hr>
	 * <p>
	 * <code>VAESIMC xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DB /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesimc(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VAESIMC_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VAESIMC</code> instruction<hr>
	 * <p>
	 * <code>VAESIMC xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG DB /r</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaesimc(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VAESIMC_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VAESKEYGENASSIST</code> instruction<hr>
	 * <p>
	 * <code>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG DF /r ib</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaeskeygenassist(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VAESKEYGENASSIST_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VAESKEYGENASSIST</code> instruction<hr>
	 * <p>
	 * <code>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG DF /r ib</code><p>
	 * <code>AES and AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vaeskeygenassist(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VAESKEYGENASSIST_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VALIGND</code> instruction<hr>
	 * <p>
	 * <code>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGND_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VALIGND</code> instruction<hr>
	 * <p>
	 * <code>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGND_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VALIGND</code> instruction<hr>
	 * <p>
	 * <code>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 03 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGND_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VALIGND</code> instruction<hr>
	 * <p>
	 * <code>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGND_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VALIGND</code> instruction<hr>
	 * <p>
	 * <code>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGND_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VALIGND</code> instruction<hr>
	 * <p>
	 * <code>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 03 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGND_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VALIGNQ</code> instruction<hr>
	 * <p>
	 * <code>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGNQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VALIGNQ</code> instruction<hr>
	 * <p>
	 * <code>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGNQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VALIGNQ</code> instruction<hr>
	 * <p>
	 * <code>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 03 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGNQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VALIGNQ</code> instruction<hr>
	 * <p>
	 * <code>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGNQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VALIGNQ</code> instruction<hr>
	 * <p>
	 * <code>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 03 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGNQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VALIGNQ</code> instruction<hr>
	 * <p>
	 * <code>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 03 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void valignq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VALIGNQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDNPD</code> instruction<hr>
	 * <p>
	 * <code>VANDNPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDNPD_XMM_XMM_XMMM128 : Code.EVEX_VANDNPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDNPD</code> instruction<hr>
	 * <p>
	 * <code>VANDNPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDNPD_YMM_YMM_YMMM256 : Code.EVEX_VANDNPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDNPD</code> instruction<hr>
	 * <p>
	 * <code>VANDNPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 55 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDNPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDNPD</code> instruction<hr>
	 * <p>
	 * <code>VANDNPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDNPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDNPD_XMM_XMM_XMMM128 : Code.EVEX_VANDNPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDNPD</code> instruction<hr>
	 * <p>
	 * <code>VANDNPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDNPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDNPD_YMM_YMM_YMMM256 : Code.EVEX_VANDNPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDNPD</code> instruction<hr>
	 * <p>
	 * <code>VANDNPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 55 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDNPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDNPS</code> instruction<hr>
	 * <p>
	 * <code>VANDNPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDNPS_XMM_XMM_XMMM128 : Code.EVEX_VANDNPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDNPS</code> instruction<hr>
	 * <p>
	 * <code>VANDNPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDNPS_YMM_YMM_YMMM256 : Code.EVEX_VANDNPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDNPS</code> instruction<hr>
	 * <p>
	 * <code>VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 55 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDNPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDNPS</code> instruction<hr>
	 * <p>
	 * <code>VANDNPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDNPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDNPS_XMM_XMM_XMMM128 : Code.EVEX_VANDNPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDNPS</code> instruction<hr>
	 * <p>
	 * <code>VANDNPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 55 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDNPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDNPS_YMM_YMM_YMMM256 : Code.EVEX_VANDNPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDNPS</code> instruction<hr>
	 * <p>
	 * <code>VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 55 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandnps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDNPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDPD</code> instruction<hr>
	 * <p>
	 * <code>VANDPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDPD_XMM_XMM_XMMM128 : Code.EVEX_VANDPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDPD</code> instruction<hr>
	 * <p>
	 * <code>VANDPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDPD_YMM_YMM_YMMM256 : Code.EVEX_VANDPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDPD</code> instruction<hr>
	 * <p>
	 * <code>VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 54 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDPD</code> instruction<hr>
	 * <p>
	 * <code>VANDPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDPD_XMM_XMM_XMMM128 : Code.EVEX_VANDPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDPD</code> instruction<hr>
	 * <p>
	 * <code>VANDPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDPD_YMM_YMM_YMMM256 : Code.EVEX_VANDPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDPD</code> instruction<hr>
	 * <p>
	 * <code>VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 54 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDPS</code> instruction<hr>
	 * <p>
	 * <code>VANDPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDPS_XMM_XMM_XMMM128 : Code.EVEX_VANDPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDPS</code> instruction<hr>
	 * <p>
	 * <code>VANDPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VANDPS_YMM_YMM_YMMM256 : Code.EVEX_VANDPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDPS</code> instruction<hr>
	 * <p>
	 * <code>VANDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 54 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VANDPS</code> instruction<hr>
	 * <p>
	 * <code>VANDPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDPS_XMM_XMM_XMMM128 : Code.EVEX_VANDPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDPS</code> instruction<hr>
	 * <p>
	 * <code>VANDPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 54 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VANDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VANDPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VANDPS_YMM_YMM_YMMM256 : Code.EVEX_VANDPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VANDPS</code> instruction<hr>
	 * <p>
	 * <code>VANDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 54 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vandps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VANDPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VBLENDMPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VBLENDMPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VBLENDMPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 65 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VBLENDMPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VBLENDMPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VBLENDMPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 65 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VBLENDMPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VBLENDMPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VBLENDMPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 65 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VBLENDMPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VBLENDMPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 65 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VBLENDMPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 65 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendmps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VBLENDMPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VBLENDPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0D /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VBLENDPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0D /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPD_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VBLENDPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0D /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VBLENDPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0D /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPD_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VBLENDPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0C /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPS_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VBLENDPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0C /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPS_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VBLENDPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0C /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPS_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VBLENDPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0C /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VBLENDPS_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VBLENDVPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 4B /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VBLENDVPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 4B /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VBLENDVPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 4B /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VBLENDVPD</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 4B /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VBLENDVPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 4A /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VBLENDVPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 4A /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VBLENDVPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 4A /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VBLENDVPS</code> instruction<hr>
	 * <p>
	 * <code>VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 4A /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vblendvps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VBLENDVPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VBROADCASTF128</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF128 ymm1, m128</code><p>
	 * <code>VEX.256.66.0F38.W0 1A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf128(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VBROADCASTF128_YMM_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VBROADCASTF32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W0 19 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf32x2(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF32X2_YMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTF32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W0 19 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf32x2(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF32X2_ZMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTF32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W0 19 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf32x2(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF32X2_YMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTF32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W0 19 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf32x2(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF32X2_ZMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF32X4 ymm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 1A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf32x4(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF32X4_YMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF32X4 zmm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.512.66.0F38.W0 1A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf32x4(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF32X4_ZMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTF32X8</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF32X8 zmm1 {k1}{z}, m256</code><p>
	 * <code>EVEX.512.66.0F38.W0 1B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf32x8(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF32X8_ZMM_K1Z_M256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF64X2 ymm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.256.66.0F38.W1 1A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf64x2(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF64X2_YMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF64X2 zmm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.512.66.0F38.W1 1A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf64x2(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF64X2_ZMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTF64X4</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTF64X4 zmm1 {k1}{z}, m256</code><p>
	 * <code>EVEX.512.66.0F38.W1 1B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastf64x4(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTF64X4_ZMM_K1Z_M256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI128</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI128 ymm1, m128</code><p>
	 * <code>VEX.256.66.0F38.W0 5A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti128(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VBROADCASTI128_YMM_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VBROADCASTI32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x2(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X2_XMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x2(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X2_YMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W0 59 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x2(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X2_ZMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x2(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X2_XMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x2(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X2_YMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W0 59 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x2(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X2_ZMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X4 ymm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x4(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X4_YMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X4 zmm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.512.66.0F38.W0 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x4(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X4_ZMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI32X8</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI32X8 zmm1 {k1}{z}, m256</code><p>
	 * <code>EVEX.512.66.0F38.W0 5B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti32x8(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI32X8_ZMM_K1Z_M256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI64X2 ymm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.256.66.0F38.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti64x2(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI64X2_YMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI64X2 zmm1 {k1}{z}, m128</code><p>
	 * <code>EVEX.512.66.0F38.W1 5A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti64x2(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI64X2_ZMM_K1Z_M128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTI64X4</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTI64X4 zmm1 {k1}{z}, m256</code><p>
	 * <code>EVEX.512.66.0F38.W1 5B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcasti64x4(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTI64X4_ZMM_K1Z_M256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTSD</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSD ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W1 19 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VBROADCASTSD ymm1, xmm2</code><p>
	 * <code>VEX.256.66.0F38.W0 19 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastsd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VBROADCASTSD_YMM_XMM : Code.EVEX_VBROADCASTSD_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTSD</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSD zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W1 19 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastsd(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTSD_ZMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTSD</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSD ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W1 19 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VBROADCASTSD ymm1, m64</code><p>
	 * <code>VEX.256.66.0F38.W0 19 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastsd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VBROADCASTSD_YMM_M64 : Code.EVEX_VBROADCASTSD_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTSD</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSD zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W1 19 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastsd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTSD_ZMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTSS</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSS xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.W0 18 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VBROADCASTSS xmm1, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 18 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VBROADCASTSS_XMM_XMM : Code.EVEX_VBROADCASTSS_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTSS</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSS ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.W0 18 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VBROADCASTSS ymm1, xmm2</code><p>
	 * <code>VEX.256.66.0F38.W0 18 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastss(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VBROADCASTSS_YMM_XMM : Code.EVEX_VBROADCASTSS_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTSS</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSS zmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.512.66.0F38.W0 18 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastss(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTSS_ZMM_K1Z_XMMM32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VBROADCASTSS</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSS xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.W0 18 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VBROADCASTSS xmm1, m32</code><p>
	 * <code>VEX.128.66.0F38.W0 18 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VBROADCASTSS_XMM_M32 : Code.EVEX_VBROADCASTSS_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTSS</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSS ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.W0 18 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VBROADCASTSS ymm1, m32</code><p>
	 * <code>VEX.256.66.0F38.W0 18 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastss(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VBROADCASTSS_YMM_M32 : Code.EVEX_VBROADCASTSS_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VBROADCASTSS</code> instruction<hr>
	 * <p>
	 * <code>VBROADCASTSS zmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.512.66.0F38.W0 18 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vbroadcastss(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VBROADCASTSS_ZMM_K1Z_XMMM32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ospd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ossd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ossd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ossd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ossd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ossh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ossh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_osss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 16);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 8);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_uspd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ussd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ussd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ussd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ussd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ussh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_ussh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeq_usss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 24);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpeqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 0);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ospd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ossd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ossd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ossd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ossd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ossh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_ossh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSE_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalse_osss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 27);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalseps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsess(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsess(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPFALSESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpfalsess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 11);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpge_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 29);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgeps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgess(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgess(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 13);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgt_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 30);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpgtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 14);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLE_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmple_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 18);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpleps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpless(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpless(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpless(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpless(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 2);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLT_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmplt_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 17);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpltss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 1);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_oqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 12);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ospd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ossd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ossd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ossd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ossd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ossh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ossh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_OSSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_osss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 28);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_uspd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ussd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ussd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ussd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ussd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ussh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_ussh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQ_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneq_usss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 20);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNEQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpneqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 4);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnge_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 25);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngeps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngess(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngess(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 9);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngt_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 26);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNGTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpngtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 10);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLE_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnle_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 22);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnleps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnless(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnless(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnless(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnless(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 6);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLT_UQSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnlt_uqss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 21);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPNLTSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpnltss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 5);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_spd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_ssd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_ssd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_ssd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_ssd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_ssh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_ssh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpord_sss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 23);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpordss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 7);
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VCMPPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmppd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VCMPPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VCMPPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VCMPPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VCMPSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VCMPSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VCMPSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VCMPSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_uspd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_ussd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_ussd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_ussd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_ussd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_ussh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_ussh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUE_USSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrue_usss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 31);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruepd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUEPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptrueps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruesd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruesh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruess(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruess(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPTRUESS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmptruess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 15);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_spd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_ssd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_ssd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_ssd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_ssd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_ssh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_ssh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORD_SSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunord_sss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 19);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPD</code> instruction<hr>
	 * <p>
	 * <code>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmppd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordph(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpph(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordph(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpph(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordph(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpph(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordph(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordph(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPH</code> instruction<hr>
	 * <p>
	 * <code>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordph(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpph(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDPS</code> instruction<hr>
	 * <p>
	 * <code>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordps(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vcmpps(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordsd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSD</code> instruction<hr>
	 * <p>
	 * <code>VCMPSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.F2.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsd(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpsh(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSH</code> instruction<hr>
	 * <p>
	 * <code>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F3A.W0 C2 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordsh(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpsh(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordss(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vcmpss(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 C2 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordss(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 3);
	}

	/**
	 * <code>VCMPUNORDSS</code> instruction<hr>
	 * <p>
	 * <code>VCMPSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.F3.0F.WIG C2 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcmpunordss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vcmpss(dst, src1, src2, 3);
	}

	/**
	 * <code>VCOMISD</code> instruction<hr>
	 * <p>
	 * <code>VCOMISD xmm1, xmm2/m64</code><p>
	 * <code>VEX.LIG.66.0F.WIG 2F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCOMISD xmm1, xmm2/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F.W1 2F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcomisd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCOMISD_XMM_XMMM64 : Code.EVEX_VCOMISD_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCOMISD</code> instruction<hr>
	 * <p>
	 * <code>VCOMISD xmm1, xmm2/m64</code><p>
	 * <code>VEX.LIG.66.0F.WIG 2F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCOMISD xmm1, xmm2/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F.W1 2F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcomisd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCOMISD_XMM_XMMM64 : Code.EVEX_VCOMISD_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCOMISH</code> instruction<hr>
	 * <p>
	 * <code>VCOMISH xmm1, xmm2/m16{sae}</code><p>
	 * <code>EVEX.LIG.MAP5.W0 2F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcomish(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMISH_XMM_XMMM16_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCOMISH</code> instruction<hr>
	 * <p>
	 * <code>VCOMISH xmm1, xmm2/m16{sae}</code><p>
	 * <code>EVEX.LIG.MAP5.W0 2F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcomish(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMISH_XMM_XMMM16_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCOMISS</code> instruction<hr>
	 * <p>
	 * <code>VCOMISS xmm1, xmm2/m32</code><p>
	 * <code>VEX.LIG.0F.WIG 2F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCOMISS xmm1, xmm2/m32{sae}</code><p>
	 * <code>EVEX.LIG.0F.W0 2F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcomiss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCOMISS_XMM_XMMM32 : Code.EVEX_VCOMISS_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCOMISS</code> instruction<hr>
	 * <p>
	 * <code>VCOMISS xmm1, xmm2/m32</code><p>
	 * <code>VEX.LIG.0F.WIG 2F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCOMISS xmm1, xmm2/m32{sae}</code><p>
	 * <code>EVEX.LIG.0F.W0 2F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcomiss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCOMISS_XMM_XMMM32 : Code.EVEX_VCOMISS_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCOMPRESSPD</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W1 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompresspd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPD_XMMM128_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPD</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W1 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompresspd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPD_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPD</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W1 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompresspd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPD_YMMM256_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPD</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W1 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompresspd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPD_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPD</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W1 8A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompresspd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPD_ZMMM512_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPD</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W1 8A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompresspd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPD_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPS</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W0 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompressps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPS_XMMM128_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPS</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W0 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompressps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPS_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPS</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W0 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompressps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPS_YMMM256_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPS</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W0 8A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompressps(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPS_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPS</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W0 8A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompressps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPS_ZMMM512_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCOMPRESSPS</code> instruction<hr>
	 * <p>
	 * <code>VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W0 8A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcompressps(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCOMPRESSPS_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.F3.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F.W0 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PD_XMM_XMMM64 : Code.EVEX_VCVTDQ2PD_XMM_K1Z_XMMM64B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.F3.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F.W0 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2pd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PD_YMM_XMMM128 : Code.EVEX_VCVTDQ2PD_YMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W0 E6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2pd(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PD_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.F3.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F.W0 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTDQ2PD_XMM_K1Z_XMMM64B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PD_XMM_XMMM64 : Code.EVEX_VCVTDQ2PD_XMM_K1Z_XMMM64B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.F3.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F.W0 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTDQ2PD_YMM_K1Z_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PD_YMM_XMMM128 : Code.EVEX_VCVTDQ2PD_YMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W0 E6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PD_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ph(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ph(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PH_YMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTDQ2PH_XMM_K1Z_XMMM128B32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTDQ2PH, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PH_YMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2phx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PHY</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2phy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PS_XMM_XMMM128 : Code.EVEX_VCVTDQ2PS_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PS_YMM_YMMM256 : Code.EVEX_VCVTDQ2PS_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 5B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PS_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTDQ2PS_XMM_K1Z_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PS_XMM_XMMM128 : Code.EVEX_VCVTDQ2PS_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTDQ2PS_YMM_K1Z_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTDQ2PS_YMM_YMMM256 : Code.EVEX_VCVTDQ2PS_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 5B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtdq2ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTDQ2PS_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTNE2PS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNE2PS2BF16 xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtne2ps2bf16(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VCVTNE2PS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNE2PS2BF16 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtne2ps2bf16(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VCVTNE2PS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNE2PS2BF16 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F2.0F38.W0 72 /r</code><p>
	 * <code>AVX512F and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtne2ps2bf16(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VCVTNE2PS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNE2PS2BF16 xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtne2ps2bf16(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTNE2PS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNE2PS2BF16 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtne2ps2bf16(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTNE2PS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNE2PS2BF16 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F2.0F38.W0 72 /r</code><p>
	 * <code>AVX512F and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtne2ps2bf16(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTNEPS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtneps2bf16(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTNEPS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtneps2bf16(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTNEPS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 ymm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512F and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtneps2bf16(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNEPS2BF16_YMM_K1Z_ZMMM512B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTNEPS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtneps2bf16(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_XMMM128B32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTNEPS2BF16, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTNEPS2BF16</code> instruction<hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 ymm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512F and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtneps2bf16(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNEPS2BF16_YMM_K1Z_ZMMM512B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTNEPS2BF16X</code> instruction<hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtneps2bf16x(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTNEPS2BF16Y</code> instruction<hr>
	 * <p>
	 * <code>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W0 72 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtneps2bf16y(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPD2DQ_XMM_XMMM128 : Code.EVEX_VCVTPD2DQ_XMM_K1Z_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1, ymm2/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2dq(AsmRegisterXMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPD2DQ_XMM_YMMM256 : Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2dq(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2DQ_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1, ymm2/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTPD2DQ_XMM_YMMM256 : Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTPD2DQ_XMM_XMMM128 : Code.EVEX_VCVTPD2DQ_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTPD2DQ, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2dq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2DQ_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2DQX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2dqx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2DQY</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2dqy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ph(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ph(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER;
		} else if (src.size == MemoryOperandSize.ZWORD) {
			code = Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTPD2PH_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTPD2PH_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTPD2PH, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2phx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PHY</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2phy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PHZ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W1 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2phz(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPD2PS_XMM_XMMM128 : Code.EVEX_VCVTPD2PS_XMM_K1Z_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ps(AsmRegisterXMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPD2PS_XMM_YMMM256 : Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ps(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PS_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTPD2PS_XMM_YMMM256 : Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTPD2PS_XMM_XMMM128 : Code.EVEX_VCVTPD2PS_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTPD2PS, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PS_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2psx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2PSY</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2psy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2qq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2QQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2qq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2QQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 7B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2qq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2QQ_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2qq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2QQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2qq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2QQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 7B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2qq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2QQ_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2udq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2udq(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.0F.W1 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2udq(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UDQ_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2udq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTPD2UDQ_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTPD2UDQ, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.0F.W1 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2udq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UDQ_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UDQX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2udqx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UDQY</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2udqy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2uqq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UQQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2uqq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UQQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 79 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2uqq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UQQ_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2uqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UQQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2uqq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UQQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 79 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtpd2uqq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPD2UQQ_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2DQ_XMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2dq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2DQ_YMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2dq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2DQ_ZMM_K1Z_YMMM256B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2DQ_XMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2dq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2DQ_YMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2dq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2DQ_ZMM_K1Z_YMMM256B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PD xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PD_XMM_K1Z_XMMM32B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PD ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2pd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PD_YMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PD zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2pd(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PD_ZMM_K1Z_XMMM128B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PD xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PD_XMM_K1Z_XMMM32B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PD ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PD_YMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PD zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PD_ZMM_K1Z_XMMM128B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PS xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.W0 13 /r</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPH2PS xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPH2PS_XMM_XMMM64 : Code.EVEX_VCVTPH2PS_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PS ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.W0 13 /r</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPH2PS ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2ps(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPH2PS_YMM_XMMM128 : Code.EVEX_VCVTPH2PS_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PS zmm1 {k1}{z}, ymm2/m256{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 13 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2ps(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PS_ZMM_K1Z_YMMM256_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PS xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.W0 13 /r</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPH2PS xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPH2PS_XMM_XMMM64 : Code.EVEX_VCVTPH2PS_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VCVTPH2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PS ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.W0 13 /r</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPH2PS ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPH2PS_YMM_XMMM128 : Code.EVEX_VCVTPH2PS_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VCVTPH2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PS zmm1 {k1}{z}, ymm2/m256{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 13 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PS_ZMM_K1Z_YMMM256_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PSX xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2psx(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PSX_XMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PSX ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2psx(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PSX_YMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PSX zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 13 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2psx(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PSX_ZMM_K1Z_YMMM256B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PSX xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2psx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PSX_XMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PSX ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2psx(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PSX_YMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2PSX zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 13 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2psx(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2PSX_ZMM_K1Z_YMMM256B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2qq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2QQ_XMM_K1Z_XMMM32B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2qq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2QQ_YMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2qq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2QQ_ZMM_K1Z_XMMM128B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2qq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2QQ_XMM_K1Z_XMMM32B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2qq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2QQ_YMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2qq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2QQ_ZMM_K1Z_XMMM128B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2udq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UDQ_XMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2udq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UDQ_YMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2udq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UDQ_ZMM_K1Z_YMMM256B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2udq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UDQ_XMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2udq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UDQ_YMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2udq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UDQ_ZMM_K1Z_YMMM256B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uqq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UQQ_XMM_K1Z_XMMM32B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uqq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UQQ_YMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uqq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UQQ_ZMM_K1Z_XMMM128B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UQQ_XMM_K1Z_XMMM32B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uqq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UQQ_YMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uqq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UQQ_ZMM_K1Z_XMMM128B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UW_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uw(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UW_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uw(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UW_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UW_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UW_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2uw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2UW_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2w(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2W_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2w(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2W_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2w(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2W_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2w(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2W_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2w(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2W_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtph2w(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPH2W_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2DQ_XMM_XMMM128 : Code.EVEX_VCVTPS2DQ_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2DQ ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2dq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2DQ_YMM_YMMM256 : Code.EVEX_VCVTPS2DQ_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W0 5B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2dq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2DQ_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPS2DQ_XMM_K1Z_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTPS2DQ_XMM_XMMM128 : Code.EVEX_VCVTPS2DQ_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2DQ ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2dq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPS2DQ_YMM_K1Z_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTPS2DQ_YMM_YMMM256 : Code.EVEX_VCVTPS2DQ_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W0 5B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2dq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2DQ_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PD_XMM_XMMM64 : Code.EVEX_VCVTPS2PD_XMM_K1Z_XMMM64B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2pd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PD_YMM_XMMM128 : Code.EVEX_VCVTPS2PD_YMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2pd(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PD_ZMM_K1Z_YMMM256B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPS2PD_XMM_K1Z_XMMM64B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PD_XMM_XMMM64 : Code.EVEX_VCVTPS2PD_XMM_K1Z_XMMM64B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPS2PD_YMM_K1Z_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PD_YMM_XMMM128 : Code.EVEX_VCVTPS2PD_YMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PD_ZMM_K1Z_YMMM256B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m64, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 1D /r ib</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1D /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2ph(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PH_XMMM64_XMM_IMM8 : Code.EVEX_VCVTPS2PH_XMMM64_K1Z_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VCVTPS2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m64, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 1D /r ib</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1D /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2ph(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PH_XMMM64_XMM_IMM8 : Code.EVEX_VCVTPS2PH_XMMM64_K1Z_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VCVTPS2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m128, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 1D /r ib</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1D /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2ph(AsmRegisterXMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PH_XMMM128_YMM_IMM8 : Code.EVEX_VCVTPS2PH_XMMM128_K1Z_YMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VCVTPS2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m128, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 1D /r ib</code><p>
	 * <code>F16C</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1D /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2ph(AsmMemoryOperand dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTPS2PH_XMMM128_YMM_IMM8 : Code.EVEX_VCVTPS2PH_XMMM128_K1Z_YMM_IMM8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VCVTPS2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1D /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2ph(AsmRegisterYMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PH_YMMM256_K1Z_ZMM_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VCVTPS2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1D /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2ph(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PH_YMMM256_K1Z_ZMM_IMM8_SAE, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VCVTPS2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PHX xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2phx(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PHX xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2phx(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PHX ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2phx(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PHX_YMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PHX xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTPS2PHX xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2phx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTPS2PHX_XMM_K1Z_XMMM128B32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTPS2PHX, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PHX ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2phx(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PHX_YMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PHXX</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PHX xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2phxx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2PHXY</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2PHX xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 1D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2phxy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2qq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2QQ_XMM_K1Z_XMMM64B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2qq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2QQ_YMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W0 7B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2qq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2QQ_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2qq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2QQ_XMM_K1Z_XMMM64B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2qq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2QQ_YMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W0 7B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2qq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2QQ_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2udq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UDQ_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2udq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UDQ_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2udq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UDQ_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2udq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UDQ_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2udq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UDQ_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2udq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UDQ_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2uqq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UQQ_XMM_K1Z_XMMM64B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2uqq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UQQ_YMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W0 79 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2uqq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UQQ_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2uqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UQQ_XMM_K1Z_XMMM64B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2uqq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UQQ_YMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W0 79 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtps2uqq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTPS2UQQ_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F3.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PD_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F3.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2pd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PD_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W1 E6 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2pd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PD_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F3.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PD_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F3.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PD_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W1 E6 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PD_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.MAP5.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.MAP5.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ph(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W1 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ph(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W1 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.MAP5.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.MAP5.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER;
		} else if (src.size == MemoryOperandSize.ZWORD) {
			code = Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTQQ2PH_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTQQ2PH_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTQQ2PH, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.MAP5.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2phx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PHY</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.MAP5.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2phy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PHZ</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W1 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2phz(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ps(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.0F.W1 5B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ps(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PS_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTQQ2PS_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTQQ2PS, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.0F.W1 5B /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PS_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2psx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTQQ2PSY</code> instruction<hr>
	 * <p>
	 * <code>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 5B /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtqq2psy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTSD2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SH xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.MAP5.W1 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSD2SH_XMM_K1Z_XMM_XMMM64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSD2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SH xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.MAP5.W1 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSD2SH_XMM_K1Z_XMM_XMMM64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SI r32, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W0 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSD2SI r32, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2si(AsmRegister32 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSD2SI_R32_XMMM64 : Code.EVEX_VCVTSD2SI_R32_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SI r64, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W1 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSD2SI r64, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsd2si(AsmRegister64 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSD2SI_R64_XMMM64 : Code.EVEX_VCVTSD2SI_R64_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SI r32, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W0 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSD2SI r32, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2si(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSD2SI_R32_XMMM64 : Code.EVEX_VCVTSD2SI_R32_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SI r64, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W1 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSD2SI r64, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsd2si(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSD2SI_R64_XMMM64 : Code.EVEX_VCVTSD2SI_R64_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSD2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SS xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSD2SS_XMM_XMM_XMMM64 : Code.EVEX_VCVTSD2SS_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSD2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2SS xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSD2SS_XMM_XMM_XMMM64 : Code.EVEX_VCVTSD2SS_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2USI r32, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2usi(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSD2USI_R32_XMMM64_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2USI r64, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsd2usi(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSD2USI_R64_XMMM64_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2USI r32, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsd2usi(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSD2USI_R32_XMMM64_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSD2USI r64, xmm1/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsd2usi(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSD2USI_R64_XMMM64_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSH2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SD xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SD_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSH2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SD xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SD_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SI r32, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 2D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2si(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SI_R32_XMMM16_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SI r64, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 2D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsh2si(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SI_R64_XMMM16_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SI r32, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 2D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2si(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SI_R32_XMMM16_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SI r64, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 2D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsh2si(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SI_R64_XMMM16_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSH2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SS xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.MAP6.W0 13 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SS_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSH2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2SS xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.MAP6.W0 13 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2SS_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2USI r32, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2usi(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2USI_R32_XMMM16_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2USI r64, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsh2usi(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2USI_R64_XMMM16_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2USI r32, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsh2usi(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2USI_R32_XMMM16_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSH2USI r64, xmm1/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 79 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsh2usi(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSH2USI_R64_XMMM16_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSI2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m32</code><p>
	 * <code>VEX.LIG.F2.0F.W0 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsi2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SD_XMM_XMM_RM32 : Code.EVEX_VCVTSI2SD_XMM_XMM_RM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTSI2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W1 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsi2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SD_XMM_XMM_RM64 : Code.EVEX_VCVTSI2SD_XMM_XMM_RM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTSI2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W1 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m32</code><p>
	 * <code>VEX.LIG.F2.0F.W0 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SD xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsi2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.size == MemoryOperandSize.QWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SD_XMM_XMM_RM64 : Code.EVEX_VCVTSI2SD_XMM_XMM_RM64_ER;
		} else if (src2.size == MemoryOperandSize.DWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SD_XMM_XMM_RM32 : Code.EVEX_VCVTSI2SD_XMM_XMM_RM32_ER;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTSI2SD, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VCVTSI2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SH xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 2A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsi2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSI2SH_XMM_XMM_RM32_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTSI2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SH xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 2A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsi2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSI2SH_XMM_XMM_RM64_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTSI2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SH xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 2A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SH xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 2A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsi2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.size == MemoryOperandSize.QWORD) {
			code = Code.EVEX_VCVTSI2SH_XMM_XMM_RM64_ER;
		} else if (src2.size == MemoryOperandSize.DWORD) {
			code = Code.EVEX_VCVTSI2SH_XMM_XMM_RM32_ER;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTSI2SH, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VCVTSI2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W0 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsi2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SS_XMM_XMM_RM32 : Code.EVEX_VCVTSI2SS_XMM_XMM_RM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTSI2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m64</code><p>
	 * <code>VEX.LIG.F3.0F.W1 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtsi2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SS_XMM_XMM_RM64 : Code.EVEX_VCVTSI2SS_XMM_XMM_RM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTSI2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m64</code><p>
	 * <code>VEX.LIG.F3.0F.W1 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W0 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSI2SS xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtsi2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.size == MemoryOperandSize.QWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SS_XMM_XMM_RM64 : Code.EVEX_VCVTSI2SS_XMM_XMM_RM64_ER;
		} else if (src2.size == MemoryOperandSize.DWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTSI2SS_XMM_XMM_RM32 : Code.EVEX_VCVTSI2SS_XMM_XMM_RM32_ER;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTSI2SS, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VCVTSS2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SD xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSS2SD_XMM_XMM_XMMM32 : Code.EVEX_VCVTSS2SD_XMM_K1Z_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSS2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SD xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSS2SD_XMM_XMM_XMMM32 : Code.EVEX_VCVTSS2SD_XMM_K1Z_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSS2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.MAP5.W0 1D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSS2SH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSS2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.MAP5.W0 1D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSS2SH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VCVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SI r32, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W0 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSS2SI r32, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2si(AsmRegister32 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSS2SI_R32_XMMM32 : Code.EVEX_VCVTSS2SI_R32_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SI r64, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W1 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSS2SI r64, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtss2si(AsmRegister64 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSS2SI_R64_XMMM32 : Code.EVEX_VCVTSS2SI_R64_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SI r32, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W0 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTSS2SI r32, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2si(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSS2SI_R32_XMMM32 : Code.EVEX_VCVTSS2SI_R32_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2SI r64, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W1 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTSS2SI r64, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtss2si(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTSS2SI_R64_XMMM32 : Code.EVEX_VCVTSS2SI_R64_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2USI r32, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2usi(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSS2USI_R32_XMMM32_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2USI r64, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtss2usi(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSS2USI_R64_XMMM32_ER, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2USI r32, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtss2usi(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSS2USI_R32_XMMM32_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTSS2USI r64, xmm1/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 79 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtss2usi(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTSS2USI_R64_XMMM32_ER, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTPD2DQ_XMM_XMMM128 : Code.EVEX_VCVTTPD2DQ_XMM_K1Z_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2dq(AsmRegisterXMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTPD2DQ_XMM_YMMM256 : Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2dq(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2DQ_YMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTTPD2DQ_XMM_YMMM256 : Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = getInstructionPreferVex() ? Code.VEX_VCVTTPD2DQ_XMM_XMMM128 : Code.EVEX_VCVTTPD2DQ_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTTPD2DQ, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2dq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2DQ_YMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2DQX</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2dqx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2DQY</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 E6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2dqy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2qq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2QQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2qq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2QQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2qq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2QQ_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2qq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2QQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2qq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2QQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2qq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2QQ_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2udq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2udq(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W1 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2udq(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UDQ_YMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2udq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTTPD2UDQ, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W1 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2udq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UDQ_YMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UDQX</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2udqx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UDQY</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2udqy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2uqq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UQQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2uqq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UQQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 78 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2uqq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UQQ_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2uqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UQQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2uqq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UQQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPD2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 78 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttpd2uqq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPD2UQQ_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.F3.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2DQ_XMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.F3.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2dq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2DQ_YMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</code><p>
	 * <code>EVEX.512.F3.MAP5.W0 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2dq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2DQ_ZMM_K1Z_YMMM256B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.F3.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2DQ_XMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.F3.MAP5.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2dq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2DQ_YMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</code><p>
	 * <code>EVEX.512.F3.MAP5.W0 5B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2dq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2DQ_ZMM_K1Z_YMMM256B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2qq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2QQ_XMM_K1Z_XMMM32B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2qq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2QQ_YMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2qq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2QQ_ZMM_K1Z_XMMM128B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2qq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2QQ_XMM_K1Z_XMMM32B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2qq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2QQ_YMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2qq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2QQ_ZMM_K1Z_XMMM128B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2udq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UDQ_XMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2udq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UDQ_YMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2udq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UDQ_ZMM_K1Z_YMMM256B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2udq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UDQ_XMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2udq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UDQ_YMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2udq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UDQ_ZMM_K1Z_YMMM256B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uqq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UQQ_XMM_K1Z_XMMM32B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uqq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UQQ_YMM_K1Z_XMMM64B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uqq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UQQ_ZMM_K1Z_XMMM128B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UQQ_XMM_K1Z_XMMM32B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uqq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UQQ_YMM_K1Z_XMMM64B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uqq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UQQ_ZMM_K1Z_XMMM128B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UW_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uw(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UW_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 7C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uw(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UW_ZMM_K1Z_ZMMM512B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UW_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UW_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2UW</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 7C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2uw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2UW_ZMM_K1Z_ZMMM512B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2w(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2W_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2w(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2W_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2w(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2W_ZMM_K1Z_ZMMM512B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2w(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2W_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP5.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2w(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2W_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPH2W</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP5.W0 7C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttph2w(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPH2W_ZMM_K1Z_ZMMM512B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2dq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTPS2DQ_XMM_XMMM128 : Code.EVEX_VCVTTPS2DQ_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2DQ ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2dq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTPS2DQ_YMM_YMMM256 : Code.EVEX_VCVTTPS2DQ_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.F3.0F.W0 5B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2dq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2DQ_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2DQ xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2dq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTTPS2DQ_XMM_K1Z_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTTPS2DQ_XMM_XMMM128 : Code.EVEX_VCVTTPS2DQ_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2DQ ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 5B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F.W0 5B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2dq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTTPS2DQ_YMM_K1Z_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VCVTTPS2DQ_YMM_YMMM256 : Code.EVEX_VCVTTPS2DQ_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2DQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.F3.0F.W0 5B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2dq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2DQ_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2qq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2QQ_XMM_K1Z_XMMM64B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2qq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2QQ_YMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W0 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2qq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2QQ_ZMM_K1Z_YMMM256B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2qq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2QQ_XMM_K1Z_XMMM64B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2qq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2QQ_YMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2QQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W0 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2qq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2QQ_ZMM_K1Z_YMMM256B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2udq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UDQ_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2udq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UDQ_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2udq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UDQ_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2udq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UDQ_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2udq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UDQ_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UDQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2udq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UDQ_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2uqq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UQQ_XMM_K1Z_XMMM64B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2uqq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UQQ_YMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W0 78 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2uqq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UQQ_ZMM_K1Z_YMMM256B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2uqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UQQ_XMM_K1Z_XMMM64B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2uqq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UQQ_YMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTPS2UQQ</code> instruction<hr>
	 * <p>
	 * <code>VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W0 78 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttps2uqq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTPS2UQQ_ZMM_K1Z_YMMM256B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2SI r32, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W0 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSD2SI r32, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsd2si(AsmRegister32 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSD2SI_R32_XMMM64 : Code.EVEX_VCVTTSD2SI_R32_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2SI r64, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W1 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSD2SI r64, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsd2si(AsmRegister64 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSD2SI_R64_XMMM64 : Code.EVEX_VCVTTSD2SI_R64_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2SI r32, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W0 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSD2SI r32, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsd2si(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSD2SI_R32_XMMM64 : Code.EVEX_VCVTTSD2SI_R32_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSD2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2SI r64, xmm1/m64</code><p>
	 * <code>VEX.LIG.F2.0F.W1 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSD2SI r64, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsd2si(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSD2SI_R64_XMMM64 : Code.EVEX_VCVTTSD2SI_R64_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2USI r32, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsd2usi(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSD2USI_R32_XMMM64_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2USI r64, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsd2usi(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSD2USI_R64_XMMM64_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2USI r32, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsd2usi(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSD2USI_R32_XMMM64_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSD2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSD2USI r64, xmm1/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsd2usi(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSD2USI_R64_XMMM64_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2SI r32, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 2C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsh2si(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2SI_R32_XMMM16_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2SI r64, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 2C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsh2si(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2SI_R64_XMMM16_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2SI r32, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 2C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsh2si(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2SI_R32_XMMM16_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSH2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2SI r64, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 2C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsh2si(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2SI_R64_XMMM16_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2USI r32, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsh2usi(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2USI_R32_XMMM16_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2USI r64, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsh2usi(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2USI_R64_XMMM16_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2USI r32, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttsh2usi(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2USI_R32_XMMM16_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSH2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSH2USI r64, xmm1/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 78 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttsh2usi(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSH2USI_R64_XMMM16_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2SI r32, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W0 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSS2SI r32, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttss2si(AsmRegister32 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSS2SI_R32_XMMM32 : Code.EVEX_VCVTTSS2SI_R32_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2SI r64, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W1 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSS2SI r64, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttss2si(AsmRegister64 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSS2SI_R64_XMMM32 : Code.EVEX_VCVTTSS2SI_R64_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2SI r32, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W0 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSS2SI r32, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttss2si(AsmRegister32 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSS2SI_R32_XMMM32 : Code.EVEX_VCVTTSS2SI_R32_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSS2SI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2SI r64, xmm1/m32</code><p>
	 * <code>VEX.LIG.F3.0F.W1 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTTSS2SI r64, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttss2si(AsmRegister64 dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VCVTTSS2SI_R64_XMMM32 : Code.EVEX_VCVTTSS2SI_R64_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2USI r32, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttss2usi(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSS2USI_R32_XMMM32_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2USI r64, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttss2usi(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSS2USI_R64_XMMM32_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VCVTTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2USI r32, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvttss2usi(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSS2USI_R32_XMMM32_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTTSS2USI</code> instruction<hr>
	 * <p>
	 * <code>VCVTTSS2USI r64, xmm1/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 78 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvttss2usi(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTTSS2USI_R64_XMMM32_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VCVTUDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PD_XMM_K1Z_XMMM64B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2pd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PD_YMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W0 7A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2pd(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PD_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PD_XMM_K1Z_XMMM64B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PD_YMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W0 7A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PD_ZMM_K1Z_YMMM256B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ph(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ph(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PH_YMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTUDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTUDQ2PH_XMM_K1Z_XMMM128B32;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTUDQ2PH, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PH_YMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2phx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PHY</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2phy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PS_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PS_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.0F.W0 7A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PS_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PS_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.0F.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PS_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUDQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.0F.W0 7A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtudq2ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUDQ2PS_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F3.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PD_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F3.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2pd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PD_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W1 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2pd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PD_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F3.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PD_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F3.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PD_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F3.0F.W1 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PD_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ph(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ph(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER;
		} else if (src.size == MemoryOperandSize.ZWORD) {
			code = Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTUQQ2PH_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTUQQ2PH_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTUQQ2PH, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PHX</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2phx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PHY</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2phy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PHZ</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP5.W1 7A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2phz(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ps(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ps(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PS_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64;
		} else if (src.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VCVTUQQ2PS_XMM_K1Z_XMMM128B64;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTUQQ2PS, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PS_YMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PSX</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2psx(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUQQ2PSY</code> instruction<hr>
	 * <p>
	 * <code>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F.W1 7A /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuqq2psy(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUSI2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SD xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtusi2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUSI2SD_XMM_XMM_RM32_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SD xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtusi2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUSI2SD_XMM_XMM_RM64_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SD</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SD xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTUSI2SD xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W0 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtusi2sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.size == MemoryOperandSize.QWORD) {
			code = Code.EVEX_VCVTUSI2SD_XMM_XMM_RM64_ER;
		} else if (src2.size == MemoryOperandSize.DWORD) {
			code = Code.EVEX_VCVTUSI2SD_XMM_XMM_RM32_ER;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTUSI2SD, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SH xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 7B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtusi2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUSI2SH_XMM_XMM_RM32_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SH xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 7B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtusi2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUSI2SH_XMM_XMM_RM64_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SH xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W1 7B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTUSI2SH xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 7B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtusi2sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.size == MemoryOperandSize.QWORD) {
			code = Code.EVEX_VCVTUSI2SH_XMM_XMM_RM64_ER;
		} else if (src2.size == MemoryOperandSize.DWORD) {
			code = Code.EVEX_VCVTUSI2SH_XMM_XMM_RM32_ER;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTUSI2SH, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SS xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtusi2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUSI2SS_XMM_XMM_RM32_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SS xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vcvtusi2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUSI2SS_XMM_XMM_RM64_ER, dst.get(), src1.get(), src2.get()), src2.flags);
	}

	/**
	 * <code>VCVTUSI2SS</code> instruction<hr>
	 * <p>
	 * <code>VCVTUSI2SS xmm1, xmm2, r/m64{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W1 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VCVTUSI2SS xmm1, xmm2, r/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 7B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtusi2ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.size == MemoryOperandSize.QWORD) {
			code = Code.EVEX_VCVTUSI2SS_XMM_XMM_RM64_ER;
		} else if (src2.size == MemoryOperandSize.DWORD) {
			code = Code.EVEX_VCVTUSI2SS_XMM_XMM_RM32_ER;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VCVTUSI2SS, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VCVTUW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuw2ph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUW2PH_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuw2ph(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUW2PH_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTUW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuw2ph(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUW2PH_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.F2.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuw2ph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUW2PH_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.F2.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuw2ph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUW2PH_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTUW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTUW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtuw2ph(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTUW2PH_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.F3.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtw2ph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTW2PH_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.F3.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtw2ph(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTW2PH_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VCVTW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.F3.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtw2ph(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTW2PH_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.F3.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtw2ph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTW2PH_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.F3.MAP5.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtw2ph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTW2PH_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VCVTW2PH</code> instruction<hr>
	 * <p>
	 * <code>VCVTW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.F3.MAP5.W0 7D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vcvtw2ph(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VCVTW2PH_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VDBPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 42 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdbpsadbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VDBPSADBW_XMM_K1Z_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VDBPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 42 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdbpsadbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VDBPSADBW_YMM_K1Z_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VDBPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 42 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdbpsadbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VDBPSADBW_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VDBPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 42 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdbpsadbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VDBPSADBW_XMM_K1Z_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VDBPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 42 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdbpsadbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VDBPSADBW_YMM_K1Z_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VDBPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 42 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdbpsadbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VDBPSADBW_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VDIVPD</code> instruction<hr>
	 * <p>
	 * <code>VDIVPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVPD_XMM_XMM_XMMM128 : Code.EVEX_VDIVPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDIVPD</code> instruction<hr>
	 * <p>
	 * <code>VDIVPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVPD_YMM_YMM_YMMM256 : Code.EVEX_VDIVPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDIVPD</code> instruction<hr>
	 * <p>
	 * <code>VDIVPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPD</code> instruction<hr>
	 * <p>
	 * <code>VDIVPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VDIVPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VDIVPD_XMM_XMM_XMMM128 : Code.EVEX_VDIVPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPD</code> instruction<hr>
	 * <p>
	 * <code>VDIVPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VDIVPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VDIVPD_YMM_YMM_YMMM256 : Code.EVEX_VDIVPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPD</code> instruction<hr>
	 * <p>
	 * <code>VDIVPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPH</code> instruction<hr>
	 * <p>
	 * <code>VDIVPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDIVPH</code> instruction<hr>
	 * <p>
	 * <code>VDIVPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDIVPH</code> instruction<hr>
	 * <p>
	 * <code>VDIVPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 5E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPH</code> instruction<hr>
	 * <p>
	 * <code>VDIVPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPH</code> instruction<hr>
	 * <p>
	 * <code>VDIVPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPH</code> instruction<hr>
	 * <p>
	 * <code>VDIVPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 5E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPS</code> instruction<hr>
	 * <p>
	 * <code>VDIVPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVPS_XMM_XMM_XMMM128 : Code.EVEX_VDIVPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDIVPS</code> instruction<hr>
	 * <p>
	 * <code>VDIVPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVPS_YMM_YMM_YMMM256 : Code.EVEX_VDIVPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDIVPS</code> instruction<hr>
	 * <p>
	 * <code>VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPS</code> instruction<hr>
	 * <p>
	 * <code>VDIVPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VDIVPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VDIVPS_XMM_XMM_XMMM128 : Code.EVEX_VDIVPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPS</code> instruction<hr>
	 * <p>
	 * <code>VDIVPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VDIVPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VDIVPS_YMM_YMM_YMMM256 : Code.EVEX_VDIVPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVPS</code> instruction<hr>
	 * <p>
	 * <code>VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVSD</code> instruction<hr>
	 * <p>
	 * <code>VDIVSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVSD_XMM_XMM_XMMM64 : Code.EVEX_VDIVSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVSD</code> instruction<hr>
	 * <p>
	 * <code>VDIVSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVSD_XMM_XMM_XMMM64 : Code.EVEX_VDIVSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVSH</code> instruction<hr>
	 * <p>
	 * <code>VDIVSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVSH</code> instruction<hr>
	 * <p>
	 * <code>VDIVSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDIVSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVSS</code> instruction<hr>
	 * <p>
	 * <code>VDIVSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVSS_XMM_XMM_XMMM32 : Code.EVEX_VDIVSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VDIVSS</code> instruction<hr>
	 * <p>
	 * <code>VDIVSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdivss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VDIVSS_XMM_XMM_XMMM32 : Code.EVEX_VDIVSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDPBF16PS</code> instruction<hr>
	 * <p>
	 * <code>VDPBF16PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpbf16ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDPBF16PS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDPBF16PS</code> instruction<hr>
	 * <p>
	 * <code>VDPBF16PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpbf16ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDPBF16PS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDPBF16PS</code> instruction<hr>
	 * <p>
	 * <code>VDPBF16PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W0 52 /r</code><p>
	 * <code>AVX512F and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpbf16ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VDPBF16PS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VDPBF16PS</code> instruction<hr>
	 * <p>
	 * <code>VDPBF16PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpbf16ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDPBF16PS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDPBF16PS</code> instruction<hr>
	 * <p>
	 * <code>VDPBF16PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpbf16ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDPBF16PS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDPBF16PS</code> instruction<hr>
	 * <p>
	 * <code>VDPBF16PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W0 52 /r</code><p>
	 * <code>AVX512F and AVX512_BF16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpbf16ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VDPBF16PS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VDPPD</code> instruction<hr>
	 * <p>
	 * <code>VDPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 41 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdppd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VDPPD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VDPPD</code> instruction<hr>
	 * <p>
	 * <code>VDPPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 41 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdppd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VDPPD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VDPPS</code> instruction<hr>
	 * <p>
	 * <code>VDPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 40 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VDPPS_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VDPPS</code> instruction<hr>
	 * <p>
	 * <code>VDPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 40 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VDPPS_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VDPPS</code> instruction<hr>
	 * <p>
	 * <code>VDPPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 40 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VDPPS_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VDPPS</code> instruction<hr>
	 * <p>
	 * <code>VDPPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 40 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vdpps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VDPPS_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VERR</code> instruction<hr>
	 * <p>
	 * <code>VERR r/m16</code><p>
	 * <code>o16 0F 00 /4</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void verr(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.VERR_RM16, dst.get()));
	}

	/**
	 * <code>VERR</code> instruction<hr>
	 * <p>
	 * <code>VERR r32/m16</code><p>
	 * <code>o32 0F 00 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void verr(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.VERR_R32M16, dst.get()));
	}

	/**
	 * <code>VERR</code> instruction<hr>
	 * <p>
	 * <code>VERR r64/m16</code><p>
	 * <code>o64 0F 00 /4</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void verr(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.VERR_R64M16, dst.get()));
	}

	/**
	 * <code>VERR</code> instruction<hr>
	 * <p>
	 * <code>VERR r32/m16</code><p>
	 * <code>o32 0F 00 /4</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VERR r/m16</code><p>
	 * <code>o16 0F 00 /4</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void verr(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.VERR_R32M16 : Code.VERR_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VERW</code> instruction<hr>
	 * <p>
	 * <code>VERW r/m16</code><p>
	 * <code>o16 0F 00 /5</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void verw(AsmRegister16 dst) {
		addInstruction(Instruction.create(Code.VERW_RM16, dst.get()));
	}

	/**
	 * <code>VERW</code> instruction<hr>
	 * <p>
	 * <code>VERW r32/m16</code><p>
	 * <code>o32 0F 00 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void verw(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.VERW_R32M16, dst.get()));
	}

	/**
	 * <code>VERW</code> instruction<hr>
	 * <p>
	 * <code>VERW r64/m16</code><p>
	 * <code>o64 0F 00 /5</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void verw(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.VERW_R64M16, dst.get()));
	}

	/**
	 * <code>VERW</code> instruction<hr>
	 * <p>
	 * <code>VERW r32/m16</code><p>
	 * <code>o32 0F 00 /5</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VERW r/m16</code><p>
	 * <code>o16 0F 00 /5</code><p>
	 * <code>286+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void verw(AsmMemoryOperand dst) {
		int code;
		code = getBitness() >= 32 ? Code.VERW_R32M16 : Code.VERW_RM16;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VEXP2PD</code> instruction<hr>
	 * <p>
	 * <code>VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C8 /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexp2pd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXP2PD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VEXP2PD</code> instruction<hr>
	 * <p>
	 * <code>VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C8 /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexp2pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXP2PD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VEXP2PS</code> instruction<hr>
	 * <p>
	 * <code>VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C8 /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexp2ps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXP2PS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VEXP2PS</code> instruction<hr>
	 * <p>
	 * <code>VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C8 /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexp2ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXP2PS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VEXPANDPD</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPD_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VEXPANDPD</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandpd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPD_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VEXPANDPD</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 88 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandpd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPD_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VEXPANDPD</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPD_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VEXPANDPD</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandpd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPD_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VEXPANDPD</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 88 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandpd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPD_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VEXPANDPS</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPS xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPS_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VEXPANDPS</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPS ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPS_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VEXPANDPS</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPS zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 88 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPS_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VEXPANDPS</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPS xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPS_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VEXPANDPS</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPS ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 88 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPS_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VEXPANDPS</code> instruction<hr>
	 * <p>
	 * <code>VEXPANDPS zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 88 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vexpandps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VEXPANDPS_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VEXTRACTF128</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF128 xmm1/m128, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 19 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf128(AsmRegisterXMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VEXTRACTF128_XMMM128_YMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VEXTRACTF128</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF128 xmm1/m128, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 19 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf128(AsmMemoryOperand dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VEXTRACTF128_XMMM128_YMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>VEXTRACTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 19 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf32x4(AsmRegisterXMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF32X4_XMMM128_K1Z_YMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 19 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf32x4(AsmMemoryOperand dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF32X4_XMMM128_K1Z_YMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 19 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf32x4(AsmRegisterXMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF32X4_XMMM128_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 19 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf32x4(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF32X4_XMMM128_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF32X8</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1B /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf32x8(AsmRegisterYMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF32X8_YMMM256_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF32X8</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1B /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf32x8(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF32X8_YMMM256_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 19 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf64x2(AsmRegisterXMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF64X2_XMMM128_K1Z_YMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 19 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf64x2(AsmMemoryOperand dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF64X2_XMMM128_K1Z_YMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 19 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf64x2(AsmRegisterXMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF64X2_XMMM128_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 19 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf64x2(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF64X2_XMMM128_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF64X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1B /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf64x4(AsmRegisterYMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF64X4_YMMM256_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTF64X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1B /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractf64x4(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTF64X4_YMMM256_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI128</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI128 xmm1/m128, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 39 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti128(AsmRegisterXMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VEXTRACTI128_XMMM128_YMM_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VEXTRACTI128</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI128 xmm1/m128, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 39 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti128(AsmMemoryOperand dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VEXTRACTI128_XMMM128_YMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>VEXTRACTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 39 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti32x4(AsmRegisterXMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI32X4_XMMM128_K1Z_YMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 39 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti32x4(AsmMemoryOperand dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI32X4_XMMM128_K1Z_YMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 39 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti32x4(AsmRegisterXMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI32X4_XMMM128_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 39 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti32x4(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI32X4_XMMM128_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI32X8</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3B /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti32x8(AsmRegisterYMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI32X8_YMMM256_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI32X8</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3B /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti32x8(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI32X8_YMMM256_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 39 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti64x2(AsmRegisterXMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI64X2_XMMM128_K1Z_YMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 39 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti64x2(AsmMemoryOperand dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI64X2_XMMM128_K1Z_YMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 39 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti64x2(AsmRegisterXMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI64X2_XMMM128_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 39 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti64x2(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI64X2_XMMM128_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI64X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3B /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti64x4(AsmRegisterYMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI64X4_YMMM256_K1Z_ZMM_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTI64X4</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3B /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextracti64x4(AsmMemoryOperand dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VEXTRACTI64X4_YMMM256_K1Z_ZMM_IMM8, dst.toMemoryOperand(getBitness()), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VEXTRACTPS</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTPS r/m32, xmm1, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 17 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VEXTRACTPS r/m32, xmm1, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 17 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractps(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VEXTRACTPS_RM32_XMM_IMM8 : Code.EVEX_VEXTRACTPS_RM32_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VEXTRACTPS</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTPS r64/m32, xmm1, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 17 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VEXTRACTPS r64/m32, xmm1, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 17 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vextractps(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VEXTRACTPS_R64M32_XMM_IMM8 : Code.EVEX_VEXTRACTPS_R64M32_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VEXTRACTPS</code> instruction<hr>
	 * <p>
	 * <code>VEXTRACTPS r/m32, xmm1, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 17 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VEXTRACTPS r/m32, xmm1, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 17 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vextractps(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VEXTRACTPS_RM32_XMM_IMM8 : Code.EVEX_VEXTRACTPS_RM32_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>VFCMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFCMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFCMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP6.W0 56 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP6.W0 56 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMADDCSH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.MAP6.W0 57 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMADDCSH</code> instruction<hr>
	 * <p>
	 * <code>VFCMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.MAP6.W0 57 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmaddcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMADDCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFCMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFCMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F2.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMULCSH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.MAP6.W0 D7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFCMULCSH</code> instruction<hr>
	 * <p>
	 * <code>VFCMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F2.MAP6.W0 D7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfcmulcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFCMULCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPD_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VFIXUPIMMPD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPD_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VFIXUPIMMPD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 54 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPD_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPD_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 54 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPS_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VFIXUPIMMPS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPS_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VFIXUPIMMPS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 54 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPS_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 54 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPS_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMPS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 54 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMSD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 55 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMSD</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 55 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMSS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 55 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFIXUPIMMSS</code> instruction<hr>
	 * <p>
	 * <code>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 55 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfixupimmss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFIXUPIMMSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADD132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADD132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 98 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD132PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADD132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD132PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADD132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 98 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 98 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 98 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADD132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADD132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 98 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD132PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADD132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 98 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 98 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD132PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADD132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 98 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132SD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 99 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 99 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132SD_XMM_XMM_XMMM64 : Code.EVEX_VFMADD132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132SD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 99 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 99 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132SD_XMM_XMM_XMMM64 : Code.EVEX_VFMADD132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132SH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 99 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132SH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 99 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132SS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 99 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 99 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132SS_XMM_XMM_XMMM32 : Code.EVEX_VFMADD132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD132SS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 99 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 99 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD132SS_XMM_XMM_XMMM32 : Code.EVEX_VFMADD132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADD213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADD213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 A8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD213PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADD213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD213PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADD213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 A8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 A8 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 A8 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADD213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADD213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 A8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD213PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADD213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 A8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 A8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD213PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADD213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 A8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213SD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 A9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 A9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213SD_XMM_XMM_XMMM64 : Code.EVEX_VFMADD213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213SD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 A9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 A9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213SD_XMM_XMM_XMMM64 : Code.EVEX_VFMADD213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213SH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 A9 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213SH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 A9 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213SS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 A9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 A9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213SS_XMM_XMM_XMMM32 : Code.EVEX_VFMADD213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD213SS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 A9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 A9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD213SS_XMM_XMM_XMMM32 : Code.EVEX_VFMADD213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADD231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADD231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 B8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD231PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADD231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD231PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADD231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 B8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 B8 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 B8 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADD231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADD231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 B8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD231PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADD231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 B8 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 B8 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADD231PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADD231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADD231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 B8 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231SD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 B9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 B9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231SD_XMM_XMM_XMMM64 : Code.EVEX_VFMADD231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231SD</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 B9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 B9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231SD_XMM_XMM_XMMM64 : Code.EVEX_VFMADD231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231SH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 B9 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231SH</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 B9 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADD231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231SS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 B9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 B9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231SS_XMM_XMM_XMMM32 : Code.EVEX_VFMADD231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADD231SS</code> instruction<hr>
	 * <p>
	 * <code>VFMADD231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 B9 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 B9 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmadd231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADD231SS_XMM_XMM_XMMM32 : Code.EVEX_VFMADD231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.MAP6.W0 56 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.MAP6.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.MAP6.W0 56 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDCSH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP6.W0 57 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDCSH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP6.W0 57 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 69 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 69 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 69 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 69 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPD xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 69 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPD_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPD ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 69 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPD_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 68 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 68 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 68 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 68 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPS xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 68 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPS_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDPS ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 68 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDPS_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDSD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6B /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDSD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6B /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDSD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSD xmm1, xmm2, xmm3, xmm4/m64</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 6B /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSD_XMM_XMM_XMM_XMMM64, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDSS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6A /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDSS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6A /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDSS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSS xmm1, xmm2, xmm3, xmm4/m32</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 6A /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSS_XMM_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 96 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 96 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 96 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 96 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 96 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 96 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 96 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 96 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 A6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 A6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 A6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 A6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 A6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 A6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 A6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 A6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 B6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 B6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 B6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 B6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMADDSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 B6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMADDSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 B6 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 B6 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMADDSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMADDSUB231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMADDSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 B6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsub231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMADDSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPD xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 5D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPD_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPD ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 5D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPD_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPS xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 5C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPS_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMADDSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMADDSUBPS ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 5C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmaddsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMADDSUBPS_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 9A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 9A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 9A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 9A /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 9A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 9A /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 9A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 9A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132SD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 9B /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 9B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132SD_XMM_XMM_XMMM64 : Code.EVEX_VFMSUB132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132SD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 9B /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 9B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132SD_XMM_XMM_XMMM64 : Code.EVEX_VFMSUB132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132SH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 9B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132SH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 9B /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132SS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 9B /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 9B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132SS_XMM_XMM_XMMM32 : Code.EVEX_VFMSUB132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB132SS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 9B /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 9B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB132SS_XMM_XMM_XMMM32 : Code.EVEX_VFMSUB132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 AA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 AA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 AA /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 AA /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 AA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 AA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 AA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 AA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213SD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 AB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 AB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213SD_XMM_XMM_XMMM64 : Code.EVEX_VFMSUB213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213SD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 AB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 AB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213SD_XMM_XMM_XMMM64 : Code.EVEX_VFMSUB213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213SH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 AB /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213SH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 AB /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213SS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 AB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 AB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213SS_XMM_XMM_XMMM32 : Code.EVEX_VFMSUB213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB213SS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 AB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 AB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB213SS_XMM_XMM_XMMM32 : Code.EVEX_VFMSUB213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 BA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 BA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 BA /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 BA /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 BA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 BA /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 BA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUB231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 BA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231SD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 BB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 BB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231SD_XMM_XMM_XMMM64 : Code.EVEX_VFMSUB231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231SD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 BB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 BB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231SD_XMM_XMM_XMMM64 : Code.EVEX_VFMSUB231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231SH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 BB /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231SH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 BB /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231SS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 BB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 BB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231SS_XMM_XMM_XMMM32 : Code.EVEX_VFMSUB231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUB231SS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUB231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 BB /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 BB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsub231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUB231SS_XMM_XMM_XMMM32 : Code.EVEX_VFMSUB231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 97 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD132PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD132PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 97 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 97 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 97 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 97 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD132PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 97 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 97 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD132PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD132PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 97 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 A7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD213PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD213PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 A7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 A7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 A7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 A7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD213PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 A7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 A7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD213PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD213PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 A7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 B7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD231PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PD_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD231PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PD_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 B7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 B7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 B7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMSUBADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 B7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD231PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PS_XMM_XMM_XMMM128 : Code.EVEX_VFMSUBADD231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 B7 /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFMSUBADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 B7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFMSUBADD231PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFMSUBADD231PS_YMM_YMM_YMMM256 : Code.EVEX_VFMSUBADD231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 B7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubadd231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMSUBADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMSUBADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPD xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 5F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPD_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPD ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 5F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPD_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 5E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 5E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPS xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 5E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPS_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBADDPS ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 5E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBADDPS_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 6D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 6D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 6D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 6D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPD xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 6D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPD_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPD ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 6D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPD_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 6C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 6C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 6C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 6C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPS xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 6C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPS_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBPS ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 6C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBPS_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBSD xmm1, xmm2, xmm3, xmm4/m64</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 6F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBSD_XMM_XMM_XMM_XMMM64, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFMSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 6E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFMSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VFMSUBSS xmm1, xmm2, xmm3, xmm4/m32</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 6E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFMSUBSS_XMM_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCPH_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCPH_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMULCPH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.F3.MAP6.W0 D6 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMULCSH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP6.W0 D7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFMULCSH</code> instruction<hr>
	 * <p>
	 * <code>VFMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP6.W0 D7 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfmulcsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFMULCSH_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 9C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD132PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD132PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 9C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 9C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 9C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 9C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD132PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 9C /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 9C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD132PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD132PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 9C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 9D /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 9D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMADD132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 9D /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 9D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMADD132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 9D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 9D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 9D /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 9D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMADD132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD132SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 9D /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 9D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD132SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMADD132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 AC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD213PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD213PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 AC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 AC /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 AC /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 AC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD213PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 AC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 AC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD213PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD213PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 AC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 AD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 AD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMADD213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 AD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 AD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMADD213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 AD /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 AD /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 AD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 AD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMADD213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD213SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 AD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 AD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD213SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMADD213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 BC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD231PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD231PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 BC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 BC /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 BC /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 BC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD231PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMADD231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 BC /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 BC /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMADD231PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMADD231PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMADD231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 BC /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 BD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 BD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMADD231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 BD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 BD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMADD231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 BD /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 BD /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMADD231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 BD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 BD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMADD231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADD231SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADD231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 BD /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 BD /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmadd231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMADD231SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMADD231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 79 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 79 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 79 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 79 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPD xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 79 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPD_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMADDPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPD ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 79 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPD_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 78 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 78 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 78 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 78 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPS xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 78 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPS_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMADDPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDPS ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 78 /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDPS_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMADDSD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7B /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMADDSD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7B /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMADDSD</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDSD xmm1, xmm2, xmm3, xmm4/m64</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 7B /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDSD_XMM_XMM_XMM_XMMM64, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMADDSS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7A /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMADDSS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7A /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMADDSS</code> instruction<hr>
	 * <p>
	 * <code>VFNMADDSS xmm1, xmm2, xmm3, xmm4/m32</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 7A /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmaddss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMADDSS_XMM_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 9E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB132PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB132PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 9E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 9E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 9E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 9E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB132PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 9E /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 9E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB132PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 9E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 9F /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 9F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMSUB132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 9F /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 9F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMSUB132SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 9F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 9F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 9F /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 9F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMSUB132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB132SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB132SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 9F /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 9F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub132ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB132SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMSUB132SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 AE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB213PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB213PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 AE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 AE /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 AE /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 AE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB213PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 AE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 AE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB213PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 AE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 AF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 AF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMSUB213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 AF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 AF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMSUB213SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 AF /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 AF /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 AF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 AF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMSUB213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB213SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB213SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 AF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 AF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub213ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB213SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMSUB213SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 BE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PD_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB231PD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PD_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB231PD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 BE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 BE /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 BE /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VFNMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 BE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PS_XMM_XMM_XMMM128 : Code.EVEX_VFNMSUB231PS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 BE /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 BE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VFNMSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231PS_YMM_YMM_YMMM256 : Code.EVEX_VFNMSUB231PS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231PS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 BE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 BF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 BF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMSUB231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231SD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231SD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.66.0F38.W1 BF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 BF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231SD_XMM_XMM_XMMM64 : Code.EVEX_VFNMSUB231SD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 BF /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231SH</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 BF /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231sh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VFNMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 BF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 BF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMSUB231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUB231SS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUB231SS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.66.0F38.W0 BF /r</code><p>
	 * <code>FMA</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 BF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsub231ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VFNMSUB231SS_XMM_XMM_XMMM32 : Code.EVEX_VFNMSUB231SS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VFNMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 7D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 7D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 7D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 7D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPD_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPD xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 7D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPD_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPD ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 7D /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPD_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 7C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 7C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPS_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 7C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 7C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPS_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPS xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>VEX.128.66.0F3A.W1 7C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPS_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBPS ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>VEX.256.66.0F3A.W1 7C /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBPS_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBSD_XMM_XMM_XMMM64_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBSD xmm1, xmm2, xmm3, xmm4/m64</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 7F /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBSD_XMM_XMM_XMM_XMMM64, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFNMSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VFNMSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4</code><p>
	 * <code>VEX.LIG.66.0F3A.W0 7E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBSS_XMM_XMM_XMMM32_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VFNMSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VFNMSUBSS xmm1, xmm2, xmm3, xmm4/m32</code><p>
	 * <code>VEX.LIG.66.0F3A.W1 7E /r /is4</code><p>
	 * <code>FMA4</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfnmsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.VEX_VFNMSUBSS_XMM_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFPCLASSPD</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspd(AsmRegisterK dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_XMMM128B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPD</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspd(AsmRegisterK dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_YMMM256B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPD</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspd(AsmRegisterK dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPD</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspd(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8;
		} else if (src1.size == MemoryOperandSize.ZWORD) {
			code = Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8;
		} else if (src1.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VFPCLASSPD_KR_K1_YMMM256B64_IMM8;
		} else if (src1.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VFPCLASSPD_KR_K1_XMMM128B64_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VFPCLASSPD, dst, src1, imm);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPDX</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspdx(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPDY</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspdy(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPDZ</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 66 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspdz(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPH</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassph(AsmRegisterK dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_XMMM128B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPH</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassph(AsmRegisterK dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_YMMM256B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPH</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassph(AsmRegisterK dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPH</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassph(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8;
		} else if (src1.size == MemoryOperandSize.ZWORD) {
			code = Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8;
		} else if (src1.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VFPCLASSPH_KR_K1_YMMM256B16_IMM8;
		} else if (src1.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VFPCLASSPH_KR_K1_XMMM128B16_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VFPCLASSPH, dst, src1, imm);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPHX</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassphx(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_XMMM128B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPHY</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassphy(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_YMMM256B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPHZ</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassphz(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPS</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassps(AsmRegisterK dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_XMMM128B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPS</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassps(AsmRegisterK dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_YMMM256B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPS</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassps(AsmRegisterK dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSPS</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassps(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8;
		} else if (src1.size == MemoryOperandSize.ZWORD) {
			code = Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8;
		} else if (src1.size == MemoryOperandSize.YWORD) {
			code = Code.EVEX_VFPCLASSPS_KR_K1_YMMM256B32_IMM8;
		} else if (src1.size == MemoryOperandSize.XWORD) {
			code = Code.EVEX_VFPCLASSPS_KR_K1_XMMM128B32_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VFPCLASSPS, dst, src1, imm);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPSX</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspsx(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPSY</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspsy(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSPSZ</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 66 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasspsz(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VFPCLASSSD</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 67 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasssd(AsmRegisterK dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSSD_KR_K1_XMMM64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSSD</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 67 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasssd(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSSD_KR_K1_XMMM64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSSH</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSSH k1 {k2}, xmm2/m16, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 67 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasssh(AsmRegisterK dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSSH_KR_K1_XMMM16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSSH</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSSH k1 {k2}, xmm2/m16, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 67 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclasssh(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSSH_KR_K1_XMMM16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSSS</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 67 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassss(AsmRegisterK dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSSS_KR_K1_XMMM32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VFPCLASSSS</code> instruction<hr>
	 * <p>
	 * <code>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 67 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfpclassss(AsmRegisterK dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VFPCLASSSS_KR_K1_XMMM32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VFRCZPD</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 81 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VFRCZPD</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPD ymm1, ymm2/m256</code><p>
	 * <code>XOP.256.X9.W0 81 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczpd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPD_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VFRCZPD</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 81 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFRCZPD</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPD ymm1, ymm2/m256</code><p>
	 * <code>XOP.256.X9.W0 81 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczpd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPD_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFRCZPS</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPS xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 80 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VFRCZPS</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPS ymm1, ymm2/m256</code><p>
	 * <code>XOP.256.X9.W0 80 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPS_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VFRCZPS</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPS xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 80 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFRCZPS</code> instruction<hr>
	 * <p>
	 * <code>VFRCZPS ymm1, ymm2/m256</code><p>
	 * <code>XOP.256.X9.W0 80 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZPS_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFRCZSD</code> instruction<hr>
	 * <p>
	 * <code>VFRCZSD xmm1, xmm2/m64</code><p>
	 * <code>XOP.128.X9.W0 83 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZSD_XMM_XMMM64, dst.get(), src.get()));
	}

	/**
	 * <code>VFRCZSD</code> instruction<hr>
	 * <p>
	 * <code>VFRCZSD xmm1, xmm2/m64</code><p>
	 * <code>XOP.128.X9.W0 83 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZSD_XMM_XMMM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VFRCZSS</code> instruction<hr>
	 * <p>
	 * <code>VFRCZSS xmm1, xmm2/m32</code><p>
	 * <code>XOP.128.X9.W0 82 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZSS_XMM_XMMM32, dst.get(), src.get()));
	}

	/**
	 * <code>VFRCZSS</code> instruction<hr>
	 * <p>
	 * <code>VFRCZSS xmm1, xmm2/m32</code><p>
	 * <code>XOP.128.X9.W0 82 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vfrczss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VFRCZSS_XMM_XMMM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VGATHERDPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPD xmm1 {k1}, vm32x</code><p>
	 * <code>EVEX.128.66.0F38.W1 92 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERDPD_XMM_K1_VM32X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERDPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPD ymm1 {k1}, vm32x</code><p>
	 * <code>EVEX.256.66.0F38.W1 92 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdpd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERDPD_YMM_K1_VM32X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERDPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPD zmm1 {k1}, vm32y</code><p>
	 * <code>EVEX.512.66.0F38.W1 92 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdpd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERDPD_ZMM_K1_VM32Y, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERDPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPD xmm1, vm32x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W1 92 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdpd(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VGATHERDPD_XMM_VM32X_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VGATHERDPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPD ymm1, vm32x, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W1 92 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdpd(AsmRegisterYMM dst, AsmMemoryOperand src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VGATHERDPD_YMM_VM32X_YMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VGATHERDPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPS xmm1 {k1}, vm32x</code><p>
	 * <code>EVEX.128.66.0F38.W0 92 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERDPS_XMM_K1_VM32X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERDPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPS ymm1 {k1}, vm32y</code><p>
	 * <code>EVEX.256.66.0F38.W0 92 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERDPS_YMM_K1_VM32Y, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERDPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPS zmm1 {k1}, vm32z</code><p>
	 * <code>EVEX.512.66.0F38.W0 92 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERDPS_ZMM_K1_VM32Z, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERDPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPS xmm1, vm32x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 92 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdps(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VGATHERDPS_XMM_VM32X_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VGATHERDPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERDPS ymm1, vm32y, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W0 92 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherdps(AsmRegisterYMM dst, AsmMemoryOperand src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VGATHERDPS_YMM_VM32Y_YMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VGATHERPF0DPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF0DPD vm32y {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C6 /1 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf0dpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF0DPD_VM32Y_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERPF0DPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF0DPS vm32z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C6 /1 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf0dps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF0DPS_VM32Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERPF0QPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF0QPD vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C7 /1 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf0qpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF0QPD_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERPF0QPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF0QPS vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C7 /1 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf0qps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF0QPS_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERPF1DPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF1DPD vm32y {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C6 /2 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf1dpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF1DPD_VM32Y_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERPF1DPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF1DPS vm32z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C6 /2 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf1dps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF1DPS_VM32Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERPF1QPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF1QPD vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C7 /2 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf1qpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF1QPD_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERPF1QPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERPF1QPS vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C7 /2 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherpf1qps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERPF1QPS_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERQPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPD xmm1 {k1}, vm64x</code><p>
	 * <code>EVEX.128.66.0F38.W1 93 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERQPD_XMM_K1_VM64X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERQPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPD ymm1 {k1}, vm64y</code><p>
	 * <code>EVEX.256.66.0F38.W1 93 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqpd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERQPD_YMM_K1_VM64Y, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERQPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPD zmm1 {k1}, vm64z</code><p>
	 * <code>EVEX.512.66.0F38.W1 93 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqpd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERQPD_ZMM_K1_VM64Z, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERQPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPD xmm1, vm64x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W1 93 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqpd(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VGATHERQPD_XMM_VM64X_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VGATHERQPD</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPD ymm1, vm64y, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W1 93 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqpd(AsmRegisterYMM dst, AsmMemoryOperand src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VGATHERQPD_YMM_VM64Y_YMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VGATHERQPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPS xmm1 {k1}, vm64x</code><p>
	 * <code>EVEX.128.66.0F38.W0 93 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGATHERQPS xmm1 {k1}, vm64y</code><p>
	 * <code>EVEX.256.66.0F38.W0 93 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (Register.isXMM(src.index.get())) {
			code = Code.EVEX_VGATHERQPS_XMM_K1_VM64X;
		} else if (Register.isYMM(src.index.get())) {
			code = Code.EVEX_VGATHERQPS_XMM_K1_VM64Y;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VGATHERQPS, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERQPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPS ymm1 {k1}, vm64z</code><p>
	 * <code>EVEX.512.66.0F38.W0 93 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGATHERQPS_YMM_K1_VM64Z, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGATHERQPS</code> instruction<hr>
	 * <p>
	 * <code>VGATHERQPS xmm1, vm64x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 93 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGATHERQPS xmm1, vm64y, xmm2</code><p>
	 * <code>VEX.256.66.0F38.W0 93 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgatherqps(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		int code;
		if (Register.isXMM(src1.index.get())) {
			code = Code.VEX_VGATHERQPS_XMM_VM64X_XMM;
		} else if (Register.isYMM(src1.index.get())) {
			code = Code.VEX_VGATHERQPS_XMM_VM64Y_XMM;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VGATHERQPS, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VGETEXPPD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexppd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPD_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VGETEXPPD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexppd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPD_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VGETEXPPD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 42 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexppd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexppd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPD_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexppd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPD_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 42 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexppd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPH_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VGETEXPPH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpph(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPH_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VGETEXPPH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 42 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpph(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPH_ZMM_K1Z_ZMMM512B16_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPH_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPH_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 42 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpph(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPH_ZMM_K1Z_ZMMM512B16_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPS_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VGETEXPPS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPS_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VGETEXPPS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 42 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPS_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 42 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPS_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPPS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 42 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPPS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VGETEXPSD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 43 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPSD_XMM_K1Z_XMM_XMMM64_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETEXPSD</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 43 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPSD_XMM_K1Z_XMM_XMMM64_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETEXPSH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 43 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPSH_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETEXPSH</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 43 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPSH_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETEXPSS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 43 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPSS_XMM_K1Z_XMM_XMMM32_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETEXPSS</code> instruction<hr>
	 * <p>
	 * <code>VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 43 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetexpss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VGETEXPSS_XMM_K1Z_XMM_XMMM32_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETMANTPD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantpd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPD_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VGETMANTPD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantpd(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPD_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VGETMANTPD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 26 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantpd(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantpd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPD_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantpd(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPD_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 26 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantpd(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantph(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPH_XMM_K1Z_XMMM128B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VGETMANTPH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantph(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPH_YMM_K1Z_YMMM256B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VGETMANTPH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantph(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantph(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPH_XMM_K1Z_XMMM128B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantph(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPH_YMM_K1Z_YMMM256B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantph(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPS_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VGETMANTPS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantps(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPS_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VGETMANTPS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantps(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPS_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantps(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPS_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTPS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 26 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantps(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VGETMANTSD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 27 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETMANTSD</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 27 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETMANTSH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 27 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTSH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETMANTSH</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 27 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTSH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETMANTSS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 27 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGETMANTSS</code> instruction<hr>
	 * <p>
	 * <code>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 27 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgetmantss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGETMANTSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineinvqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEINVQB_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VGF2P8AFFINEINVQB_XMM_K1Z_XMM_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VGF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineinvqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEINVQB_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VGF2P8AFFINEINVQB_YMM_K1Z_YMM_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VGF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX512F and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineinvqb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VGF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineinvqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VGF2P8AFFINEINVQB_XMM_K1Z_XMM_XMMM128B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEINVQB_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VGF2P8AFFINEINVQB_XMM_K1Z_XMM_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineinvqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VGF2P8AFFINEINVQB_YMM_K1Z_YMM_YMMM256B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEINVQB_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VGF2P8AFFINEINVQB_YMM_K1Z_YMM_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGF2P8AFFINEINVQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 CF /r ib</code><p>
	 * <code>AVX512F and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineinvqb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEQB_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VGF2P8AFFINEQB_XMM_K1Z_XMM_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VGF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEQB_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VGF2P8AFFINEQB_YMM_K1Z_YMM_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VGF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX512F and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineqb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VGF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VGF2P8AFFINEQB_XMM_K1Z_XMM_XMMM128B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEQB_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VGF2P8AFFINEQB_XMM_K1Z_XMM_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VGF2P8AFFINEQB_YMM_K1Z_YMM_YMMM256B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VGF2P8AFFINEQB_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VGF2P8AFFINEQB_YMM_K1Z_YMM_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGF2P8AFFINEQB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 CE /r ib</code><p>
	 * <code>AVX512F and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8affineqb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VGF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8MULB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 CF /r</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8MULB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 CF /r</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8mulb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8MULB_XMM_XMM_XMMM128 : Code.EVEX_VGF2P8MULB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VGF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8MULB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 CF /r</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8MULB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 CF /r</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8mulb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8MULB_YMM_YMM_YMMM256 : Code.EVEX_VGF2P8MULB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VGF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8MULB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 CF /r</code><p>
	 * <code>AVX512F and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8mulb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VGF2P8MULB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VGF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8MULB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 CF /r</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8MULB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 CF /r</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8mulb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8MULB_XMM_XMM_XMMM128 : Code.EVEX_VGF2P8MULB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8MULB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 CF /r</code><p>
	 * <code>AVX and GFNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VGF2P8MULB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 CF /r</code><p>
	 * <code>AVX512VL and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8mulb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VGF2P8MULB_YMM_YMM_YMMM256 : Code.EVEX_VGF2P8MULB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VGF2P8MULB</code> instruction<hr>
	 * <p>
	 * <code>VGF2P8MULB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 CF /r</code><p>
	 * <code>AVX512F and GFNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vgf2p8mulb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VGF2P8MULB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VHADDPD</code> instruction<hr>
	 * <p>
	 * <code>VHADDPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHADDPD</code> instruction<hr>
	 * <p>
	 * <code>VHADDPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHADDPD</code> instruction<hr>
	 * <p>
	 * <code>VHADDPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VHADDPD</code> instruction<hr>
	 * <p>
	 * <code>VHADDPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VHADDPS</code> instruction<hr>
	 * <p>
	 * <code>VHADDPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPS_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHADDPS</code> instruction<hr>
	 * <p>
	 * <code>VHADDPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPS_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHADDPS</code> instruction<hr>
	 * <p>
	 * <code>VHADDPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPS_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VHADDPS</code> instruction<hr>
	 * <p>
	 * <code>VHADDPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG 7C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhaddps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHADDPS_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VHSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VHSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VHSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPS_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPS_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VHSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.F2.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPS_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VHSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VHSUBPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG 7D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vhsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VHSUBPS_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VINSERTF128</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 18 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VINSERTF128_YMM_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VINSERTF128</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 18 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VINSERTF128_YMM_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VINSERTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 18 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF32X4_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 18 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 18 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF32X4_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 18 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF32X8</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1A /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf32x8(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF32X8</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1A /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf32x8(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 18 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF64X2_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 18 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 18 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF64X2_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 18 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF64X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1A /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf64x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTF64X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1A /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertf64x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTF64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI128</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 38 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VINSERTI128_YMM_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VINSERTI128</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 38 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VINSERTI128_YMM_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VINSERTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 38 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI32X4_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 38 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 38 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI32X4_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI32X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 38 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI32X8</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3A /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti32x8(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI32X8</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3A /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti32x8(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 38 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI64X2_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 38 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 38 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI64X2_YMM_K1Z_YMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI64X2</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 38 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI64X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3A /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti64x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VINSERTI64X4</code> instruction<hr>
	 * <p>
	 * <code>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3A /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinserti64x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VINSERTI64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VINSERTPS</code> instruction<hr>
	 * <p>
	 * <code>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 21 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 21 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VINSERTPS_XMM_XMM_XMMM32_IMM8 : Code.EVEX_VINSERTPS_XMM_XMM_XMMM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VINSERTPS</code> instruction<hr>
	 * <p>
	 * <code>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 21 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 21 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vinsertps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VINSERTPS_XMM_XMM_XMMM32_IMM8 : Code.EVEX_VINSERTPS_XMM_XMM_XMMM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VLDDQU</code> instruction<hr>
	 * <p>
	 * <code>VLDDQU xmm1, m128</code><p>
	 * <code>VEX.128.F2.0F.WIG F0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vlddqu(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VLDDQU_XMM_M128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VLDDQU</code> instruction<hr>
	 * <p>
	 * <code>VLDDQU ymm1, m256</code><p>
	 * <code>VEX.256.F2.0F.WIG F0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vlddqu(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VLDDQU_YMM_M256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VLDMXCSR</code> instruction<hr>
	 * <p>
	 * <code>VLDMXCSR m32</code><p>
	 * <code>VEX.LZ.0F.WIG AE /2</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vldmxcsr(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VEX_VLDMXCSR_M32, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMASKMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVDQU xmm1, xmm2</code><p>
	 * <code>VEX.128.66.0F.WIG F7 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovdqu(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.createVmaskmovdqu(getBitness(), dst.get(), src.get()));
	}

	/**
	 * <code>VMASKMOVPD</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPD m128, xmm1, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 2F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovpd(AsmMemoryOperand dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPD_M128_XMM_XMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VMASKMOVPD</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPD m256, ymm1, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W0 2F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovpd(AsmMemoryOperand dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPD_M256_YMM_YMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VMASKMOVPD</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPD xmm1, xmm2, m128</code><p>
	 * <code>VEX.128.66.0F38.W0 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPD_XMM_XMM_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMASKMOVPD</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPD ymm1, ymm2, m256</code><p>
	 * <code>VEX.256.66.0F38.W0 2D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPD_YMM_YMM_M256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMASKMOVPS</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPS m128, xmm1, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 2E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovps(AsmMemoryOperand dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPS_M128_XMM_XMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VMASKMOVPS</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPS m256, ymm1, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W0 2E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovps(AsmMemoryOperand dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPS_M256_YMM_YMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VMASKMOVPS</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPS xmm1, xmm2, m128</code><p>
	 * <code>VEX.128.66.0F38.W0 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPS_XMM_XMM_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMASKMOVPS</code> instruction<hr>
	 * <p>
	 * <code>VMASKMOVPS ymm1, ymm2, m256</code><p>
	 * <code>VEX.256.66.0F38.W0 2C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaskmovps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VMASKMOVPS_YMM_YMM_M256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMAXPD</code> instruction<hr>
	 * <p>
	 * <code>VMAXPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXPD_XMM_XMM_XMMM128 : Code.EVEX_VMAXPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMAXPD</code> instruction<hr>
	 * <p>
	 * <code>VMAXPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXPD_YMM_YMM_YMMM256 : Code.EVEX_VMAXPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMAXPD</code> instruction<hr>
	 * <p>
	 * <code>VMAXPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPD</code> instruction<hr>
	 * <p>
	 * <code>VMAXPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMAXPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VMAXPD_XMM_XMM_XMMM128 : Code.EVEX_VMAXPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPD</code> instruction<hr>
	 * <p>
	 * <code>VMAXPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMAXPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VMAXPD_YMM_YMM_YMMM256 : Code.EVEX_VMAXPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPD</code> instruction<hr>
	 * <p>
	 * <code>VMAXPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPH</code> instruction<hr>
	 * <p>
	 * <code>VMAXPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMAXPH</code> instruction<hr>
	 * <p>
	 * <code>VMAXPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMAXPH</code> instruction<hr>
	 * <p>
	 * <code>VMAXPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 5F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPH</code> instruction<hr>
	 * <p>
	 * <code>VMAXPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPH</code> instruction<hr>
	 * <p>
	 * <code>VMAXPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPH</code> instruction<hr>
	 * <p>
	 * <code>VMAXPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 5F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPS</code> instruction<hr>
	 * <p>
	 * <code>VMAXPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXPS_XMM_XMM_XMMM128 : Code.EVEX_VMAXPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMAXPS</code> instruction<hr>
	 * <p>
	 * <code>VMAXPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXPS_YMM_YMM_YMMM256 : Code.EVEX_VMAXPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMAXPS</code> instruction<hr>
	 * <p>
	 * <code>VMAXPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPS</code> instruction<hr>
	 * <p>
	 * <code>VMAXPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMAXPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VMAXPS_XMM_XMM_XMMM128 : Code.EVEX_VMAXPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPS</code> instruction<hr>
	 * <p>
	 * <code>VMAXPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMAXPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VMAXPS_YMM_YMM_YMMM256 : Code.EVEX_VMAXPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXPS</code> instruction<hr>
	 * <p>
	 * <code>VMAXPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VMAXSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXSD_XMM_XMM_XMMM64 : Code.EVEX_VMAXSD_XMM_K1Z_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VMAXSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXSD_XMM_XMM_XMMM64 : Code.EVEX_VMAXSD_XMM_K1Z_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXSH</code> instruction<hr>
	 * <p>
	 * <code>VMAXSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXSH_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXSH</code> instruction<hr>
	 * <p>
	 * <code>VMAXSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMAXSH_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXSS</code> instruction<hr>
	 * <p>
	 * <code>VMAXSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXSS_XMM_XMM_XMMM32 : Code.EVEX_VMAXSS_XMM_K1Z_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMAXSS</code> instruction<hr>
	 * <p>
	 * <code>VMAXSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMAXSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmaxss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMAXSS_XMM_XMM_XMMM32 : Code.EVEX_VMAXSS_XMM_K1Z_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMCALL</code> instruction<hr>
	 * <p>
	 * <code>VMCALL</code><p>
	 * <code>NP 0F 01 C1</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmcall() {
		addInstruction(Instruction.create(Code.VMCALL));
	}

	/**
	 * <code>VMCLEAR</code> instruction<hr>
	 * <p>
	 * <code>VMCLEAR m64</code><p>
	 * <code>66 0F C7 /6</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmclear(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VMCLEAR_M64, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMFUNC</code> instruction<hr>
	 * <p>
	 * <code>VMFUNC</code><p>
	 * <code>NP 0F 01 D4</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmfunc() {
		addInstruction(Instruction.create(Code.VMFUNC));
	}

	/**
	 * <code>VMGEXIT</code> instruction<hr>
	 * <p>
	 * <code>VMGEXIT</code><p>
	 * <code>F3 0F 01 D9</code><p>
	 * <code>SEV-ES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmgexit() {
		addInstruction(Instruction.create(Code.VMGEXIT));
	}

	/**
	 * <code>VMINPD</code> instruction<hr>
	 * <p>
	 * <code>VMINPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINPD_XMM_XMM_XMMM128 : Code.EVEX_VMINPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMINPD</code> instruction<hr>
	 * <p>
	 * <code>VMINPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINPD_YMM_YMM_YMMM256 : Code.EVEX_VMINPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMINPD</code> instruction<hr>
	 * <p>
	 * <code>VMINPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPD</code> instruction<hr>
	 * <p>
	 * <code>VMINPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMINPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VMINPD_XMM_XMM_XMMM128 : Code.EVEX_VMINPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPD</code> instruction<hr>
	 * <p>
	 * <code>VMINPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMINPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VMINPD_YMM_YMM_YMMM256 : Code.EVEX_VMINPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPD</code> instruction<hr>
	 * <p>
	 * <code>VMINPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F.W1 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPH</code> instruction<hr>
	 * <p>
	 * <code>VMINPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMINPH</code> instruction<hr>
	 * <p>
	 * <code>VMINPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMINPH</code> instruction<hr>
	 * <p>
	 * <code>VMINPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 5D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPH</code> instruction<hr>
	 * <p>
	 * <code>VMINPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPH</code> instruction<hr>
	 * <p>
	 * <code>VMINPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPH</code> instruction<hr>
	 * <p>
	 * <code>VMINPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</code><p>
	 * <code>EVEX.512.MAP5.W0 5D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPS</code> instruction<hr>
	 * <p>
	 * <code>VMINPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINPS_XMM_XMM_XMMM128 : Code.EVEX_VMINPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMINPS</code> instruction<hr>
	 * <p>
	 * <code>VMINPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINPS_YMM_YMM_YMMM256 : Code.EVEX_VMINPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMINPS</code> instruction<hr>
	 * <p>
	 * <code>VMINPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPS</code> instruction<hr>
	 * <p>
	 * <code>VMINPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMINPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VMINPS_XMM_XMM_XMMM128 : Code.EVEX_VMINPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPS</code> instruction<hr>
	 * <p>
	 * <code>VMINPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMINPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VMINPS_YMM_YMM_YMMM256 : Code.EVEX_VMINPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINPS</code> instruction<hr>
	 * <p>
	 * <code>VMINPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.0F.W0 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINSD</code> instruction<hr>
	 * <p>
	 * <code>VMINSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINSD_XMM_XMM_XMMM64 : Code.EVEX_VMINSD_XMM_K1Z_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINSD</code> instruction<hr>
	 * <p>
	 * <code>VMINSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINSD_XMM_XMM_XMMM64 : Code.EVEX_VMINSD_XMM_K1Z_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINSH</code> instruction<hr>
	 * <p>
	 * <code>VMINSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINSH_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINSH</code> instruction<hr>
	 * <p>
	 * <code>VMINSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMINSH_XMM_K1Z_XMM_XMMM16_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINSS</code> instruction<hr>
	 * <p>
	 * <code>VMINSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINSS_XMM_XMM_XMMM32 : Code.EVEX_VMINSS_XMM_K1Z_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMINSS</code> instruction<hr>
	 * <p>
	 * <code>VMINSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vminss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMINSS_XMM_XMM_XMMM32 : Code.EVEX_VMINSS_XMM_K1Z_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMLAUNCH</code> instruction<hr>
	 * <p>
	 * <code>VMLAUNCH</code><p>
	 * <code>NP 0F 01 C2</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmlaunch() {
		addInstruction(Instruction.create(Code.VMLAUNCH));
	}

	/**
	 * <code>VMLOAD</code> instruction<hr>
	 * <p>
	 * <code>VMLOAD</code><p>
	 * <code>a64 0F 01 DA</code><p>
	 * <code>SVM</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VMLOAD</code><p>
	 * <code>a32 0F 01 DA</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMLOAD</code><p>
	 * <code>a16 0F 01 DA</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32-bit</code>
	 */
	public void vmload() {
		int code;
		if (getBitness() == 64) {
			code = Code.VMLOADQ;
		} else code = getBitness() >= 32 ? Code.VMLOADD : Code.VMLOADW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>VMMCALL</code> instruction<hr>
	 * <p>
	 * <code>VMMCALL</code><p>
	 * <code>0F 01 D9</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmmcall() {
		addInstruction(Instruction.create(Code.VMMCALL));
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPD_XMM_XMMM128 : Code.EVEX_VMOVAPD_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD xmm2/m128, xmm1</code><p>
	 * <code>VEX.128.66.0F.WIG 29 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPD xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPD_XMMM128_XMM : Code.EVEX_VMOVAPD_XMMM128_K1Z_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPD_YMM_YMMM256 : Code.EVEX_VMOVAPD_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD ymm2/m256, ymm1</code><p>
	 * <code>VEX.256.66.0F.WIG 29 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPD ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.66.0F.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPD_YMMM256_YMM : Code.EVEX_VMOVAPD_YMMM256_K1Z_YMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W1 28 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVAPD_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.66.0F.W1 29 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVAPD_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPD_XMM_XMMM128 : Code.EVEX_VMOVAPD_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPD_YMM_YMMM256 : Code.EVEX_VMOVAPD_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVAPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W1 28 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovapd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVAPD_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPS xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.0F.W0 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPS_XMM_XMMM128 : Code.EVEX_VMOVAPS_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS xmm2/m128, xmm1</code><p>
	 * <code>VEX.128.0F.WIG 29 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPS xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.0F.W0 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPS_XMMM128_XMM : Code.EVEX_VMOVAPS_XMMM128_K1Z_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPS ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.0F.W0 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPS_YMM_YMMM256 : Code.EVEX_VMOVAPS_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS ymm2/m256, ymm1</code><p>
	 * <code>VEX.256.0F.WIG 29 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPS ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.0F.W0 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmMemoryOperand dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPS_YMMM256_YMM : Code.EVEX_VMOVAPS_YMMM256_K1Z_YMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.0F.W0 28 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVAPS_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.0F.W0 29 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVAPS_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPS xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.0F.W0 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPS_XMM_XMMM128 : Code.EVEX_VMOVAPS_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVAPS ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.0F.W0 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVAPS_YMM_YMMM256 : Code.EVEX_VMOVAPS_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVAPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVAPS zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.0F.W0 28 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovaps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVAPS_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVD</code> instruction<hr>
	 * <p>
	 * <code>VMOVD xmm1, r/m32</code><p>
	 * <code>VEX.128.66.0F.W0 6E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVD xmm1, r/m32</code><p>
	 * <code>EVEX.128.66.0F.W0 6E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovd(AsmRegisterXMM dst, AsmRegister32 src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVD_XMM_RM32 : Code.EVEX_VMOVD_XMM_RM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVD</code> instruction<hr>
	 * <p>
	 * <code>VMOVD r/m32, xmm1</code><p>
	 * <code>VEX.128.66.0F.W0 7E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVD r/m32, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W0 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovd(AsmRegister32 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVD_RM32_XMM : Code.EVEX_VMOVD_RM32_XMM;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVD</code> instruction<hr>
	 * <p>
	 * <code>VMOVD r/m32, xmm1</code><p>
	 * <code>VEX.128.66.0F.W0 7E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVD r/m32, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W0 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVD_RM32_XMM : Code.EVEX_VMOVD_RM32_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVD</code> instruction<hr>
	 * <p>
	 * <code>VMOVD xmm1, r/m32</code><p>
	 * <code>VEX.128.66.0F.W0 6E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVD xmm1, r/m32</code><p>
	 * <code>EVEX.128.66.0F.W0 6E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVD_XMM_RM32 : Code.EVEX_VMOVD_XMM_RM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVDDUP xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.F2.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVDDUP xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.F2.0F.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovddup(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVDDUP_XMM_XMMM64 : Code.EVEX_VMOVDDUP_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVDDUP ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVDDUP ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F2.0F.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovddup(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVDDUP_YMM_YMMM256 : Code.EVEX_VMOVDDUP_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVDDUP zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F2.0F.W1 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovddup(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDDUP_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVDDUP xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.F2.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVDDUP xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.F2.0F.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovddup(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVDDUP_XMM_XMMM64 : Code.EVEX_VMOVDDUP_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVDDUP ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F2.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVDDUP ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F2.0F.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovddup(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVDDUP_YMM_YMMM256 : Code.EVEX_VMOVDDUP_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVDDUP zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F2.0F.W1 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovddup(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDDUP_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQA_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA xmm2/m128, xmm1</code><p>
	 * <code>VEX.128.66.0F.WIG 7F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQA_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQA_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA ymm2/m256, ymm1</code><p>
	 * <code>VEX.256.66.0F.WIG 7F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQA_YMMM256_YMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQA_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQA_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.66.0F.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W0 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.66.0F.W0 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQA32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA32 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W0 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa32(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA32_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.66.0F.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W1 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.66.0F.W1 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQA64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQA64 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W1 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqa64(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQA64_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQU_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU xmm2/m128, xmm1</code><p>
	 * <code>VEX.128.F3.0F.WIG 7F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQU_XMMM128_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQU_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU ymm2/m256, ymm1</code><p>
	 * <code>VEX.256.F3.0F.WIG 7F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQU_YMMM256_YMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQU_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVDQU</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 6F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VMOVDQU_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F2.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.F2.0F.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F2.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.F2.0F.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F2.0F.W1 6F /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.F2.0F.W1 7F /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F2.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F2.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU16</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU16 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F2.0F.W1 6F /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu16(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU16_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.F3.0F.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.F3.0F.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W0 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.F3.0F.W0 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU32</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU32 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W0 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu32(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU32_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.F3.0F.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.F3.0F.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W1 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.F3.0F.W1 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W1 6F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU64</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU64 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W1 6F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu64(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU64_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F2.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.F2.0F.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F2.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.F2.0F.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F2.0F.W0 6F /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.F2.0F.W0 7F /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F2.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F2.0F.W0 6F /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVDQU8</code> instruction<hr>
	 * <p>
	 * <code>VMOVDQU8 zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F2.0F.W0 6F /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovdqu8(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVDQU8_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVHLPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVHLPS xmm1, xmm2, xmm3</code><p>
	 * <code>VEX.128.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVHLPS xmm1, xmm2, xmm3</code><p>
	 * <code>EVEX.128.0F.W0 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovhlps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVHLPS_XMM_XMM_XMM : Code.EVEX_VMOVHLPS_XMM_XMM_XMM;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VMOVHPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVHPD m64, xmm1</code><p>
	 * <code>VEX.128.66.0F.WIG 17 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVHPD m64, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W1 17 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovhpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVHPD_M64_XMM : Code.EVEX_VMOVHPD_M64_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVHPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVHPD xmm2, xmm1, m64</code><p>
	 * <code>VEX.128.66.0F.WIG 16 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVHPD xmm2, xmm1, m64</code><p>
	 * <code>EVEX.128.66.0F.W1 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovhpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVHPD_XMM_XMM_M64 : Code.EVEX_VMOVHPD_XMM_XMM_M64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVHPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVHPS m64, xmm1</code><p>
	 * <code>VEX.128.0F.WIG 17 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVHPS m64, xmm1</code><p>
	 * <code>EVEX.128.0F.W0 17 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovhps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVHPS_M64_XMM : Code.EVEX_VMOVHPS_M64_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVHPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVHPS xmm2, xmm1, m64</code><p>
	 * <code>VEX.128.0F.WIG 16 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVHPS xmm2, xmm1, m64</code><p>
	 * <code>EVEX.128.0F.W0 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovhps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVHPS_XMM_XMM_M64 : Code.EVEX_VMOVHPS_XMM_XMM_M64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVLHPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVLHPS xmm1, xmm2, xmm3</code><p>
	 * <code>VEX.128.0F.WIG 16 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVLHPS xmm1, xmm2, xmm3</code><p>
	 * <code>EVEX.128.0F.W0 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovlhps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVLHPS_XMM_XMM_XMM : Code.EVEX_VMOVLHPS_XMM_XMM_XMM;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VMOVLPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVLPD m64, xmm1</code><p>
	 * <code>VEX.128.66.0F.WIG 13 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVLPD m64, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W1 13 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovlpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVLPD_M64_XMM : Code.EVEX_VMOVLPD_M64_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVLPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVLPD xmm2, xmm1, m64</code><p>
	 * <code>VEX.128.66.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVLPD xmm2, xmm1, m64</code><p>
	 * <code>EVEX.128.66.0F.W1 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovlpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVLPD_XMM_XMM_M64 : Code.EVEX_VMOVLPD_XMM_XMM_M64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVLPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVLPS m64, xmm1</code><p>
	 * <code>VEX.128.0F.WIG 13 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVLPS m64, xmm1</code><p>
	 * <code>EVEX.128.0F.W0 13 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovlps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVLPS_M64_XMM : Code.EVEX_VMOVLPS_M64_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVLPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVLPS xmm2, xmm1, m64</code><p>
	 * <code>VEX.128.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVLPS xmm2, xmm1, m64</code><p>
	 * <code>EVEX.128.0F.W0 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovlps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVLPS_XMM_XMM_M64 : Code.EVEX_VMOVLPS_XMM_XMM_M64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVMSKPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPD r32, xmm2</code><p>
	 * <code>VEX.128.66.0F.W0 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovmskpd(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPD_R32_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVMSKPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPD r64, xmm2</code><p>
	 * <code>VEX.128.66.0F.W1 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovmskpd(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPD_R64_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVMSKPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPD r32, ymm2</code><p>
	 * <code>VEX.256.66.0F.W0 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovmskpd(AsmRegister32 dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPD_R32_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVMSKPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPD r64, ymm2</code><p>
	 * <code>VEX.256.66.0F.W1 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovmskpd(AsmRegister64 dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPD_R64_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVMSKPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPS r32, xmm2</code><p>
	 * <code>VEX.128.0F.W0 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovmskps(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPS_R32_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVMSKPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPS r64, xmm2</code><p>
	 * <code>VEX.128.0F.W1 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovmskps(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPS_R64_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVMSKPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPS r32, ymm2</code><p>
	 * <code>VEX.256.0F.W0 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovmskps(AsmRegister32 dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPS_R32_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVMSKPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVMSKPS r64, ymm2</code><p>
	 * <code>VEX.256.0F.W1 50 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovmskps(AsmRegister64 dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VMOVMSKPS_R64_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVNTDQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTDQ m128, xmm1</code><p>
	 * <code>VEX.128.66.0F.WIG E7 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTDQ m128, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W0 E7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntdq(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTDQ_M128_XMM : Code.EVEX_VMOVNTDQ_M128_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTDQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTDQ m256, ymm1</code><p>
	 * <code>VEX.256.66.0F.WIG E7 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTDQ m256, ymm1</code><p>
	 * <code>EVEX.256.66.0F.W0 E7 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntdq(AsmMemoryOperand dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTDQ_M256_YMM : Code.EVEX_VMOVNTDQ_M256_YMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTDQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTDQ m512, zmm1</code><p>
	 * <code>EVEX.512.66.0F.W0 E7 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntdq(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVNTDQ_M512_ZMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTDQA xmm1, m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 2A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTDQA xmm1, m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 2A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntdqa(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTDQA_XMM_M128 : Code.EVEX_VMOVNTDQA_XMM_M128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVNTDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTDQA ymm1, m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 2A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTDQA ymm1, m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 2A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntdqa(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTDQA_YMM_M256 : Code.EVEX_VMOVNTDQA_YMM_M256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVNTDQA</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTDQA zmm1, m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 2A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntdqa(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVNTDQA_ZMM_M512, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVNTPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTPD m128, xmm1</code><p>
	 * <code>VEX.128.66.0F.WIG 2B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTPD m128, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W1 2B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTPD_M128_XMM : Code.EVEX_VMOVNTPD_M128_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTPD m256, ymm1</code><p>
	 * <code>VEX.256.66.0F.WIG 2B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTPD m256, ymm1</code><p>
	 * <code>EVEX.256.66.0F.W1 2B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntpd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTPD_M256_YMM : Code.EVEX_VMOVNTPD_M256_YMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTPD m512, zmm1</code><p>
	 * <code>EVEX.512.66.0F.W1 2B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntpd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVNTPD_M512_ZMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTPS m128, xmm1</code><p>
	 * <code>VEX.128.0F.WIG 2B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTPS m128, xmm1</code><p>
	 * <code>EVEX.128.0F.W0 2B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTPS_M128_XMM : Code.EVEX_VMOVNTPS_M128_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTPS m256, ymm1</code><p>
	 * <code>VEX.256.0F.WIG 2B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVNTPS m256, ymm1</code><p>
	 * <code>EVEX.256.0F.W0 2B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntps(AsmMemoryOperand dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVNTPS_M256_YMM : Code.EVEX_VMOVNTPS_M256_YMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVNTPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVNTPS m512, zmm1</code><p>
	 * <code>EVEX.512.0F.W0 2B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovntps(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVNTPS_M512_ZMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVQ xmm1, r/m64</code><p>
	 * <code>VEX.128.66.0F.W1 6E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VMOVQ xmm1, r/m64</code><p>
	 * <code>EVEX.128.66.0F.W1 6E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovq(AsmRegisterXMM dst, AsmRegister64 src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVQ_XMM_RM64 : Code.EVEX_VMOVQ_XMM_RM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVQ r/m64, xmm1</code><p>
	 * <code>VEX.128.66.0F.W1 7E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VMOVQ r/m64, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W1 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovq(AsmRegister64 dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVQ_RM64_XMM : Code.EVEX_VMOVQ_RM64_XMM;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.F3.0F.WIG 7E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVQ xmm1, xmm2/m64</code><p>
	 * <code>EVEX.128.F3.0F.W1 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVQ_XMM_XMMM64 : Code.EVEX_VMOVQ_XMM_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVQ xmm1/m64, xmm2</code><p>
	 * <code>VEX.128.66.0F.WIG D6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVQ xmm1/m64, xmm2</code><p>
	 * <code>EVEX.128.66.0F.W1 D6 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovq(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVQ_XMMM64_XMM : Code.EVEX_VMOVQ_XMMM64_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VMOVQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.F3.0F.WIG 7E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVQ xmm1, xmm2/m64</code><p>
	 * <code>EVEX.128.F3.0F.W1 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVQ_XMM_XMMM64 : Code.EVEX_VMOVQ_XMM_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMOVSD</code> instruction<hr>
	 * <p>
	 * <code>VMOVSD m64, xmm1</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 11 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSD m64 {k1}, xmm1</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 11 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSD_M64_XMM : Code.EVEX_VMOVSD_M64_K1_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSD</code> instruction<hr>
	 * <p>
	 * <code>VMOVSD xmm1, m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSD xmm1 {k1}{z}, m64</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSD_XMM_M64 : Code.EVEX_VMOVSD_XMM_K1Z_M64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSD</code> instruction<hr>
	 * <p>
	 * <code>VMOVSD xmm1, xmm2, xmm3</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSD xmm1 {k1}{z}, xmm2, xmm3</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSD_XMM_XMM_XMM : Code.EVEX_VMOVSD_XMM_K1Z_XMM_XMM;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMOVSH</code> instruction<hr>
	 * <p>
	 * <code>VMOVSH m16 {k1}, xmm1</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 11 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsh(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVSH_M16_K1_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSH</code> instruction<hr>
	 * <p>
	 * <code>VMOVSH xmm1 {k1}{z}, m16</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 10 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsh(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVSH_XMM_K1Z_M16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSH</code> instruction<hr>
	 * <p>
	 * <code>VMOVSH xmm1 {k1}{z}, xmm2, xmm3</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 10 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMOVSH_XMM_K1Z_XMM_XMM, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSHDUP xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 16 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSHDUP xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W0 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovshdup(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSHDUP_XMM_XMMM128 : Code.EVEX_VMOVSHDUP_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSHDUP ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 16 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSHDUP ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W0 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovshdup(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSHDUP_YMM_YMMM256 : Code.EVEX_VMOVSHDUP_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSHDUP zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W0 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovshdup(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVSHDUP_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSHDUP xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 16 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSHDUP xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W0 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovshdup(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSHDUP_XMM_XMMM128 : Code.EVEX_VMOVSHDUP_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSHDUP ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 16 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSHDUP ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W0 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovshdup(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSHDUP_YMM_YMMM256 : Code.EVEX_VMOVSHDUP_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSHDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSHDUP zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W0 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovshdup(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVSHDUP_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSLDUP xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSLDUP xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsldup(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSLDUP_XMM_XMMM128 : Code.EVEX_VMOVSLDUP_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSLDUP ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSLDUP ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsldup(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSLDUP_YMM_YMMM256 : Code.EVEX_VMOVSLDUP_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSLDUP zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W0 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsldup(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVSLDUP_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSLDUP xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.F3.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSLDUP xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.F3.0F.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsldup(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSLDUP_XMM_XMMM128 : Code.EVEX_VMOVSLDUP_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSLDUP ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.F3.0F.WIG 12 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSLDUP ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.F3.0F.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsldup(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSLDUP_YMM_YMMM256 : Code.EVEX_VMOVSLDUP_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSLDUP</code> instruction<hr>
	 * <p>
	 * <code>VMOVSLDUP zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.F3.0F.W0 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovsldup(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVSLDUP_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSS</code> instruction<hr>
	 * <p>
	 * <code>VMOVSS m32, xmm1</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 11 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSS m32 {k1}, xmm1</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 11 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovss(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSS_M32_XMM : Code.EVEX_VMOVSS_M32_K1_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVSS</code> instruction<hr>
	 * <p>
	 * <code>VMOVSS xmm1, m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSS xmm1 {k1}{z}, m32</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSS_XMM_M32 : Code.EVEX_VMOVSS_XMM_K1Z_M32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVSS</code> instruction<hr>
	 * <p>
	 * <code>VMOVSS xmm1, xmm2, xmm3</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVSS xmm1 {k1}{z}, xmm2, xmm3</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVSS_XMM_XMM_XMM : Code.EVEX_VMOVSS_XMM_K1Z_XMM_XMM;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPD_XMM_XMMM128 : Code.EVEX_VMOVUPD_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD xmm2/m128, xmm1</code><p>
	 * <code>VEX.128.66.0F.WIG 11 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPD xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.66.0F.W1 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPD_XMMM128_XMM : Code.EVEX_VMOVUPD_XMMM128_K1Z_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPD_YMM_YMMM256 : Code.EVEX_VMOVUPD_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD ymm2/m256, ymm1</code><p>
	 * <code>VEX.256.66.0F.WIG 11 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPD ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.66.0F.W1 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPD_YMMM256_YMM : Code.EVEX_VMOVUPD_YMMM256_K1Z_YMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W1 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVUPD_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.66.0F.W1 11 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVUPD_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPD_XMM_XMMM128 : Code.EVEX_VMOVUPD_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPD_YMM_YMMM256 : Code.EVEX_VMOVUPD_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVUPD</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F.W1 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovupd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVUPD_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPS xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.0F.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPS_XMM_XMMM128 : Code.EVEX_VMOVUPS_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS xmm2/m128, xmm1</code><p>
	 * <code>VEX.128.0F.WIG 11 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPS xmm2/m128 {k1}{z}, xmm1</code><p>
	 * <code>EVEX.128.0F.W0 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPS_XMMM128_XMM : Code.EVEX_VMOVUPS_XMMM128_K1Z_XMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPS ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.0F.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPS_YMM_YMMM256 : Code.EVEX_VMOVUPS_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS ymm2/m256, ymm1</code><p>
	 * <code>VEX.256.0F.WIG 11 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPS ymm2/m256 {k1}{z}, ymm1</code><p>
	 * <code>EVEX.256.0F.W0 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmMemoryOperand dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPS_YMMM256_YMM : Code.EVEX_VMOVUPS_YMMM256_K1Z_YMM;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.0F.W0 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVUPS_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS zmm2/m512 {k1}{z}, zmm1</code><p>
	 * <code>EVEX.512.0F.W0 11 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVUPS_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPS xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.0F.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPS_XMM_XMMM128 : Code.EVEX_VMOVUPS_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 10 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMOVUPS ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.0F.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMOVUPS_YMM_YMMM256 : Code.EVEX_VMOVUPS_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVUPS</code> instruction<hr>
	 * <p>
	 * <code>VMOVUPS zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.0F.W0 10 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovups(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVUPS_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VMOVW</code> instruction<hr>
	 * <p>
	 * <code>VMOVW xmm1, r32/m16</code><p>
	 * <code>EVEX.128.66.MAP5.W0 6E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovw(AsmRegisterXMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVW_XMM_R32M16, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVW</code> instruction<hr>
	 * <p>
	 * <code>VMOVW xmm1, r64/m16</code><p>
	 * <code>EVEX.128.66.MAP5.W1 6E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovw(AsmRegisterXMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVW_XMM_R64M16, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVW</code> instruction<hr>
	 * <p>
	 * <code>VMOVW r32/m16, xmm1</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovw(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVW_R32M16_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVW</code> instruction<hr>
	 * <p>
	 * <code>VMOVW r64/m16, xmm1</code><p>
	 * <code>EVEX.128.66.MAP5.W1 7E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>64-bit</code>
	 */
	public void vmovw(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVW_R64M16_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VMOVW</code> instruction<hr>
	 * <p>
	 * <code>VMOVW r32/m16, xmm1</code><p>
	 * <code>EVEX.128.66.MAP5.W0 7E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVW_R32M16_XMM, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMOVW</code> instruction<hr>
	 * <p>
	 * <code>VMOVW xmm1, r32/m16</code><p>
	 * <code>EVEX.128.66.MAP5.W0 6E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmovw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VMOVW_XMM_R32M16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 42 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmpsadbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VMPSADBW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VMPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 42 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmpsadbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VMPSADBW_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VMPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 42 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmpsadbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VMPSADBW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VMPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 42 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmpsadbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VMPSADBW_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VMPTRLD</code> instruction<hr>
	 * <p>
	 * <code>VMPTRLD m64</code><p>
	 * <code>NP 0F C7 /6</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmptrld(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VMPTRLD_M64, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMPTRST</code> instruction<hr>
	 * <p>
	 * <code>VMPTRST m64</code><p>
	 * <code>NP 0F C7 /7</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmptrst(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VMPTRST_M64, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMREAD</code> instruction<hr>
	 * <p>
	 * <code>VMREAD r/m32, r32</code><p>
	 * <code>NP 0F 78 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void vmread(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VMREAD_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>VMREAD</code> instruction<hr>
	 * <p>
	 * <code>VMREAD r/m32, r32</code><p>
	 * <code>NP 0F 78 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void vmread(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VMREAD_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMREAD</code> instruction<hr>
	 * <p>
	 * <code>VMREAD r/m64, r64</code><p>
	 * <code>NP 0F 78 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmread(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.VMREAD_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>VMREAD</code> instruction<hr>
	 * <p>
	 * <code>VMREAD r/m64, r64</code><p>
	 * <code>NP 0F 78 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmread(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.VMREAD_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>VMRESUME</code> instruction<hr>
	 * <p>
	 * <code>VMRESUME</code><p>
	 * <code>NP 0F 01 C3</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmresume() {
		addInstruction(Instruction.create(Code.VMRESUME));
	}

	/**
	 * <code>VMRUN</code> instruction<hr>
	 * <p>
	 * <code>VMRUN</code><p>
	 * <code>a64 0F 01 D8</code><p>
	 * <code>SVM</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VMRUN</code><p>
	 * <code>a32 0F 01 D8</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMRUN</code><p>
	 * <code>a16 0F 01 D8</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32-bit</code>
	 */
	public void vmrun() {
		int code;
		if (getBitness() == 64) {
			code = Code.VMRUNQ;
		} else code = getBitness() >= 32 ? Code.VMRUND : Code.VMRUNW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>VMSAVE</code> instruction<hr>
	 * <p>
	 * <code>VMSAVE</code><p>
	 * <code>a64 0F 01 DB</code><p>
	 * <code>SVM</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VMSAVE</code><p>
	 * <code>a32 0F 01 DB</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMSAVE</code><p>
	 * <code>a16 0F 01 DB</code><p>
	 * <code>SVM</code><p>
	 * <code>16/32-bit</code>
	 */
	public void vmsave() {
		int code;
		if (getBitness() == 64) {
			code = Code.VMSAVEQ;
		} else code = getBitness() >= 32 ? Code.VMSAVED : Code.VMSAVEW;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>VMULPD</code> instruction<hr>
	 * <p>
	 * <code>VMULPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULPD_XMM_XMM_XMMM128 : Code.EVEX_VMULPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMULPD</code> instruction<hr>
	 * <p>
	 * <code>VMULPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULPD_YMM_YMM_YMMM256 : Code.EVEX_VMULPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMULPD</code> instruction<hr>
	 * <p>
	 * <code>VMULPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPD</code> instruction<hr>
	 * <p>
	 * <code>VMULPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMULPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VMULPD_XMM_XMM_XMMM128 : Code.EVEX_VMULPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPD</code> instruction<hr>
	 * <p>
	 * <code>VMULPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMULPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VMULPD_YMM_YMM_YMMM256 : Code.EVEX_VMULPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPD</code> instruction<hr>
	 * <p>
	 * <code>VMULPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPH</code> instruction<hr>
	 * <p>
	 * <code>VMULPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMULPH</code> instruction<hr>
	 * <p>
	 * <code>VMULPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMULPH</code> instruction<hr>
	 * <p>
	 * <code>VMULPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 59 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPH</code> instruction<hr>
	 * <p>
	 * <code>VMULPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPH</code> instruction<hr>
	 * <p>
	 * <code>VMULPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPH</code> instruction<hr>
	 * <p>
	 * <code>VMULPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 59 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPS</code> instruction<hr>
	 * <p>
	 * <code>VMULPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULPS_XMM_XMM_XMMM128 : Code.EVEX_VMULPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMULPS</code> instruction<hr>
	 * <p>
	 * <code>VMULPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULPS_YMM_YMM_YMMM256 : Code.EVEX_VMULPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VMULPS</code> instruction<hr>
	 * <p>
	 * <code>VMULPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPS</code> instruction<hr>
	 * <p>
	 * <code>VMULPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMULPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VMULPS_XMM_XMM_XMMM128 : Code.EVEX_VMULPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPS</code> instruction<hr>
	 * <p>
	 * <code>VMULPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VMULPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VMULPS_YMM_YMM_YMMM256 : Code.EVEX_VMULPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULPS</code> instruction<hr>
	 * <p>
	 * <code>VMULPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULSD</code> instruction<hr>
	 * <p>
	 * <code>VMULSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULSD_XMM_XMM_XMMM64 : Code.EVEX_VMULSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULSD</code> instruction<hr>
	 * <p>
	 * <code>VMULSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULSD_XMM_XMM_XMMM64 : Code.EVEX_VMULSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULSH</code> instruction<hr>
	 * <p>
	 * <code>VMULSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 59 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULSH</code> instruction<hr>
	 * <p>
	 * <code>VMULSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 59 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VMULSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULSS</code> instruction<hr>
	 * <p>
	 * <code>VMULSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULSS_XMM_XMM_XMMM32 : Code.EVEX_VMULSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VMULSS</code> instruction<hr>
	 * <p>
	 * <code>VMULSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 59 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmulss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VMULSS_XMM_XMM_XMMM32 : Code.EVEX_VMULSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VMWRITE</code> instruction<hr>
	 * <p>
	 * <code>VMWRITE r32, r/m32</code><p>
	 * <code>NP 0F 79 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void vmwrite(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.VMWRITE_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>VMWRITE</code> instruction<hr>
	 * <p>
	 * <code>VMWRITE r64, r/m64</code><p>
	 * <code>NP 0F 79 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmwrite(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.VMWRITE_R64_RM64, dst.get(), src.get()));
	}

	/**
	 * <code>VMWRITE</code> instruction<hr>
	 * <p>
	 * <code>VMWRITE r32, r/m32</code><p>
	 * <code>NP 0F 79 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32-bit</code>
	 */
	public void vmwrite(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VMWRITE_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMWRITE</code> instruction<hr>
	 * <p>
	 * <code>VMWRITE r64, r/m64</code><p>
	 * <code>NP 0F 79 /r</code><p>
	 * <code>VMX</code><p>
	 * <code>64-bit</code>
	 */
	public void vmwrite(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VMWRITE_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VMXOFF</code> instruction<hr>
	 * <p>
	 * <code>VMXOFF</code><p>
	 * <code>NP 0F 01 C4</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmxoff() {
		addInstruction(Instruction.create(Code.VMXOFF));
	}

	/**
	 * <code>VMXON</code> instruction<hr>
	 * <p>
	 * <code>VMXON m64</code><p>
	 * <code>F3 0F C7 /6</code><p>
	 * <code>VMX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vmxon(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VMXON_M64, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VORPD</code> instruction<hr>
	 * <p>
	 * <code>VORPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VORPD_XMM_XMM_XMMM128 : Code.EVEX_VORPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VORPD</code> instruction<hr>
	 * <p>
	 * <code>VORPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VORPD_YMM_YMM_YMMM256 : Code.EVEX_VORPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VORPD</code> instruction<hr>
	 * <p>
	 * <code>VORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 56 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VORPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VORPD</code> instruction<hr>
	 * <p>
	 * <code>VORPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VORPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VORPD_XMM_XMM_XMMM128 : Code.EVEX_VORPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VORPD</code> instruction<hr>
	 * <p>
	 * <code>VORPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VORPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VORPD_YMM_YMM_YMMM256 : Code.EVEX_VORPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VORPD</code> instruction<hr>
	 * <p>
	 * <code>VORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 56 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VORPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VORPS</code> instruction<hr>
	 * <p>
	 * <code>VORPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VORPS_XMM_XMM_XMMM128 : Code.EVEX_VORPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VORPS</code> instruction<hr>
	 * <p>
	 * <code>VORPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VORPS_YMM_YMM_YMMM256 : Code.EVEX_VORPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VORPS</code> instruction<hr>
	 * <p>
	 * <code>VORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 56 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VORPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VORPS</code> instruction<hr>
	 * <p>
	 * <code>VORPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VORPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VORPS_XMM_XMM_XMMM128 : Code.EVEX_VORPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VORPS</code> instruction<hr>
	 * <p>
	 * <code>VORPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 56 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 56 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VORPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VORPS_YMM_YMM_YMMM256 : Code.EVEX_VORPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VORPS</code> instruction<hr>
	 * <p>
	 * <code>VORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 56 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vorps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VORPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VP2INTERSECTD</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTD k1+1, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.0F38.W0 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VP2INTERSECTD</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTD k1+1, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.0F38.W0 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VP2INTERSECTD</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTD k1+1, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F2.0F38.W0 68 /r</code><p>
	 * <code>AVX512F and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VP2INTERSECTD</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTD k1+1, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F2.0F38.W0 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VP2INTERSECTD</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTD k1+1, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F2.0F38.W0 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VP2INTERSECTD</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTD k1+1, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F2.0F38.W0 68 /r</code><p>
	 * <code>AVX512F and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VP2INTERSECTQ</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTQ k1+1, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F38.W1 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VP2INTERSECTQ</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTQ k1+1, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F38.W1 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VP2INTERSECTQ</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTQ k1+1, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.F2.0F38.W1 68 /r</code><p>
	 * <code>AVX512F and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VP2INTERSECTQ</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTQ k1+1, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.F2.0F38.W1 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VP2INTERSECTQ</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTQ k1+1, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.F2.0F38.W1 68 /r</code><p>
	 * <code>AVX512VL and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VP2INTERSECTQ</code> instruction<hr>
	 * <p>
	 * <code>VP2INTERSECTQ k1+1, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.F2.0F38.W1 68 /r</code><p>
	 * <code>AVX512F and AVX512_VP2INTERSECT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp2intersectq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), src2.flags);
	}

	/**
	 * <code>VP4DPWSSD</code> instruction<hr>
	 * <p>
	 * <code>VP4DPWSSD zmm1 {k1}{z}, zmm2+3, m128</code><p>
	 * <code>EVEX.512.F2.0F38.W0 52 /r</code><p>
	 * <code>AVX512_4VNNIW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp4dpwssd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP4DPWSSD_ZMM_K1Z_ZMMP3_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VP4DPWSSDS</code> instruction<hr>
	 * <p>
	 * <code>VP4DPWSSDS zmm1 {k1}{z}, zmm2+3, m128</code><p>
	 * <code>EVEX.512.F2.0F38.W0 53 /r</code><p>
	 * <code>AVX512_4VNNIW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vp4dpwssds(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VP4DPWSSDS_ZMM_K1Z_ZMMP3_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPABSB</code> instruction<hr>
	 * <p>
	 * <code>VPABSB xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSB xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSB_XMM_XMMM128 : Code.EVEX_VPABSB_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSB</code> instruction<hr>
	 * <p>
	 * <code>VPABSB ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSB ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsb(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSB_YMM_YMMM256 : Code.EVEX_VPABSB_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSB</code> instruction<hr>
	 * <p>
	 * <code>VPABSB zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsb(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSB_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSB</code> instruction<hr>
	 * <p>
	 * <code>VPABSB xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSB xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSB_XMM_XMMM128 : Code.EVEX_VPABSB_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPABSB</code> instruction<hr>
	 * <p>
	 * <code>VPABSB ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSB ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsb(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSB_YMM_YMMM256 : Code.EVEX_VPABSB_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPABSB</code> instruction<hr>
	 * <p>
	 * <code>VPABSB zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 1C /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsb(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSB_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPABSD</code> instruction<hr>
	 * <p>
	 * <code>VPABSD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 1E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 1E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSD_XMM_XMMM128 : Code.EVEX_VPABSD_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSD</code> instruction<hr>
	 * <p>
	 * <code>VPABSD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 1E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 1E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSD_YMM_YMMM256 : Code.EVEX_VPABSD_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSD</code> instruction<hr>
	 * <p>
	 * <code>VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 1E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSD_ZMM_K1Z_ZMMM512B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSD</code> instruction<hr>
	 * <p>
	 * <code>VPABSD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 1E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 1E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VPABSD_XMM_K1Z_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPABSD_XMM_XMMM128 : Code.EVEX_VPABSD_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPABSD</code> instruction<hr>
	 * <p>
	 * <code>VPABSD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 1E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 1E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VPABSD_YMM_K1Z_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPABSD_YMM_YMMM256 : Code.EVEX_VPABSD_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPABSD</code> instruction<hr>
	 * <p>
	 * <code>VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 1E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSD_ZMM_K1Z_ZMMM512B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPABSQ</code> instruction<hr>
	 * <p>
	 * <code>VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 1F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSQ</code> instruction<hr>
	 * <p>
	 * <code>VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 1F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSQ</code> instruction<hr>
	 * <p>
	 * <code>VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 1F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSQ</code> instruction<hr>
	 * <p>
	 * <code>VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 1F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPABSQ</code> instruction<hr>
	 * <p>
	 * <code>VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 1F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPABSQ</code> instruction<hr>
	 * <p>
	 * <code>VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 1F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPABSW</code> instruction<hr>
	 * <p>
	 * <code>VPABSW xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSW xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSW_XMM_XMMM128 : Code.EVEX_VPABSW_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSW</code> instruction<hr>
	 * <p>
	 * <code>VPABSW ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSW ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsw(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSW_YMM_YMMM256 : Code.EVEX_VPABSW_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSW</code> instruction<hr>
	 * <p>
	 * <code>VPABSW zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsw(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSW_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPABSW</code> instruction<hr>
	 * <p>
	 * <code>VPABSW xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSW xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSW_XMM_XMMM128 : Code.EVEX_VPABSW_XMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPABSW</code> instruction<hr>
	 * <p>
	 * <code>VPABSW ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPABSW ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPABSW_YMM_YMMM256 : Code.EVEX_VPABSW_YMM_K1Z_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPABSW</code> instruction<hr>
	 * <p>
	 * <code>VPABSW zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 1D /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpabsw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPABSW_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 6B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackssdw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKSSDW_XMM_XMM_XMMM128 : Code.EVEX_VPACKSSDW_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 6B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackssdw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKSSDW_YMM_YMM_YMMM256 : Code.EVEX_VPACKSSDW_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 6B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackssdw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKSSDW_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 6B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackssdw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPACKSSDW_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPACKSSDW_XMM_XMM_XMMM128 : Code.EVEX_VPACKSSDW_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 6B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackssdw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPACKSSDW_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPACKSSDW_YMM_YMM_YMMM256 : Code.EVEX_VPACKSSDW_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPACKSSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 6B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackssdw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKSSDW_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSWB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 63 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSWB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 63 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpacksswb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKSSWB_XMM_XMM_XMMM128 : Code.EVEX_VPACKSSWB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSWB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 63 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSWB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 63 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpacksswb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKSSWB_YMM_YMM_YMMM256 : Code.EVEX_VPACKSSWB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSWB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 63 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpacksswb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKSSWB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSWB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 63 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSWB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 63 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpacksswb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKSSWB_XMM_XMM_XMMM128 : Code.EVEX_VPACKSSWB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSWB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 63 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKSSWB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 63 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpacksswb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKSSWB_YMM_YMM_YMMM256 : Code.EVEX_VPACKSSWB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPACKSSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKSSWB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 63 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpacksswb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKSSWB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 2B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 2B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackusdw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKUSDW_XMM_XMM_XMMM128 : Code.EVEX_VPACKUSDW_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 2B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 2B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackusdw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKUSDW_YMM_YMM_YMMM256 : Code.EVEX_VPACKUSDW_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 2B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackusdw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKUSDW_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 2B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 2B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackusdw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPACKUSDW_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPACKUSDW_XMM_XMM_XMMM128 : Code.EVEX_VPACKUSDW_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 2B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 2B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackusdw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPACKUSDW_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPACKUSDW_YMM_YMM_YMMM256 : Code.EVEX_VPACKUSDW_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPACKUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 2B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackusdw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKUSDW_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSWB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 67 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSWB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 67 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackuswb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKUSWB_XMM_XMM_XMMM128 : Code.EVEX_VPACKUSWB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSWB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 67 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSWB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 67 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackuswb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKUSWB_YMM_YMM_YMMM256 : Code.EVEX_VPACKUSWB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSWB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 67 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackuswb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKUSWB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSWB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 67 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSWB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 67 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackuswb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKUSWB_XMM_XMM_XMMM128 : Code.EVEX_VPACKUSWB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSWB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 67 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPACKUSWB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 67 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackuswb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPACKUSWB_YMM_YMM_YMMM256 : Code.EVEX_VPACKUSWB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPACKUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPACKUSWB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 67 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpackuswb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPACKUSWB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDB</code> instruction<hr>
	 * <p>
	 * <code>VPADDB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FC /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG FC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDB_XMM_XMM_XMMM128 : Code.EVEX_VPADDB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDB</code> instruction<hr>
	 * <p>
	 * <code>VPADDB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FC /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG FC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDB_YMM_YMM_YMMM256 : Code.EVEX_VPADDB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDB</code> instruction<hr>
	 * <p>
	 * <code>VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG FC /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDB</code> instruction<hr>
	 * <p>
	 * <code>VPADDB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FC /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG FC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDB_XMM_XMM_XMMM128 : Code.EVEX_VPADDB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDB</code> instruction<hr>
	 * <p>
	 * <code>VPADDB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FC /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG FC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDB_YMM_YMM_YMMM256 : Code.EVEX_VPADDB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDB</code> instruction<hr>
	 * <p>
	 * <code>VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG FC /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDD</code> instruction<hr>
	 * <p>
	 * <code>VPADDD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FE /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 FE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDD_XMM_XMM_XMMM128 : Code.EVEX_VPADDD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDD</code> instruction<hr>
	 * <p>
	 * <code>VPADDD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FE /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 FE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDD_YMM_YMM_YMMM256 : Code.EVEX_VPADDD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDD</code> instruction<hr>
	 * <p>
	 * <code>VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 FE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDD</code> instruction<hr>
	 * <p>
	 * <code>VPADDD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FE /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 FE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPADDD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPADDD_XMM_XMM_XMMM128 : Code.EVEX_VPADDD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPADDD</code> instruction<hr>
	 * <p>
	 * <code>VPADDD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FE /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 FE /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPADDD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPADDD_YMM_YMM_YMMM256 : Code.EVEX_VPADDD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPADDD</code> instruction<hr>
	 * <p>
	 * <code>VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 FE /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPADDQ</code> instruction<hr>
	 * <p>
	 * <code>VPADDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D4 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 D4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDQ_XMM_XMM_XMMM128 : Code.EVEX_VPADDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDQ</code> instruction<hr>
	 * <p>
	 * <code>VPADDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D4 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 D4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDQ_YMM_YMM_YMMM256 : Code.EVEX_VPADDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDQ</code> instruction<hr>
	 * <p>
	 * <code>VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 D4 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDQ</code> instruction<hr>
	 * <p>
	 * <code>VPADDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D4 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 D4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPADDQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPADDQ_XMM_XMM_XMMM128 : Code.EVEX_VPADDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPADDQ</code> instruction<hr>
	 * <p>
	 * <code>VPADDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D4 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 D4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPADDQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPADDQ_YMM_YMM_YMMM256 : Code.EVEX_VPADDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPADDQ</code> instruction<hr>
	 * <p>
	 * <code>VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 D4 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPADDSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EC /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG EC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSB_XMM_XMM_XMMM128 : Code.EVEX_VPADDSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EC /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG EC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSB_YMM_YMM_YMMM256 : Code.EVEX_VPADDSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG EC /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EC /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG EC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSB_XMM_XMM_XMMM128 : Code.EVEX_VPADDSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EC /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG EC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSB_YMM_YMM_YMMM256 : Code.EVEX_VPADDSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG EC /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG ED /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG ED /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSW_XMM_XMM_XMMM128 : Code.EVEX_VPADDSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG ED /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG ED /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSW_YMM_YMM_YMMM256 : Code.EVEX_VPADDSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG ED /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG ED /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG ED /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSW_XMM_XMM_XMMM128 : Code.EVEX_VPADDSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG ED /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG ED /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDSW_YMM_YMM_YMMM256 : Code.EVEX_VPADDSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG ED /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDUSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DC /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSB_XMM_XMM_XMMM128 : Code.EVEX_VPADDUSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDUSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DC /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSB_YMM_YMM_YMMM256 : Code.EVEX_VPADDUSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDUSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DC /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDUSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDUSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DC /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSB_XMM_XMM_XMMM128 : Code.EVEX_VPADDUSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDUSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DC /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DC /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSB_YMM_YMM_YMMM256 : Code.EVEX_VPADDUSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDUSB</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DC /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDUSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDUSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DD /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSW_XMM_XMM_XMMM128 : Code.EVEX_VPADDUSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDUSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DD /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSW_YMM_YMM_YMMM256 : Code.EVEX_VPADDUSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDUSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DD /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDUSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDUSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DD /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSW_XMM_XMM_XMMM128 : Code.EVEX_VPADDUSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDUSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DD /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDUSW_YMM_YMM_YMMM256 : Code.EVEX_VPADDUSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDUSW</code> instruction<hr>
	 * <p>
	 * <code>VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DD /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddusw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDUSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDW</code> instruction<hr>
	 * <p>
	 * <code>VPADDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FD /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG FD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDW_XMM_XMM_XMMM128 : Code.EVEX_VPADDW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDW</code> instruction<hr>
	 * <p>
	 * <code>VPADDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FD /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG FD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDW_YMM_YMM_YMMM256 : Code.EVEX_VPADDW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDW</code> instruction<hr>
	 * <p>
	 * <code>VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG FD /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPADDW</code> instruction<hr>
	 * <p>
	 * <code>VPADDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FD /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG FD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDW_XMM_XMM_XMMM128 : Code.EVEX_VPADDW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDW</code> instruction<hr>
	 * <p>
	 * <code>VPADDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FD /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG FD /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPADDW_YMM_YMM_YMMM256 : Code.EVEX_VPADDW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPADDW</code> instruction<hr>
	 * <p>
	 * <code>VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG FD /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpaddw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPADDW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPALIGNR</code> instruction<hr>
	 * <p>
	 * <code>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpalignr(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPALIGNR_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VPALIGNR_XMM_K1Z_XMM_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPALIGNR</code> instruction<hr>
	 * <p>
	 * <code>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpalignr(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPALIGNR_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VPALIGNR_YMM_K1Z_YMM_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPALIGNR</code> instruction<hr>
	 * <p>
	 * <code>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpalignr(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPALIGNR_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPALIGNR</code> instruction<hr>
	 * <p>
	 * <code>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpalignr(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPALIGNR_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VPALIGNR_XMM_K1Z_XMM_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPALIGNR</code> instruction<hr>
	 * <p>
	 * <code>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpalignr(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPALIGNR_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VPALIGNR_YMM_K1Z_YMM_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPALIGNR</code> instruction<hr>
	 * <p>
	 * <code>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 0F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpalignr(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPALIGNR_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPAND</code> instruction<hr>
	 * <p>
	 * <code>VPAND xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DB /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpand(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPAND_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPAND</code> instruction<hr>
	 * <p>
	 * <code>VPAND ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DB /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpand(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPAND_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPAND</code> instruction<hr>
	 * <p>
	 * <code>VPAND xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DB /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpand(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPAND_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPAND</code> instruction<hr>
	 * <p>
	 * <code>VPAND ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DB /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpand(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPAND_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPANDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPANDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPANDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 DB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPANDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPANDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPANDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 DB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDN</code> instruction<hr>
	 * <p>
	 * <code>VPANDN xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DF /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandn(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPANDN_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPANDN</code> instruction<hr>
	 * <p>
	 * <code>VPANDN ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DF /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandn(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPANDN_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPANDN</code> instruction<hr>
	 * <p>
	 * <code>VPANDN xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DF /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandn(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPANDN_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPANDN</code> instruction<hr>
	 * <p>
	 * <code>VPANDN ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DF /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandn(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPANDN_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPANDND</code> instruction<hr>
	 * <p>
	 * <code>VPANDND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDND_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDND</code> instruction<hr>
	 * <p>
	 * <code>VPANDND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDND_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDND</code> instruction<hr>
	 * <p>
	 * <code>VPANDND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 DF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDND_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDND</code> instruction<hr>
	 * <p>
	 * <code>VPANDND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDND_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDND</code> instruction<hr>
	 * <p>
	 * <code>VPANDND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDND_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDND</code> instruction<hr>
	 * <p>
	 * <code>VPANDND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 DF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDND_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDNQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDNQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDNQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDNQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDNQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 DF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDNQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDNQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDNQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDNQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 DF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDNQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDNQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 DF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandnq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDNQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 DB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 DB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPANDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 DB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpandq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPANDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPAVGB</code> instruction<hr>
	 * <p>
	 * <code>VPAVGB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E0 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGB_XMM_XMM_XMMM128 : Code.EVEX_VPAVGB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPAVGB</code> instruction<hr>
	 * <p>
	 * <code>VPAVGB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E0 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E0 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGB_YMM_YMM_YMMM256 : Code.EVEX_VPAVGB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPAVGB</code> instruction<hr>
	 * <p>
	 * <code>VPAVGB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E0 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPAVGB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPAVGB</code> instruction<hr>
	 * <p>
	 * <code>VPAVGB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E0 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E0 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGB_XMM_XMM_XMMM128 : Code.EVEX_VPAVGB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPAVGB</code> instruction<hr>
	 * <p>
	 * <code>VPAVGB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E0 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E0 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGB_YMM_YMM_YMMM256 : Code.EVEX_VPAVGB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPAVGB</code> instruction<hr>
	 * <p>
	 * <code>VPAVGB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E0 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPAVGB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPAVGW</code> instruction<hr>
	 * <p>
	 * <code>VPAVGW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E3 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E3 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGW_XMM_XMM_XMMM128 : Code.EVEX_VPAVGW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPAVGW</code> instruction<hr>
	 * <p>
	 * <code>VPAVGW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E3 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E3 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGW_YMM_YMM_YMMM256 : Code.EVEX_VPAVGW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPAVGW</code> instruction<hr>
	 * <p>
	 * <code>VPAVGW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E3 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPAVGW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPAVGW</code> instruction<hr>
	 * <p>
	 * <code>VPAVGW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E3 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E3 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGW_XMM_XMM_XMMM128 : Code.EVEX_VPAVGW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPAVGW</code> instruction<hr>
	 * <p>
	 * <code>VPAVGW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E3 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPAVGW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E3 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPAVGW_YMM_YMM_YMMM256 : Code.EVEX_VPAVGW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPAVGW</code> instruction<hr>
	 * <p>
	 * <code>VPAVGW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E3 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpavgw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPAVGW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBLENDD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 02 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPBLENDD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 02 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDD_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPBLENDD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 02 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPBLENDD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 02 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDD_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPBLENDMB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMB_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMB_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 66 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMB_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBLENDMB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMB_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBLENDMB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 66 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBLENDMD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 64 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPBLENDMD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPBLENDMD</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 64 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPBLENDMQ</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMQ</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMQ</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 64 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMQ</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPBLENDMQ</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 64 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPBLENDMQ</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 64 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPBLENDMW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 66 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPBLENDMW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBLENDMW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 66 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBLENDMW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 66 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendmw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPBLENDMW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBLENDVB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 4C /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendvb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDVB_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPBLENDVB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 4C /r /is4</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendvb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDVB_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPBLENDVB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 4C /r /is4</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendvb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDVB_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPBLENDVB</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 4C /r /is4</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendvb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDVB_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPBLENDW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0E /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPBLENDW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0E /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDW_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPBLENDW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 0E /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPBLENDW</code> instruction<hr>
	 * <p>
	 * <code>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 0E /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpblendw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPBLENDW_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB xmm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.128.66.0F38.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterXMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTB_XMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB ymm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.256.66.0F38.W0 7A /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterYMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTB_YMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB zmm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.512.66.0F38.W0 7A /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterZMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTB_ZMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB xmm1, xmm2/m8</code><p>
	 * <code>VEX.128.66.0F38.W0 78 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTB xmm1 {k1}{z}, xmm2/m8</code><p>
	 * <code>EVEX.128.66.0F38.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTB_XMM_XMMM8 : Code.EVEX_VPBROADCASTB_XMM_K1Z_XMMM8;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB ymm1, xmm2/m8</code><p>
	 * <code>VEX.256.66.0F38.W0 78 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTB ymm1 {k1}{z}, xmm2/m8</code><p>
	 * <code>EVEX.256.66.0F38.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTB_YMM_XMMM8 : Code.EVEX_VPBROADCASTB_YMM_K1Z_XMMM8;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB zmm1 {k1}{z}, xmm2/m8</code><p>
	 * <code>EVEX.512.66.0F38.W0 78 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTB_ZMM_K1Z_XMMM8, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB xmm1, xmm2/m8</code><p>
	 * <code>VEX.128.66.0F38.W0 78 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTB xmm1 {k1}{z}, xmm2/m8</code><p>
	 * <code>EVEX.128.66.0F38.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTB_XMM_XMMM8 : Code.EVEX_VPBROADCASTB_XMM_K1Z_XMMM8;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB ymm1, xmm2/m8</code><p>
	 * <code>VEX.256.66.0F38.W0 78 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTB ymm1 {k1}{z}, xmm2/m8</code><p>
	 * <code>EVEX.256.66.0F38.W0 78 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTB_YMM_XMMM8 : Code.EVEX_VPBROADCASTB_YMM_K1Z_XMMM8;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTB</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTB zmm1 {k1}{z}, xmm2/m8</code><p>
	 * <code>EVEX.512.66.0F38.W0 78 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastb(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTB_ZMM_K1Z_XMMM8, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD xmm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.128.66.0F38.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterXMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTD_XMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD ymm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.256.66.0F38.W0 7C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterYMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTD_YMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD zmm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.512.66.0F38.W0 7C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterZMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTD_ZMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.W0 58 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTD xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTD_XMM_XMMM32 : Code.EVEX_VPBROADCASTD_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD ymm1, xmm2/m32</code><p>
	 * <code>VEX.256.66.0F38.W0 58 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTD ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTD_YMM_XMMM32 : Code.EVEX_VPBROADCASTD_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD zmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.512.66.0F38.W0 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTD_ZMM_K1Z_XMMM32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.W0 58 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTD xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTD_XMM_XMMM32 : Code.EVEX_VPBROADCASTD_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD ymm1, xmm2/m32</code><p>
	 * <code>VEX.256.66.0F38.W0 58 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTD ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.W0 58 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTD_YMM_XMMM32 : Code.EVEX_VPBROADCASTD_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTD</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTD zmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.512.66.0F38.W0 58 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTD_ZMM_K1Z_XMMM32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTMB2Q</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTMB2Q xmm1, k1</code><p>
	 * <code>EVEX.128.F3.0F38.W1 2A /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastmb2q(AsmRegisterXMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTMB2Q_XMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPBROADCASTMB2Q</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTMB2Q ymm1, k1</code><p>
	 * <code>EVEX.256.F3.0F38.W1 2A /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastmb2q(AsmRegisterYMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTMB2Q_YMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPBROADCASTMB2Q</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTMB2Q zmm1, k1</code><p>
	 * <code>EVEX.512.F3.0F38.W1 2A /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastmb2q(AsmRegisterZMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTMB2Q_ZMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPBROADCASTMW2D</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTMW2D xmm1, k1</code><p>
	 * <code>EVEX.128.F3.0F38.W0 3A /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastmw2d(AsmRegisterXMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTMW2D_XMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPBROADCASTMW2D</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTMW2D ymm1, k1</code><p>
	 * <code>EVEX.256.F3.0F38.W0 3A /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastmw2d(AsmRegisterYMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTMW2D_YMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPBROADCASTMW2D</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTMW2D zmm1, k1</code><p>
	 * <code>EVEX.512.F3.0F38.W0 3A /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastmw2d(AsmRegisterZMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTMW2D_ZMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ xmm1 {k1}{z}, r64</code><p>
	 * <code>EVEX.128.66.0F38.W1 7C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterXMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTQ_XMM_K1Z_R64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ ymm1 {k1}{z}, r64</code><p>
	 * <code>EVEX.256.66.0F38.W1 7C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterYMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTQ_YMM_K1Z_R64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ zmm1 {k1}{z}, r64</code><p>
	 * <code>EVEX.512.66.0F38.W1 7C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterZMM dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTQ_ZMM_K1Z_R64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.W0 59 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTQ_XMM_XMMM64 : Code.EVEX_VPBROADCASTQ_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.W0 59 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTQ_YMM_XMMM64 : Code.EVEX_VPBROADCASTQ_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W1 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTQ_ZMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.W0 59 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTQ_XMM_XMMM64 : Code.EVEX_VPBROADCASTQ_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.W0 59 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.W1 59 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTQ_YMM_XMMM64 : Code.EVEX_VPBROADCASTQ_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTQ</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.W1 59 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTQ_ZMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW xmm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.128.66.0F38.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterXMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTW_XMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW ymm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.256.66.0F38.W0 7B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterYMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTW_YMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW zmm1 {k1}{z}, r32</code><p>
	 * <code>EVEX.512.66.0F38.W0 7B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterZMM dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTW_ZMM_K1Z_R32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW xmm1, xmm2/m16</code><p>
	 * <code>VEX.128.66.0F38.W0 79 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTW xmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.128.66.0F38.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTW_XMM_XMMM16 : Code.EVEX_VPBROADCASTW_XMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW ymm1, xmm2/m16</code><p>
	 * <code>VEX.256.66.0F38.W0 79 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTW ymm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.256.66.0F38.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTW_YMM_XMMM16 : Code.EVEX_VPBROADCASTW_YMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW zmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.512.66.0F38.W0 79 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTW_ZMM_K1Z_XMMM16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW xmm1, xmm2/m16</code><p>
	 * <code>VEX.128.66.0F38.W0 79 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTW xmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.128.66.0F38.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTW_XMM_XMMM16 : Code.EVEX_VPBROADCASTW_XMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW ymm1, xmm2/m16</code><p>
	 * <code>VEX.256.66.0F38.W0 79 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPBROADCASTW ymm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.256.66.0F38.W0 79 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPBROADCASTW_YMM_XMMM16 : Code.EVEX_VPBROADCASTW_YMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPBROADCASTW</code> instruction<hr>
	 * <p>
	 * <code>VPBROADCASTW zmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.512.66.0F38.W0 79 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpbroadcastw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPBROADCASTW_ZMM_K1Z_XMMM16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqhqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpclmulqdq(dst, src1, src2, 17);
	}

	/**
	 * <code>VPCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqhqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpclmulqdq(dst, src1, src2, 17);
	}

	/**
	 * <code>VPCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqhqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpclmulqdq(dst, src1, src2, 17);
	}

	/**
	 * <code>VPCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqhqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 17);
	}

	/**
	 * <code>VPCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqhqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 17);
	}

	/**
	 * <code>VPCLMULHQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqhqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 17);
	}

	/**
	 * <code>VPCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqlqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpclmulqdq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqlqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpclmulqdq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqlqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpclmulqdq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqlqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqlqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCLMULHQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulhqlqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqhqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpclmulqdq(dst, src1, src2, 16);
	}

	/**
	 * <code>VPCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqhqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpclmulqdq(dst, src1, src2, 16);
	}

	/**
	 * <code>VPCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqhqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpclmulqdq(dst, src1, src2, 16);
	}

	/**
	 * <code>VPCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqhqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 16);
	}

	/**
	 * <code>VPCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqhqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 16);
	}

	/**
	 * <code>VPCLMULLQHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqhqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 16);
	}

	/**
	 * <code>VPCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqlqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpclmulqdq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqlqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpclmulqdq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqlqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpclmulqdq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqlqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqlqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCLMULLQLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmullqlqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpclmulqdq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>PCLMULQDQ and AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512VL and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCLMULQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.WIG 44 /r ib</code><p>
	 * <code>AVX512F and VPCLMULQDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpclmulqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCMOV</code> instruction<hr>
	 * <p>
	 * <code>VPCMOV xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 A2 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmov(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPCMOV_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPCMOV</code> instruction<hr>
	 * <p>
	 * <code>VPCMOV xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 A2 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmov(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPCMOV_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPCMOV</code> instruction<hr>
	 * <p>
	 * <code>VPCMOV ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>XOP.256.X8.W0 A2 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmov(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPCMOV_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPCMOV</code> instruction<hr>
	 * <p>
	 * <code>VPCMOV ymm1, ymm2, ymm3/m256, ymm4</code><p>
	 * <code>XOP.256.X8.W0 A2 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmov(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPCMOV_YMM_YMM_YMMM256_YMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPCMOV</code> instruction<hr>
	 * <p>
	 * <code>VPCMOV xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>XOP.128.X8.W1 A2 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmov(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.XOP_VPCMOV_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMOV</code> instruction<hr>
	 * <p>
	 * <code>VPCMOV ymm1, ymm2, ymm3, ymm4/m256</code><p>
	 * <code>XOP.256.X8.W1 A2 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmov(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.XOP_VPCMOV_YMM_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 74 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 74 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 74 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 74 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQB_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 74 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 74 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 74 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 74 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 74 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQB_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQB k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 74 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD k1 {k2}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 76 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD k1 {k2}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 76 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD k1 {k2}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 76 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD k1 {k2}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 76 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD k1 {k2}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 76 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQD k1 {k2}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 76 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 29 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQQ_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 29 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQQ_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 29 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 29 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQQ_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 29 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQQ_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 29 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpequw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 75 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 75 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 75 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 75 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 75 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPEQW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPEQW k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 75 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpeqw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPESTRI</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 61 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpestri(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRI_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPCMPESTRI</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 61 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpestri(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRI_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCMPESTRI64</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRI64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 61 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vpcmpestri64(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRI64_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPCMPESTRI64</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRI64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 61 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vpcmpestri64(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRI64_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCMPESTRM</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 60 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpestrm(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRM_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPCMPESTRM</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 60 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpestrm(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRM_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCMPESTRM64</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRM64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 60 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vpcmpestrm64(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRM64_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPCMPESTRM64</code> instruction<hr>
	 * <p>
	 * <code>VPCMPESTRM64 xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 60 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vpcmpestrm64(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPESTRM64_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCMPFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsed(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsed(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsed(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsed(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsed(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsed(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseub(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseub(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseub(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseub(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseub(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseub(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseud(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseud(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseud(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseud(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseud(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseud(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalseuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsew(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsew(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsew(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsew(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsew(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpfalsew(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 64 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 64 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 64 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 64 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTB_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 64 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 64 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 64 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 64 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 64 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTB_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTB k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 64 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 66 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 66 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 66 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 66 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 66 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 66 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 66 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 37 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 37 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTQ_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 37 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 37 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTQ_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 37 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 37 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 37 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTQ_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 37 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 37 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTQ_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 37 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 65 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 65 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 65 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 65 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 65 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 65 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 65 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 65 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 65 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPCMPGTW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPCMPGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPGTW k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 65 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpgtw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPCMPISTRI</code> instruction<hr>
	 * <p>
	 * <code>VPCMPISTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 63 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpistri(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPISTRI_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPCMPISTRI</code> instruction<hr>
	 * <p>
	 * <code>VPCMPISTRI xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 63 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpistri(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPISTRI_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCMPISTRM</code> instruction<hr>
	 * <p>
	 * <code>VPCMPISTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 62 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpistrm(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPISTRM_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPCMPISTRM</code> instruction<hr>
	 * <p>
	 * <code>VPCMPISTRM xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 62 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpistrm(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPCMPISTRM_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCMPLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpled(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpled(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpled(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpled(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpled(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpled(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleub(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleub(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleub(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleub(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleub(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleub(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleud(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleud(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleud(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleud(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleud(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleud(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpleuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmplew(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmplew(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmplew(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmplew(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmplew(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmplew(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCMPLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltub(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltub(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltub(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltub(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltub(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltub(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltud(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltud(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltud(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltud(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltud(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltud(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpltw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCMPNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnequw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpneqw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCMPNLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnled(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnled(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnled(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnled(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnled(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnled(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleub(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleub(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleub(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleub(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleub(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleub(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleud(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleud(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleud(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleud(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleud(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleud(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnleuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnlew(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnlew(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnlew(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnlew(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnlew(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnlew(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCMPNLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltub(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltub(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltub(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltub(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltub(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltub(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltud(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltud(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltud(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltud(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltud(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltud(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPNLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpnltw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCMPQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrued(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrued(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrued(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrued(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrued(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrued(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1F /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueub(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueub(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueub(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueub(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueub(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueub(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueud(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueud(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueud(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueud(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueud(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueud(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptrueuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptruew(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcmpw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptruew(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		vpcmpw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptruew(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		vpcmpw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptruew(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptruew(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmptruew(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		vpcmpw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCMPUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpub(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpub(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpub(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpub(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpub(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUB</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpub(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpud(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpud(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpud(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpud(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpud(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPUD</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpud(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 1E /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPCMPUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPUW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3E /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpuw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPCMPW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCMPW</code> instruction<hr>
	 * <p>
	 * <code>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 3F /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcmpw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPCOMB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCOMD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCOMEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomequw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomeqw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 4);
	}

	/**
	 * <code>VPCOMFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalsed(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalsed(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalseuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalsew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMFALSEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomfalsew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 6);
	}

	/**
	 * <code>VPCOMGEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomged(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomged(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgeuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 3);
	}

	/**
	 * <code>VPCOMGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMGTW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomgtw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 2);
	}

	/**
	 * <code>VPCOMLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomled(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomled(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomleuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomlew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomlew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 1);
	}

	/**
	 * <code>VPCOMLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMLTW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomltw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 0);
	}

	/**
	 * <code>VPCOMNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomnequw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMNEQW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomneqw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 5);
	}

	/**
	 * <code>VPCOMPRESSB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSB xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W0 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSB_XMMM128_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSB xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W0 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSB_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSB ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W0 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressb(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSB_YMMM256_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSB ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W0 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSB_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSB zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W0 63 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressb(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSB_ZMMM512_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSB zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W0 63 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSB_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W0 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSD_XMMM128_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W0 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSD_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W0 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSD_YMMM256_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W0 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSD_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W0 8B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSD_ZMMM512_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W0 8B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSD_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W1 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSQ_XMMM128_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W1 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressq(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSQ_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W1 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSQ_YMMM256_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W1 8B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressq(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSQ_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W1 8B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSQ_ZMMM512_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W1 8B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressq(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSQ_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSW xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W1 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSW_XMMM128_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSW xmm1/m128 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.66.0F38.W1 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSW_XMMM128_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSW ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W1 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressw(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSW_YMMM256_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSW ymm1/m256 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.66.0F38.W1 63 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressw(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSW_YMMM256_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSW zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W1 63 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressw(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSW_ZMMM512_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMPRESSW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMPRESSW zmm1/m512 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.66.0F38.W1 63 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcompressw(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCOMPRESSW_ZMMM512_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPCOMQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCOMTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomb(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrued(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUED</code> instruction<hr>
	 * <p>
	 * <code>VPCOMD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrued(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomd(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomub(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomud(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuq(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtrueuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomuw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtruew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		vpcomw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMTRUEW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomtruew(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		vpcomw(dst, src1, src2, 7);
	}

	/**
	 * <code>VPCOMUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMUB</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EC /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCOMUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMUD</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EE /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCOMUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMUQ</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 EF /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCOMUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMUW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 ED /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCOMW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPCOMW</code> instruction<hr>
	 * <p>
	 * <code>VPCOMW xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 CD /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpcomw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPCONFLICTD</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTD_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCONFLICTD</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTD_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCONFLICTD</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 C4 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTD_ZMM_K1Z_ZMMM512B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCONFLICTD</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTD_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPCONFLICTD</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTD_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPCONFLICTD</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 C4 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTD_ZMM_K1Z_ZMMM512B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPCONFLICTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCONFLICTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCONFLICTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 C4 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPCONFLICTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPCONFLICTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 C4 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPCONFLICTQ</code> instruction<hr>
	 * <p>
	 * <code>VPCONFLICTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 C4 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpconflictq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPCONFLICTQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPDPBUSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 50 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 50 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPBUSD_XMM_XMM_XMMM128 : Code.EVEX_VPDPBUSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPBUSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 50 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 50 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPBUSD_YMM_YMM_YMMM256 : Code.EVEX_VPDPBUSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPBUSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 50 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPBUSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPBUSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 50 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 50 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPBUSD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPBUSD_XMM_XMM_XMMM128 : Code.EVEX_VPDPBUSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPBUSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 50 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 50 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPBUSD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPBUSD_YMM_YMM_YMMM256 : Code.EVEX_VPDPBUSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPBUSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 50 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPBUSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPBUSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSDS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 51 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusds(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPBUSDS_XMM_XMM_XMMM128 : Code.EVEX_VPDPBUSDS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPBUSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSDS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 51 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusds(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPBUSDS_YMM_YMM_YMMM256 : Code.EVEX_VPDPBUSDS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPBUSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 51 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusds(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPBUSDS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPBUSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSDS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 51 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusds(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPBUSDS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPBUSDS_XMM_XMM_XMMM128 : Code.EVEX_VPDPBUSDS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPBUSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPBUSDS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 51 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusds(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPBUSDS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPBUSDS_YMM_YMM_YMMM256 : Code.EVEX_VPDPBUSDS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPBUSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPBUSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 51 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpbusds(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPBUSDS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPWSSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 52 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPWSSD_XMM_XMM_XMMM128 : Code.EVEX_VPDPWSSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPWSSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 52 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPWSSD_YMM_YMM_YMMM256 : Code.EVEX_VPDPWSSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPWSSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 52 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPWSSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPWSSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 52 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPWSSD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPWSSD_XMM_XMM_XMMM128 : Code.EVEX_VPDPWSSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPWSSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 52 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 52 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPWSSD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPWSSD_YMM_YMM_YMMM256 : Code.EVEX_VPDPWSSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPWSSD</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 52 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPWSSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPWSSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 53 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSDS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 53 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssds(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPWSSDS_XMM_XMM_XMMM128 : Code.EVEX_VPDPWSSDS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPWSSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 53 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSDS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 53 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssds(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPDPWSSDS_YMM_YMM_YMMM256 : Code.EVEX_VPDPWSSDS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPWSSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 53 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssds(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPWSSDS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPDPWSSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 53 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSDS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 53 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssds(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPWSSDS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPWSSDS_XMM_XMM_XMMM128 : Code.EVEX_VPDPWSSDS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPWSSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 53 /r</code><p>
	 * <code>AVX512VL and AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPDPWSSDS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 53 /r</code><p>
	 * <code>AVX-VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssds(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPDPWSSDS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPDPWSSDS_YMM_YMM_YMMM256 : Code.EVEX_VPDPWSSDS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPDPWSSDS</code> instruction<hr>
	 * <p>
	 * <code>VPDPWSSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 53 /r</code><p>
	 * <code>AVX512_VNNI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpdpwssds(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPDPWSSDS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERM2F128</code> instruction<hr>
	 * <p>
	 * <code>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 06 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vperm2f128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERM2F128_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPERM2F128</code> instruction<hr>
	 * <p>
	 * <code>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 06 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vperm2f128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERM2F128_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPERM2I128</code> instruction<hr>
	 * <p>
	 * <code>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 46 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vperm2i128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERM2I128_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPERM2I128</code> instruction<hr>
	 * <p>
	 * <code>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 46 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vperm2i128(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERM2I128_YMM_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPERMB</code> instruction<hr>
	 * <p>
	 * <code>VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 8D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMB_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMB</code> instruction<hr>
	 * <p>
	 * <code>VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 8D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMB_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMB</code> instruction<hr>
	 * <p>
	 * <code>VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 8D /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMB</code> instruction<hr>
	 * <p>
	 * <code>VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 8D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMB_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMB</code> instruction<hr>
	 * <p>
	 * <code>VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 8D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMB_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMB</code> instruction<hr>
	 * <p>
	 * <code>VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 8D /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMD</code> instruction<hr>
	 * <p>
	 * <code>VPERMD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 36 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 36 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMD_YMM_YMM_YMMM256 : Code.EVEX_VPERMD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMD</code> instruction<hr>
	 * <p>
	 * <code>VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 36 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMD</code> instruction<hr>
	 * <p>
	 * <code>VPERMD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 36 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 36 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPERMD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMD_YMM_YMM_YMMM256 : Code.EVEX_VPERMD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMD</code> instruction<hr>
	 * <p>
	 * <code>VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 36 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 75 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2b(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2B_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 75 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2b(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2B_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 75 /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2b(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2B_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 75 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2b(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2B_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMI2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 75 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2b(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2B_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMI2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 75 /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2b(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2B_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMI2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2d(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2D_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2d(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2D_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 76 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2d(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2D_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2d(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2D_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2d(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2D_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 76 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2d(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2D_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 77 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 77 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 77 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 77 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 77 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2PS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2q(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2Q_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2q(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2Q_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 76 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2q(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2Q_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2q(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2Q_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 76 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2q(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2Q_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 76 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2q(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2Q_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMI2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2w(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2W_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2w(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2W_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 75 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2w(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2W_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMI2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2w(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2W_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMI2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 75 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2w(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2W_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMI2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 75 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermi2w(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMI2W_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMIL2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 49 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PD_XMM_XMM_XMMM128_XMM_IMM4, dst.get(), src1.get(), src2.get(), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 49 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PD_XMM_XMM_XMMM128_XMM_IMM4, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 49 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PD_YMM_YMM_YMMM256_YMM_IMM4, dst.get(), src1.get(), src2.get(), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 49 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PD_YMM_YMM_YMMM256_YMM_IMM4, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PD xmm1, xmm2, xmm3, xmm4/m128, imm4</code><p>
	 * <code>VEX.128.66.0F3A.W1 49 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PD_XMM_XMM_XMM_XMMM128_IMM4, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPERMIL2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PD ymm1, ymm2, ymm3, ymm4/m256, imm4</code><p>
	 * <code>VEX.256.66.0F3A.W1 49 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PD_YMM_YMM_YMM_YMMM256_IMM4, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPERMIL2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 48 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PS_XMM_XMM_XMMM128_XMM_IMM4, dst.get(), src1.get(), src2.get(), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4</code><p>
	 * <code>VEX.128.66.0F3A.W0 48 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PS_XMM_XMM_XMMM128_XMM_IMM4, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 48 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmRegisterYMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PS_YMM_YMM_YMMM256_YMM_IMM4, dst.get(), src1.get(), src2.get(), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4</code><p>
	 * <code>VEX.256.66.0F3A.W0 48 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, AsmRegisterYMM src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PS_YMM_YMM_YMMM256_YMM_IMM4, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get(), imm));
	}

	/**
	 * <code>VPERMIL2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PS xmm1, xmm2, xmm3, xmm4/m128, imm4</code><p>
	 * <code>VEX.128.66.0F3A.W1 48 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PS_XMM_XMM_XMM_XMMM128_IMM4, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPERMIL2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMIL2PS ymm1, ymm2, ymm3, ymm4/m256, imm4</code><p>
	 * <code>VEX.256.66.0F3A.W1 48 /r /is5</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermil2ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, AsmMemoryOperand src3, int imm) {
		addInstruction(Instruction.create(Code.VEX_VPERMIL2PS_YMM_YMM_YMM_YMMM256_IMM4, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 0D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_XMM_XMM_XMMM128 : Code.EVEX_VPERMILPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 0D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_YMM_YMM_YMMM256 : Code.EVEX_VPERMILPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 0D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 0D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPERMILPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_XMM_XMM_XMMM128 : Code.EVEX_VPERMILPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 0D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPERMILPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_YMM_YMM_YMMM256 : Code.EVEX_VPERMILPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 0D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 05 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 05 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_XMM_XMMM128_IMM8 : Code.EVEX_VPERMILPD_XMM_K1Z_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 05 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 05 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_YMM_YMMM256_IMM8 : Code.EVEX_VPERMILPD_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 05 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 05 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 05 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPERMILPD_XMM_K1Z_XMMM128B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_XMM_XMMM128_IMM8 : Code.EVEX_VPERMILPD_XMM_K1Z_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 05 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 05 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPERMILPD_YMM_K1Z_YMMM256B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPD_YMM_YMMM256_IMM8 : Code.EVEX_VPERMILPD_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMILPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 05 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilpd(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 0C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_XMM_XMM_XMMM128 : Code.EVEX_VPERMILPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 0C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_YMM_YMM_YMMM256 : Code.EVEX_VPERMILPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 0C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 0C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPERMILPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_XMM_XMM_XMMM128 : Code.EVEX_VPERMILPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 0C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPERMILPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_YMM_YMM_YMMM256 : Code.EVEX_VPERMILPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 0C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_XMM_XMMM128_IMM8 : Code.EVEX_VPERMILPS_XMM_K1Z_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_YMM_YMMM256_IMM8 : Code.EVEX_VPERMILPS_YMM_K1Z_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPERMILPS_XMM_K1Z_XMMM128B32_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_XMM_XMMM128_IMM8 : Code.EVEX_VPERMILPS_XMM_K1Z_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPERMILPS_YMM_K1Z_YMMM256B32_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMILPS_YMM_YMMM256_IMM8 : Code.EVEX_VPERMILPS_YMM_K1Z_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMILPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 04 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermilps(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 01 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 01 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMPD_YMM_YMMM256_IMM8 : Code.EVEX_VPERMPD_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 01 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 01 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 01 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPERMPD_YMM_K1Z_YMMM256B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMPD_YMM_YMMM256_IMM8 : Code.EVEX_VPERMPD_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMPD</code> instruction<hr>
	 * <p>
	 * <code>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 01 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermpd(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 16 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMPS_YMM_YMM_YMMM256 : Code.EVEX_VPERMPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 16 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 16 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPERMPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMPS_YMM_YMM_YMMM256 : Code.EVEX_VPERMPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMPS</code> instruction<hr>
	 * <p>
	 * <code>VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 16 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 36 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 36 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 36 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 36 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 00 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 00 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPERMQ_YMM_YMMM256_IMM8 : Code.EVEX_VPERMQ_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 00 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.W1 00 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 00 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPERMQ_YMM_K1Z_YMMM256B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPERMQ_YMM_YMMM256_IMM8 : Code.EVEX_VPERMQ_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMQ</code> instruction<hr>
	 * <p>
	 * <code>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 00 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPERMT2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2b(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2B_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2B ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2b(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2B_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2B zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 7D /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2b(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2B_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2b(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2B_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMT2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2B ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 7D /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2b(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2B_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMT2B</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2B zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 7D /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2b(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2B_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMT2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2d(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2D_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2d(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2D_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2d(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2D_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2d(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2D_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2d(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2D_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2D</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2d(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2D_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2pd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2pd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2PD</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2pd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2ps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 7F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2ps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2PS</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 7F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2ps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2PS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2q(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2Q_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2q(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2Q_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2q(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2Q_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2q(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2Q_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 7E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2q(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2Q_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2Q</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 7E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2q(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2Q_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPERMT2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 7D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2w(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2W_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2W ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 7D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2w(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2W_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2W zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 7D /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2w(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2W_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMT2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 7D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2w(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2W_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMT2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2W ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 7D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2w(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2W_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMT2W</code> instruction<hr>
	 * <p>
	 * <code>VPERMT2W zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 7D /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermt2w(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMT2W_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMW</code> instruction<hr>
	 * <p>
	 * <code>VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 8D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMW</code> instruction<hr>
	 * <p>
	 * <code>VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 8D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMW</code> instruction<hr>
	 * <p>
	 * <code>VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 8D /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPERMW</code> instruction<hr>
	 * <p>
	 * <code>VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 8D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMW</code> instruction<hr>
	 * <p>
	 * <code>VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 8D /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPERMW</code> instruction<hr>
	 * <p>
	 * <code>VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 8D /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpermw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPERMW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDB</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDB xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDB_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDB</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDB ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandb(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDB_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDB</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDB zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 62 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandb(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDB_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDB</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDB xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDB_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDB</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDB ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandb(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDB_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDB</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDB zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 62 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandb(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDB_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDD_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDD_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 89 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDD_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDD xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDD_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDD ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDD_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDD</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDD zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 89 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDD_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDQ xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDQ_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDQ ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDQ_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDQ zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 89 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDQ_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDQ xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDQ_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDQ ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 89 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDQ_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDQ zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 89 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDQ_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDW</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDW xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDW_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDW</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDW ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandw(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDW_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDW</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDW zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 62 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandw(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDW_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPEXPANDW</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDW xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDW_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDW</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDW ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 62 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDW_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXPANDW</code> instruction<hr>
	 * <p>
	 * <code>VPEXPANDW zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 62 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpexpandw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPEXPANDW_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPEXTRB</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRB r32/m8, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 14 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRB r32/m8, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 14 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpextrb(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRB_R32M8_XMM_IMM8 : Code.EVEX_VPEXTRB_R32M8_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRB</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRB r64/m8, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 14 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRB r64/m8, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 14 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>64-bit</code>
	 */
	public void vpextrb(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRB_R64M8_XMM_IMM8 : Code.EVEX_VPEXTRB_R64M8_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRB</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRB r32/m8, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 14 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRB r32/m8, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 14 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpextrb(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRB_R32M8_XMM_IMM8 : Code.EVEX_VPEXTRB_R32M8_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRD</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRD r/m32, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 16 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRD r/m32, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 16 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpextrd(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRD_RM32_XMM_IMM8 : Code.EVEX_VPEXTRD_RM32_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRD</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRD r/m32, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 16 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRD r/m32, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 16 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpextrd(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRD_RM32_XMM_IMM8 : Code.EVEX_VPEXTRD_RM32_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRQ r/m64, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 16 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRQ r/m64, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 16 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>64-bit</code>
	 */
	public void vpextrq(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRQ_RM64_XMM_IMM8 : Code.EVEX_VPEXTRQ_RM64_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRQ</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRQ r/m64, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 16 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRQ r/m64, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 16 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>64-bit</code>
	 */
	public void vpextrq(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRQ_RM64_XMM_IMM8 : Code.EVEX_VPEXTRQ_RM64_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRW</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRW r32, xmm1, imm8</code><p>
	 * <code>VEX.128.66.0F.W0 C5 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRW r32, xmm1, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 C5 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpextrw(AsmRegister32 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRW_R32_XMM_IMM8 : Code.EVEX_VPEXTRW_R32_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRW</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRW r64, xmm1, imm8</code><p>
	 * <code>VEX.128.66.0F.W1 C5 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRW r64, xmm1, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C5 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>64-bit</code>
	 */
	public void vpextrw(AsmRegister64 dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRW_R64_XMM_IMM8 : Code.EVEX_VPEXTRW_R64_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPEXTRW</code> instruction<hr>
	 * <p>
	 * <code>VPEXTRW r32/m16, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 15 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPEXTRW r32/m16, xmm2, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 15 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpextrw(AsmMemoryOperand dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPEXTRW_R32M16_XMM_IMM8 : Code.EVEX_VPEXTRW_R32M16_XMM_IMM8;
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src1.get(), imm));
	}

	/**
	 * <code>VPGATHERDD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDD xmm1 {k1}, vm32x</code><p>
	 * <code>EVEX.128.66.0F38.W0 90 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERDD_XMM_K1_VM32X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERDD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDD ymm1 {k1}, vm32y</code><p>
	 * <code>EVEX.256.66.0F38.W0 90 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERDD_YMM_K1_VM32Y, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERDD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDD zmm1 {k1}, vm32z</code><p>
	 * <code>EVEX.512.66.0F38.W0 90 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERDD_ZMM_K1_VM32Z, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERDD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDD xmm1, vm32x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 90 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdd(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPGATHERDD_XMM_VM32X_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPGATHERDD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDD ymm1, vm32y, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W0 90 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdd(AsmRegisterYMM dst, AsmMemoryOperand src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPGATHERDD_YMM_VM32Y_YMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPGATHERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDQ xmm1 {k1}, vm32x</code><p>
	 * <code>EVEX.128.66.0F38.W1 90 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERDQ_XMM_K1_VM32X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDQ ymm1 {k1}, vm32x</code><p>
	 * <code>EVEX.256.66.0F38.W1 90 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERDQ_YMM_K1_VM32X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDQ zmm1 {k1}, vm32y</code><p>
	 * <code>EVEX.512.66.0F38.W1 90 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERDQ_ZMM_K1_VM32Y, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDQ xmm1, vm32x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W1 90 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdq(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPGATHERDQ_XMM_VM32X_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPGATHERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERDQ ymm1, vm32x, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W1 90 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherdq(AsmRegisterYMM dst, AsmMemoryOperand src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPGATHERDQ_YMM_VM32X_YMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPGATHERQD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQD xmm1 {k1}, vm64x</code><p>
	 * <code>EVEX.128.66.0F38.W0 91 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPGATHERQD xmm1 {k1}, vm64y</code><p>
	 * <code>EVEX.256.66.0F38.W0 91 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (Register.isXMM(src.index.get())) {
			code = Code.EVEX_VPGATHERQD_XMM_K1_VM64X;
		} else if (Register.isYMM(src.index.get())) {
			code = Code.EVEX_VPGATHERQD_XMM_K1_VM64Y;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VPGATHERQD, dst, src);
		}
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERQD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQD ymm1 {k1}, vm64z</code><p>
	 * <code>EVEX.512.66.0F38.W0 91 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERQD_YMM_K1_VM64Z, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERQD</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQD xmm1, vm64x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 91 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPGATHERQD xmm1, vm64y, xmm2</code><p>
	 * <code>VEX.256.66.0F38.W0 91 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqd(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		int code;
		if (Register.isXMM(src1.index.get())) {
			code = Code.VEX_VPGATHERQD_XMM_VM64X_XMM;
		} else if (Register.isYMM(src1.index.get())) {
			code = Code.VEX_VPGATHERQD_XMM_VM64Y_XMM;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VPGATHERQD, dst, src1, src2);
		}
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPGATHERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQQ xmm1 {k1}, vm64x</code><p>
	 * <code>EVEX.128.66.0F38.W1 91 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERQQ_XMM_K1_VM64X, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQQ ymm1 {k1}, vm64y</code><p>
	 * <code>EVEX.256.66.0F38.W1 91 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERQQ_YMM_K1_VM64Y, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQQ zmm1 {k1}, vm64z</code><p>
	 * <code>EVEX.512.66.0F38.W1 91 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPGATHERQQ_ZMM_K1_VM64Z, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPGATHERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQQ xmm1, vm64x, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W1 91 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqq(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPGATHERQQ_XMM_VM64X_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPGATHERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPGATHERQQ ymm1, vm64y, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W1 91 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpgatherqq(AsmRegisterYMM dst, AsmMemoryOperand src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPGATHERQQ_YMM_VM64Y_YMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPHADDBD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDBD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C2 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddbd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDBD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDBD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDBD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C2 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddbd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDBD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDBQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDBQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C3 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddbq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDBQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDBQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDBQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C3 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddbq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDBQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDBW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDBW xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C1 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDBW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDBW xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C1 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 02 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHADDD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 02 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHADDD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 02 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 02 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDDQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDDQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 CB /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphadddq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDDQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDDQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 CB /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphadddq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 03 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDSW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 03 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDSW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 03 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDSW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDSW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 03 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDSW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDUBD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUBD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D2 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddubd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUBD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDUBD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUBD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D2 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddubd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUBD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUBQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D3 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddubq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUBQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUBQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D3 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddubq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUBQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDUBW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUBW xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D1 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddubw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDUBW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUBW xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D1 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddubw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUDQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 DB /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddudq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUDQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 DB /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddudq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDUWD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUWD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D6 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphadduwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUWD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDUWD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUWD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D6 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphadduwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUWD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDUWQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUWQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D7 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphadduwq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUWQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDUWQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDUWQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 D7 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphadduwq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDUWQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 01 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHADDW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 01 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHADDW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 01 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDW</code> instruction<hr>
	 * <p>
	 * <code>VPHADDW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 01 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHADDW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDWD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C6 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDWD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPHADDWD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C6 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDWD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHADDWQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDWQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C7 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddwq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDWQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHADDWQ</code> instruction<hr>
	 * <p>
	 * <code>VPHADDWQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 C7 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphaddwq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHADDWQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHMINPOSUW</code> instruction<hr>
	 * <p>
	 * <code>VPHMINPOSUW xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 41 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphminposuw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VPHMINPOSUW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHMINPOSUW</code> instruction<hr>
	 * <p>
	 * <code>VPHMINPOSUW xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 41 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphminposuw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VPHMINPOSUW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBBW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBBW xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 E1 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHSUBBW_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHSUBBW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBBW xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 E1 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHSUBBW_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 06 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 06 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 06 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 06 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBD_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBDQ</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBDQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 E3 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHSUBDQ_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHSUBDQ</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBDQ xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 E3 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHSUBDQ_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 07 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBSW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 07 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBSW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 07 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBSW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 07 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBSW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 05 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 05 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPHSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 05 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 05 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPHSUBW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPHSUBWD</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBWD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 E2 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XOP_VPHSUBWD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPHSUBWD</code> instruction<hr>
	 * <p>
	 * <code>VPHSUBWD xmm1, xmm2/m128</code><p>
	 * <code>XOP.128.X9.W0 E2 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vphsubwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOP_VPHSUBWD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPINSRB</code> instruction<hr>
	 * <p>
	 * <code>VPINSRB xmm1, xmm2, r32/m8, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 20 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPINSRB xmm1, xmm2, r32/m8, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 20 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpinsrb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRB_XMM_XMM_R32M8_IMM8 : Code.EVEX_VPINSRB_XMM_XMM_R32M8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPINSRB</code> instruction<hr>
	 * <p>
	 * <code>VPINSRB xmm1, xmm2, r64/m8, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 20 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPINSRB xmm1, xmm2, r64/m8, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 20 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>64-bit</code>
	 */
	public void vpinsrb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRB_XMM_XMM_R64M8_IMM8 : Code.EVEX_VPINSRB_XMM_XMM_R64M8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPINSRB</code> instruction<hr>
	 * <p>
	 * <code>VPINSRB xmm1, xmm2, r32/m8, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 20 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPINSRB xmm1, xmm2, r32/m8, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 20 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpinsrb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRB_XMM_XMM_R32M8_IMM8 : Code.EVEX_VPINSRB_XMM_XMM_R32M8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPINSRD</code> instruction<hr>
	 * <p>
	 * <code>VPINSRD xmm1, xmm2, r/m32, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 22 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPINSRD xmm1, xmm2, r/m32, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 22 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpinsrd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRD_XMM_XMM_RM32_IMM8 : Code.EVEX_VPINSRD_XMM_XMM_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPINSRD</code> instruction<hr>
	 * <p>
	 * <code>VPINSRD xmm1, xmm2, r/m32, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W0 22 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPINSRD xmm1, xmm2, r/m32, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 22 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpinsrd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRD_XMM_XMM_RM32_IMM8 : Code.EVEX_VPINSRD_XMM_XMM_RM32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPINSRQ</code> instruction<hr>
	 * <p>
	 * <code>VPINSRQ xmm1, xmm2, r/m64, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 22 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPINSRQ xmm1, xmm2, r/m64, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 22 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>64-bit</code>
	 */
	public void vpinsrq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRQ_XMM_XMM_RM64_IMM8 : Code.EVEX_VPINSRQ_XMM_XMM_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPINSRQ</code> instruction<hr>
	 * <p>
	 * <code>VPINSRQ xmm1, xmm2, r/m64, imm8</code><p>
	 * <code>VEX.128.66.0F3A.W1 22 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPINSRQ xmm1, xmm2, r/m64, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 22 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>64-bit</code>
	 */
	public void vpinsrq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRQ_XMM_XMM_RM64_IMM8 : Code.EVEX_VPINSRQ_XMM_XMM_RM64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPINSRW</code> instruction<hr>
	 * <p>
	 * <code>VPINSRW xmm1, xmm2, r32/m16, imm8</code><p>
	 * <code>VEX.128.66.0F.W0 C4 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPINSRW xmm1, xmm2, r32/m16, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 C4 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpinsrw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister32 src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRW_XMM_XMM_R32M16_IMM8 : Code.EVEX_VPINSRW_XMM_XMM_R32M16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPINSRW</code> instruction<hr>
	 * <p>
	 * <code>VPINSRW xmm1, xmm2, r64/m16, imm8</code><p>
	 * <code>VEX.128.66.0F.W1 C4 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>VPINSRW xmm1, xmm2, r64/m16, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C4 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>64-bit</code>
	 */
	public void vpinsrw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegister64 src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRW_XMM_XMM_R64M16_IMM8 : Code.EVEX_VPINSRW_XMM_XMM_R64M16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VPINSRW</code> instruction<hr>
	 * <p>
	 * <code>VPINSRW xmm1, xmm2, r32/m16, imm8</code><p>
	 * <code>VEX.128.66.0F.W0 C4 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPINSRW xmm1, xmm2, r32/m16, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 C4 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpinsrw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPINSRW_XMM_XMM_R32M16_IMM8 : Code.EVEX_VPINSRW_XMM_XMM_R32M16_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPLZCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTD_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPLZCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTD_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPLZCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 44 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTD_ZMM_K1Z_ZMMM512B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPLZCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTD_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPLZCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTD_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPLZCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 44 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTD_ZMM_K1Z_ZMMM512B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPLZCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPLZCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPLZCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 44 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPLZCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPLZCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 44 /r</code><p>
	 * <code>AVX512VL and AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPLZCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 44 /r</code><p>
	 * <code>AVX512CD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vplzcntq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPLZCNTQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPMACSDD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSDD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 9E /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsdd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSDD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSDD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSDD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 9E /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsdd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSDD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSDQH</code> instruction<hr>
	 * <p>
	 * <code>VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 9F /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsdqh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSDQH_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSDQH</code> instruction<hr>
	 * <p>
	 * <code>VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 9F /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsdqh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSDQH_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSDQL</code> instruction<hr>
	 * <p>
	 * <code>VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 97 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsdql(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSDQL_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSDQL</code> instruction<hr>
	 * <p>
	 * <code>VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 97 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsdql(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSDQL_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSSDD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 8E /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssdd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSDD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSSDD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 8E /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssdd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSDD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSSDQH</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 8F /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssdqh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSDQH_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSSDQH</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 8F /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssdqh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSDQH_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSSDQL</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 87 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssdql(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSDQL_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSSDQL</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 87 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssdql(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSDQL_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 86 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 86 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSSWW</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 85 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssww(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSWW_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSSWW</code> instruction<hr>
	 * <p>
	 * <code>VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 85 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacssww(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSSWW_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 96 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMACSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 96 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMACSWW</code> instruction<hr>
	 * <p>
	 * <code>VPMACSWW xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 95 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsww(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSWW_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMACSWW</code> instruction<hr>
	 * <p>
	 * <code>VPMACSWW xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 95 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmacsww(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMACSWW_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMADCSSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 A6 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadcsswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMADCSSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMADCSSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 A6 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadcsswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMADCSSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMADCSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 B6 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadcswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMADCSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPMADCSWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 B6 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadcswd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPMADCSWD_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPMADD52HUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B5 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52huq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52HUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADD52HUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B5 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52huq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52HUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADD52HUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 B5 /r</code><p>
	 * <code>AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52huq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52HUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADD52HUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B5 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52huq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52HUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMADD52HUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B5 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52huq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52HUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMADD52HUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 B5 /r</code><p>
	 * <code>AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52huq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52HUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMADD52LUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52LUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B4 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52luq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52LUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADD52LUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52LUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B4 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52luq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52LUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADD52LUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52LUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 B4 /r</code><p>
	 * <code>AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52luq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52LUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADD52LUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52LUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 B4 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52luq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52LUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMADD52LUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52LUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 B4 /r</code><p>
	 * <code>AVX512VL and AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52luq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52LUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMADD52LUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMADD52LUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 B4 /r</code><p>
	 * <code>AVX512_IFMA</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmadd52luq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADD52LUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPMADDUBSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddubsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDUBSW_XMM_XMM_XMMM128 : Code.EVEX_VPMADDUBSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPMADDUBSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddubsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDUBSW_YMM_YMM_YMMM256 : Code.EVEX_VPMADDUBSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPMADDUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddubsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADDUBSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPMADDUBSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddubsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDUBSW_XMM_XMM_XMMM128 : Code.EVEX_VPMADDUBSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPMADDUBSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddubsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDUBSW_YMM_YMM_YMMM256 : Code.EVEX_VPMADDUBSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMADDUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPMADDUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 04 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddubsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADDUBSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADDWD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F5 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddwd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDWD_XMM_XMM_XMMM128 : Code.EVEX_VPMADDWD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADDWD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F5 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddwd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDWD_YMM_YMM_YMMM256 : Code.EVEX_VPMADDWD_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F5 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddwd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADDWD_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADDWD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F5 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddwd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDWD_XMM_XMM_XMMM128 : Code.EVEX_VPMADDWD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADDWD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F5 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddwd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMADDWD_YMM_YMM_YMMM256 : Code.EVEX_VPMADDWD_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMADDWD</code> instruction<hr>
	 * <p>
	 * <code>VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F5 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaddwd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMADDWD_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMASKMOVD</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVD m128, xmm1, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W0 8E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovd(AsmMemoryOperand dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVD_M128_XMM_XMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VPMASKMOVD</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVD m256, ymm1, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W0 8E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovd(AsmMemoryOperand dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVD_M256_YMM_YMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VPMASKMOVD</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVD xmm1, xmm2, m128</code><p>
	 * <code>VEX.128.66.0F38.W0 8C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVD_XMM_XMM_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPMASKMOVD</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVD ymm1, ymm2, m256</code><p>
	 * <code>VEX.256.66.0F38.W0 8C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVD_YMM_YMM_M256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPMASKMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVQ m128, xmm1, xmm2</code><p>
	 * <code>VEX.128.66.0F38.W1 8E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovq(AsmMemoryOperand dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVQ_M128_XMM_XMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VPMASKMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVQ m256, ymm1, ymm2</code><p>
	 * <code>VEX.256.66.0F38.W1 8E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovq(AsmMemoryOperand dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVQ_M256_YMM_YMM, dst.toMemoryOperand(getBitness()), src1.get(), src2.get()));
	}

	/**
	 * <code>VPMASKMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVQ xmm1, xmm2, m128</code><p>
	 * <code>VEX.128.66.0F38.W1 8C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVQ_XMM_XMM_M128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPMASKMOVQ</code> instruction<hr>
	 * <p>
	 * <code>VPMASKMOVQ ymm1, ymm2, m256</code><p>
	 * <code>VEX.256.66.0F38.W1 8C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaskmovq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPMASKMOVQ_YMM_YMM_M256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPMAXSB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSB_XMM_XMM_XMMM128 : Code.EVEX_VPMAXSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSB_YMM_YMM_YMMM256 : Code.EVEX_VPMAXSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSB_XMM_XMM_XMMM128 : Code.EVEX_VPMAXSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXSB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSB_YMM_YMM_YMMM256 : Code.EVEX_VPMAXSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXSB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 3C /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSD_XMM_XMM_XMMM128 : Code.EVEX_VPMAXSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3D /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSD_YMM_YMM_YMMM256 : Code.EVEX_VPMAXSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 3D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMAXSD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMAXSD_XMM_XMM_XMMM128 : Code.EVEX_VPMAXSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3D /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMAXSD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMAXSD_YMM_YMM_YMMM256 : Code.EVEX_VPMAXSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXSD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 3D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 3D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 3D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 3D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXSW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EE /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG EE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSW_XMM_XMM_XMMM128 : Code.EVEX_VPMAXSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EE /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG EE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSW_YMM_YMM_YMMM256 : Code.EVEX_VPMAXSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG EE /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXSW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EE /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG EE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSW_XMM_XMM_XMMM128 : Code.EVEX_VPMAXSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXSW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EE /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG EE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXSW_YMM_YMM_YMMM256 : Code.EVEX_VPMAXSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXSW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG EE /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXUB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DE /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUB_XMM_XMM_XMMM128 : Code.EVEX_VPMAXUB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DE /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxub(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUB_YMM_YMM_YMMM256 : Code.EVEX_VPMAXUB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DE /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxub(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DE /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUB_XMM_XMM_XMMM128 : Code.EVEX_VPMAXUB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXUB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DE /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DE /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxub(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUB_YMM_YMM_YMMM256 : Code.EVEX_VPMAXUB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXUB</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DE /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxub(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXUD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUD_XMM_XMM_XMMM128 : Code.EVEX_VPMAXUD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3F /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxud(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUD_YMM_YMM_YMMM256 : Code.EVEX_VPMAXUD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 3F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxud(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMAXUD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMAXUD_XMM_XMM_XMMM128 : Code.EVEX_VPMAXUD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXUD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3F /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxud(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMAXUD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMAXUD_YMM_YMM_YMMM256 : Code.EVEX_VPMAXUD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXUD</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 3F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxud(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 3F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 3F /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 3F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMAXUW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUW_XMM_XMM_XMMM128 : Code.EVEX_VPMAXUW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUW_YMM_YMM_YMMM256 : Code.EVEX_VPMAXUW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMAXUW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUW_XMM_XMM_XMMM128 : Code.EVEX_VPMAXUW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXUW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMAXUW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMAXUW_YMM_YMM_YMMM256 : Code.EVEX_VPMAXUW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMAXUW</code> instruction<hr>
	 * <p>
	 * <code>VPMAXUW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 3E /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmaxuw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMAXUW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINSB</code> instruction<hr>
	 * <p>
	 * <code>VPMINSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSB_XMM_XMM_XMMM128 : Code.EVEX_VPMINSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSB</code> instruction<hr>
	 * <p>
	 * <code>VPMINSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSB_YMM_YMM_YMMM256 : Code.EVEX_VPMINSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSB</code> instruction<hr>
	 * <p>
	 * <code>VPMINSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSB</code> instruction<hr>
	 * <p>
	 * <code>VPMINSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSB_XMM_XMM_XMMM128 : Code.EVEX_VPMINSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINSB</code> instruction<hr>
	 * <p>
	 * <code>VPMINSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSB_YMM_YMM_YMMM256 : Code.EVEX_VPMINSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINSB</code> instruction<hr>
	 * <p>
	 * <code>VPMINSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 38 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINSD</code> instruction<hr>
	 * <p>
	 * <code>VPMINSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 39 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSD_XMM_XMM_XMMM128 : Code.EVEX_VPMINSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSD</code> instruction<hr>
	 * <p>
	 * <code>VPMINSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 39 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSD_YMM_YMM_YMMM256 : Code.EVEX_VPMINSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSD</code> instruction<hr>
	 * <p>
	 * <code>VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 39 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSD</code> instruction<hr>
	 * <p>
	 * <code>VPMINSD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 39 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMINSD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMINSD_XMM_XMM_XMMM128 : Code.EVEX_VPMINSD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINSD</code> instruction<hr>
	 * <p>
	 * <code>VPMINSD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 39 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMINSD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMINSD_YMM_YMM_YMMM256 : Code.EVEX_VPMINSD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINSD</code> instruction<hr>
	 * <p>
	 * <code>VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 39 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 39 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 39 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINSQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 39 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINSW</code> instruction<hr>
	 * <p>
	 * <code>VPMINSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EA /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG EA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSW_XMM_XMM_XMMM128 : Code.EVEX_VPMINSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSW</code> instruction<hr>
	 * <p>
	 * <code>VPMINSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EA /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG EA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSW_YMM_YMM_YMMM256 : Code.EVEX_VPMINSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSW</code> instruction<hr>
	 * <p>
	 * <code>VPMINSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG EA /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINSW</code> instruction<hr>
	 * <p>
	 * <code>VPMINSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EA /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG EA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSW_XMM_XMM_XMMM128 : Code.EVEX_VPMINSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINSW</code> instruction<hr>
	 * <p>
	 * <code>VPMINSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EA /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG EA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINSW_YMM_YMM_YMMM256 : Code.EVEX_VPMINSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINSW</code> instruction<hr>
	 * <p>
	 * <code>VPMINSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG EA /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINUB</code> instruction<hr>
	 * <p>
	 * <code>VPMINUB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DA /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUB_XMM_XMM_XMMM128 : Code.EVEX_VPMINUB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUB</code> instruction<hr>
	 * <p>
	 * <code>VPMINUB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DA /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminub(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUB_YMM_YMM_YMMM256 : Code.EVEX_VPMINUB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUB</code> instruction<hr>
	 * <p>
	 * <code>VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DA /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminub(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUB</code> instruction<hr>
	 * <p>
	 * <code>VPMINUB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG DA /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG DA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminub(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUB_XMM_XMM_XMMM128 : Code.EVEX_VPMINUB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINUB</code> instruction<hr>
	 * <p>
	 * <code>VPMINUB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG DA /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG DA /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminub(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUB_YMM_YMM_YMMM256 : Code.EVEX_VPMINUB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINUB</code> instruction<hr>
	 * <p>
	 * <code>VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG DA /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminub(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINUD</code> instruction<hr>
	 * <p>
	 * <code>VPMINUD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUD_XMM_XMM_XMMM128 : Code.EVEX_VPMINUD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUD</code> instruction<hr>
	 * <p>
	 * <code>VPMINUD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminud(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUD_YMM_YMM_YMMM256 : Code.EVEX_VPMINUD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUD</code> instruction<hr>
	 * <p>
	 * <code>VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 3B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminud(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUD</code> instruction<hr>
	 * <p>
	 * <code>VPMINUD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminud(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMINUD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMINUD_XMM_XMM_XMMM128 : Code.EVEX_VPMINUD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINUD</code> instruction<hr>
	 * <p>
	 * <code>VPMINUD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminud(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMINUD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMINUD_YMM_YMM_YMMM256 : Code.EVEX_VPMINUD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINUD</code> instruction<hr>
	 * <p>
	 * <code>VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 3B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminud(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 3B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 3B /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINUQ</code> instruction<hr>
	 * <p>
	 * <code>VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 3B /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMINUW</code> instruction<hr>
	 * <p>
	 * <code>VPMINUW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUW_XMM_XMM_XMMM128 : Code.EVEX_VPMINUW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUW</code> instruction<hr>
	 * <p>
	 * <code>VPMINUW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUW_YMM_YMM_YMMM256 : Code.EVEX_VPMINUW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUW</code> instruction<hr>
	 * <p>
	 * <code>VPMINUW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMINUW</code> instruction<hr>
	 * <p>
	 * <code>VPMINUW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUW_XMM_XMM_XMMM128 : Code.EVEX_VPMINUW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINUW</code> instruction<hr>
	 * <p>
	 * <code>VPMINUW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMINUW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMINUW_YMM_YMM_YMMM256 : Code.EVEX_VPMINUW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMINUW</code> instruction<hr>
	 * <p>
	 * <code>VPMINUW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 3A /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpminuw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMINUW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVB2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVB2M k1, xmm1</code><p>
	 * <code>EVEX.128.F3.0F38.W0 29 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovb2m(AsmRegisterK dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVB2M_KR_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVB2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVB2M k1, ymm1</code><p>
	 * <code>EVEX.256.F3.0F38.W0 29 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovb2m(AsmRegisterK dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVB2M_KR_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVB2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVB2M k1, zmm1</code><p>
	 * <code>EVEX.512.F3.0F38.W0 29 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovb2m(AsmRegisterK dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVB2M_KR_ZMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVD2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVD2M k1, xmm1</code><p>
	 * <code>EVEX.128.F3.0F38.W0 39 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovd2m(AsmRegisterK dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVD2M_KR_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVD2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVD2M k1, ymm1</code><p>
	 * <code>EVEX.256.F3.0F38.W0 39 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovd2m(AsmRegisterK dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVD2M_KR_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVD2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVD2M k1, zmm1</code><p>
	 * <code>EVEX.512.F3.0F38.W0 39 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovd2m(AsmRegisterK dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVD2M_KR_ZMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDB xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDB_XMMM32_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDB xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDB_XMMM32_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDB xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDB_XMMM64_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDB xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDB_XMMM64_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDB xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 31 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdb(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDB_XMMM128_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDB xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 31 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDB_XMMM128_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDW xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDW_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDW xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDW_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDW xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdw(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDW_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDW xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdw(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDW_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDW ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 33 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdw(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDW_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVDW ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 33 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovdw(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVDW_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVM2B</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2B xmm1, k1</code><p>
	 * <code>EVEX.128.F3.0F38.W0 28 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2b(AsmRegisterXMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2B_XMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2B</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2B ymm1, k1</code><p>
	 * <code>EVEX.256.F3.0F38.W0 28 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2b(AsmRegisterYMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2B_YMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2B</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2B zmm1, k1</code><p>
	 * <code>EVEX.512.F3.0F38.W0 28 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2b(AsmRegisterZMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2B_ZMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2D</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2D xmm1, k1</code><p>
	 * <code>EVEX.128.F3.0F38.W0 38 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2d(AsmRegisterXMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2D_XMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2D</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2D ymm1, k1</code><p>
	 * <code>EVEX.256.F3.0F38.W0 38 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2d(AsmRegisterYMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2D_YMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2D</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2D zmm1, k1</code><p>
	 * <code>EVEX.512.F3.0F38.W0 38 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2d(AsmRegisterZMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2D_ZMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2Q</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2Q xmm1, k1</code><p>
	 * <code>EVEX.128.F3.0F38.W1 38 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2q(AsmRegisterXMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2Q_XMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2Q</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2Q ymm1, k1</code><p>
	 * <code>EVEX.256.F3.0F38.W1 38 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2q(AsmRegisterYMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2Q_YMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2Q</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2Q zmm1, k1</code><p>
	 * <code>EVEX.512.F3.0F38.W1 38 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2q(AsmRegisterZMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2Q_ZMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2W</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2W xmm1, k1</code><p>
	 * <code>EVEX.128.F3.0F38.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2w(AsmRegisterXMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2W_XMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2W</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2W ymm1, k1</code><p>
	 * <code>EVEX.256.F3.0F38.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2w(AsmRegisterYMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2W_YMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVM2W</code> instruction<hr>
	 * <p>
	 * <code>VPMOVM2W zmm1, k1</code><p>
	 * <code>EVEX.512.F3.0F38.W1 28 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovm2w(AsmRegisterZMM dst, AsmRegisterK src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVM2W_ZMM_KR, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVMSKB r32, xmm1</code><p>
	 * <code>VEX.128.66.0F.W0 D7 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovmskb(AsmRegister32 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VPMOVMSKB_R32_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVMSKB r64, xmm1</code><p>
	 * <code>VEX.128.66.0F.W1 D7 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>64-bit</code>
	 */
	public void vpmovmskb(AsmRegister64 dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VPMOVMSKB_R64_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVMSKB r32, ymm1</code><p>
	 * <code>VEX.256.66.0F.W0 D7 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovmskb(AsmRegister32 dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VPMOVMSKB_R32_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVMSKB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVMSKB r64, ymm1</code><p>
	 * <code>VEX.256.66.0F.W1 D7 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>64-bit</code>
	 */
	public void vpmovmskb(AsmRegister64 dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VPMOVMSKB_R64_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVQ2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQ2M k1, xmm1</code><p>
	 * <code>EVEX.128.F3.0F38.W1 39 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovq2m(AsmRegisterK dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQ2M_KR_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVQ2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQ2M k1, ymm1</code><p>
	 * <code>EVEX.256.F3.0F38.W1 39 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovq2m(AsmRegisterK dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQ2M_KR_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVQ2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQ2M k1, zmm1</code><p>
	 * <code>EVEX.512.F3.0F38.W1 39 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovq2m(AsmRegisterK dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQ2M_KR_ZMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQB xmm1/m16 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQB_XMMM16_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQB xmm1/m16 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQB_XMMM16_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQB xmm1/m32 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQB_XMMM32_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQB xmm1/m32 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQB_XMMM32_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQB xmm1/m64 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 32 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqb(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQB_XMMM64_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQB xmm1/m64 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 32 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQB_XMMM64_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQD xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQD_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQD xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQD_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQD xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqd(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQD_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQD xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQD_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQD ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 35 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqd(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQD_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQD ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 35 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQD_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQW xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQW_XMMM32_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQW xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQW_XMMM32_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQW xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqw(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQW_XMMM64_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQW xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqw(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQW_XMMM64_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQW xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 34 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqw(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQW_XMMM128_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVQW xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 34 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovqw(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVQW_XMMM128_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDB xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDB_XMMM32_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDB xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDB_XMMM32_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDB xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDB_XMMM64_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDB xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDB_XMMM64_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDB xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 21 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdb(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDB_XMMM128_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDB xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 21 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDB_XMMM128_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDW xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDW_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDW xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDW_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDW xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdw(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDW_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDW xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdw(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDW_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDW ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 23 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdw(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDW_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSDW ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 23 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsdw(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSDW_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQB xmm1/m16 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQB_XMMM16_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQB xmm1/m16 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQB_XMMM16_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQB xmm1/m32 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQB_XMMM32_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQB xmm1/m32 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQB_XMMM32_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQB xmm1/m64 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 22 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqb(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQB_XMMM64_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQB xmm1/m64 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 22 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQB_XMMM64_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQD xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQD_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQD xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQD_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQD xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqd(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQD_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQD xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQD_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQD ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 25 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqd(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQD_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQD ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 25 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQD_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQW xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQW_XMMM32_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQW xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQW_XMMM32_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQW xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqw(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQW_XMMM64_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQW xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqw(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQW_XMMM64_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQW xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 24 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqw(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQW_XMMM128_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSQW xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 24 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsqw(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSQW_XMMM128_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSWB xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovswb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSWB_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSWB xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovswb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSWB_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSWB xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovswb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSWB_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSWB xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovswb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSWB_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSWB ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 20 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovswb(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSWB_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSWB ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 20 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovswb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSWB_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBD xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBD xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBD_XMM_XMMM32 : Code.EVEX_VPMOVSXBD_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBD ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBD ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBD_YMM_XMMM64 : Code.EVEX_VPMOVSXBD_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBD zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbd(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXBD_ZMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBD xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBD xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBD_XMM_XMMM32 : Code.EVEX_VPMOVSXBD_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBD ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBD ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBD_YMM_XMMM64 : Code.EVEX_VPMOVSXBD_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBD zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 21 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXBD_ZMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBQ xmm1, xmm2/m16</code><p>
	 * <code>VEX.128.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.128.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBQ_XMM_XMMM16 : Code.EVEX_VPMOVSXBQ_XMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBQ ymm1, xmm2/m32</code><p>
	 * <code>VEX.256.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBQ_YMM_XMMM32 : Code.EVEX_VPMOVSXBQ_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXBQ_ZMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBQ xmm1, xmm2/m16</code><p>
	 * <code>VEX.128.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.128.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBQ_XMM_XMMM16 : Code.EVEX_VPMOVSXBQ_XMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBQ ymm1, xmm2/m32</code><p>
	 * <code>VEX.256.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBQ_YMM_XMMM32 : Code.EVEX_VPMOVSXBQ_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.WIG 22 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXBQ_ZMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBW xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBW xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBW_XMM_XMMM64 : Code.EVEX_VPMOVSXBW_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBW ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBW ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbw(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBW_YMM_XMMM128 : Code.EVEX_VPMOVSXBW_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBW zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbw(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXBW_ZMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBW xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBW xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBW_XMM_XMMM64 : Code.EVEX_VPMOVSXBW_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBW ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXBW ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXBW_YMM_XMMM128 : Code.EVEX_VPMOVSXBW_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXBW zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 20 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxbw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXBW_ZMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXDQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 25 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXDQ_XMM_XMMM64 : Code.EVEX_VPMOVSXDQ_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXDQ ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 25 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxdq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXDQ_YMM_XMMM128 : Code.EVEX_VPMOVSXDQ_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.W0 25 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxdq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXDQ_ZMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXDQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 25 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXDQ_XMM_XMMM64 : Code.EVEX_VPMOVSXDQ_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXDQ ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 25 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 25 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxdq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXDQ_YMM_XMMM128 : Code.EVEX_VPMOVSXDQ_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.W0 25 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxdq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXDQ_ZMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWD xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWD_XMM_XMMM64 : Code.EVEX_VPMOVSXWD_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWD ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWD_YMM_XMMM128 : Code.EVEX_VPMOVSXWD_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWD zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwd(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXWD_ZMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWD xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWD_XMM_XMMM64 : Code.EVEX_VPMOVSXWD_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWD ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWD_YMM_XMMM128 : Code.EVEX_VPMOVSXWD_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWD zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 23 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXWD_ZMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWQ xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWQ_XMM_XMMM32 : Code.EVEX_VPMOVSXWQ_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWQ ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWQ_YMM_XMMM64 : Code.EVEX_VPMOVSXWQ_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXWQ_ZMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWQ xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWQ_XMM_XMMM32 : Code.EVEX_VPMOVSXWQ_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWQ ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVSXWQ_YMM_XMMM64 : Code.EVEX_VPMOVSXWQ_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVSXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 24 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovsxwq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVSXWQ_ZMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVUSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDB xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM32_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDB xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM32_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDB xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM64_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDB xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 11 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM64_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDB xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 11 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdb(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM128_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDB xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 11 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM128_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDW xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDW xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDW xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdw(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDW xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 13 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdw(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDW ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 13 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdw(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDW_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSDW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSDW ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 13 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusdw(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSDW_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQB xmm1/m16 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM16_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQB xmm1/m16 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM16_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQB xmm1/m32 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM32_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQB xmm1/m32 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 12 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM32_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQB xmm1/m64 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqb(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM64_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQB xmm1/m64 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 12 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM64_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQD xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQD xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQD xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqd(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQD xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQD ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqd(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQD_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQD ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQD_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQW xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM32_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQW xmm1/m32 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqw(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM32_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQW xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqw(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM64_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQW xmm1/m64 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqw(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM64_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQW xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqw(AsmRegisterXMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM128_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSQW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSQW xmm1/m128 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovusqw(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM128_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSWB xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovuswb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSWB xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovuswb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSWB xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovuswb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSWB xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovuswb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSWB ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 10 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovuswb(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSWB_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVUSWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVUSWB ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 10 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovuswb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVUSWB_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVW2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVW2M k1, xmm1</code><p>
	 * <code>EVEX.128.F3.0F38.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovw2m(AsmRegisterK dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVW2M_KR_XMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVW2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVW2M k1, ymm1</code><p>
	 * <code>EVEX.256.F3.0F38.W1 29 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovw2m(AsmRegisterK dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVW2M_KR_YMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVW2M</code> instruction<hr>
	 * <p>
	 * <code>VPMOVW2M k1, zmm1</code><p>
	 * <code>EVEX.512.F3.0F38.W1 29 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovw2m(AsmRegisterK dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVW2M_KR_ZMM, dst.get(), src.get()));
	}

	/**
	 * <code>VPMOVWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVWB xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovwb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVWB_XMMM64_K1Z_XMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVWB xmm1/m64 {k1}{z}, xmm2</code><p>
	 * <code>EVEX.128.F3.0F38.W0 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovwb(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVWB_XMMM64_K1Z_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVWB xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovwb(AsmRegisterXMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVWB_XMMM128_K1Z_YMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVWB xmm1/m128 {k1}{z}, ymm2</code><p>
	 * <code>EVEX.256.F3.0F38.W0 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovwb(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVWB_XMMM128_K1Z_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVWB ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 30 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovwb(AsmRegisterYMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVWB_YMMM256_K1Z_ZMM, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVWB</code> instruction<hr>
	 * <p>
	 * <code>VPMOVWB ymm1/m256 {k1}{z}, zmm2</code><p>
	 * <code>EVEX.512.F3.0F38.W0 30 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovwb(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVWB_YMMM256_K1Z_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBD xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBD xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBD_XMM_XMMM32 : Code.EVEX_VPMOVZXBD_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBD ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBD ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBD_YMM_XMMM64 : Code.EVEX_VPMOVZXBD_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBD zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbd(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXBD_ZMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBD xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBD xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBD_XMM_XMMM32 : Code.EVEX_VPMOVZXBD_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBD ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBD ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBD_YMM_XMMM64 : Code.EVEX_VPMOVZXBD_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBD zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 31 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXBD_ZMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBQ xmm1, xmm2/m16</code><p>
	 * <code>VEX.128.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.128.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBQ_XMM_XMMM16 : Code.EVEX_VPMOVZXBQ_XMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBQ ymm1, xmm2/m32</code><p>
	 * <code>VEX.256.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBQ_YMM_XMMM32 : Code.EVEX_VPMOVZXBQ_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXBQ_ZMM_K1Z_XMMM64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBQ xmm1, xmm2/m16</code><p>
	 * <code>VEX.128.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16</code><p>
	 * <code>EVEX.128.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBQ_XMM_XMMM16 : Code.EVEX_VPMOVZXBQ_XMM_K1Z_XMMM16;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBQ ymm1, xmm2/m32</code><p>
	 * <code>VEX.256.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.256.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBQ_YMM_XMMM32 : Code.EVEX_VPMOVZXBQ_YMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.512.66.0F38.WIG 32 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXBQ_ZMM_K1Z_XMMM64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBW xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBW xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBW_XMM_XMMM64 : Code.EVEX_VPMOVZXBW_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBW ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBW ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbw(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBW_YMM_XMMM128 : Code.EVEX_VPMOVZXBW_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBW zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbw(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXBW_ZMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBW xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBW xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBW_XMM_XMMM64 : Code.EVEX_VPMOVZXBW_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBW ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXBW ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXBW_YMM_XMMM128 : Code.EVEX_VPMOVZXBW_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXBW</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXBW zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 30 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxbw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXBW_ZMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXDQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 35 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxdq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXDQ_XMM_XMMM64 : Code.EVEX_VPMOVZXDQ_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXDQ ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 35 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxdq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXDQ_YMM_XMMM128 : Code.EVEX_VPMOVZXDQ_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.W0 35 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxdq(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXDQ_ZMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXDQ xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 35 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxdq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXDQ_XMM_XMMM64 : Code.EVEX_VPMOVZXDQ_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXDQ ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 35 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.W0 35 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxdq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXDQ_YMM_XMMM128 : Code.EVEX_VPMOVZXDQ_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.W0 35 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxdq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXDQ_ZMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWD xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWD_XMM_XMMM64 : Code.EVEX_VPMOVZXWD_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWD ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwd(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWD_YMM_XMMM128 : Code.EVEX_VPMOVZXWD_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWD zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwd(AsmRegisterZMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXWD_ZMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWD xmm1, xmm2/m64</code><p>
	 * <code>VEX.128.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWD xmm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.128.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWD_XMM_XMMM64 : Code.EVEX_VPMOVZXWD_XMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWD ymm1, xmm2/m128</code><p>
	 * <code>VEX.256.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWD ymm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.256.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWD_YMM_XMMM128 : Code.EVEX_VPMOVZXWD_YMM_K1Z_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXWD</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWD zmm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.512.66.0F38.WIG 33 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXWD_ZMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWQ xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWQ_XMM_XMMM32 : Code.EVEX_VPMOVZXWQ_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWQ ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwq(AsmRegisterYMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWQ_YMM_XMMM64 : Code.EVEX_VPMOVZXWQ_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwq(AsmRegisterZMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXWQ_ZMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWQ xmm1, xmm2/m32</code><p>
	 * <code>VEX.128.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32</code><p>
	 * <code>EVEX.128.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWQ_XMM_XMMM32 : Code.EVEX_VPMOVZXWQ_XMM_K1Z_XMMM32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWQ ymm1, xmm2/m64</code><p>
	 * <code>VEX.256.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64</code><p>
	 * <code>EVEX.256.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMOVZXWQ_YMM_XMMM64 : Code.EVEX_VPMOVZXWQ_YMM_K1Z_XMMM64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMOVZXWQ</code> instruction<hr>
	 * <p>
	 * <code>VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.512.66.0F38.WIG 34 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmovzxwq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPMOVZXWQ_ZMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuldq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULDQ_XMM_XMM_XMMM128 : Code.EVEX_VPMULDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 28 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuldq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULDQ_YMM_YMM_YMMM256 : Code.EVEX_VPMULDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 28 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuldq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 28 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuldq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMULDQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMULDQ_XMM_XMM_XMMM128 : Code.EVEX_VPMULDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 28 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 28 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuldq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMULDQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMULDQ_YMM_YMM_YMMM256 : Code.EVEX_VPMULDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 28 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuldq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHRSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHRSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhrsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHRSW_XMM_XMM_XMMM128 : Code.EVEX_VPMULHRSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHRSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHRSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhrsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHRSW_YMM_YMM_YMMM256 : Code.EVEX_VPMULHRSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHRSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhrsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULHRSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHRSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHRSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhrsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHRSW_XMM_XMM_XMMM128 : Code.EVEX_VPMULHRSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHRSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHRSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhrsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHRSW_YMM_YMM_YMMM256 : Code.EVEX_VPMULHRSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHRSW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHRSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 0B /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhrsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULHRSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHUW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHUW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E4 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E4 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHUW_XMM_XMM_XMMM128 : Code.EVEX_VPMULHUW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHUW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHUW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E4 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E4 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhuw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHUW_YMM_YMM_YMMM256 : Code.EVEX_VPMULHUW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHUW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E4 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhuw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULHUW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHUW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHUW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E4 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E4 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhuw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHUW_XMM_XMM_XMMM128 : Code.EVEX_VPMULHUW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHUW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHUW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E4 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E4 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhuw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHUW_YMM_YMM_YMMM256 : Code.EVEX_VPMULHUW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHUW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E4 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhuw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULHUW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E5 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHW_XMM_XMM_XMMM128 : Code.EVEX_VPMULHW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E5 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHW_YMM_YMM_YMMM256 : Code.EVEX_VPMULHW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E5 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULHW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULHW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E5 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHW_XMM_XMM_XMMM128 : Code.EVEX_VPMULHW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E5 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULHW_YMM_YMM_YMMM256 : Code.EVEX_VPMULHW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULHW</code> instruction<hr>
	 * <p>
	 * <code>VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E5 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulhw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULHW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULLD</code> instruction<hr>
	 * <p>
	 * <code>VPMULLD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 40 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 40 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULLD_XMM_XMM_XMMM128 : Code.EVEX_VPMULLD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLD</code> instruction<hr>
	 * <p>
	 * <code>VPMULLD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 40 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 40 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulld(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULLD_YMM_YMM_YMMM256 : Code.EVEX_VPMULLD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLD</code> instruction<hr>
	 * <p>
	 * <code>VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 40 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulld(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLD</code> instruction<hr>
	 * <p>
	 * <code>VPMULLD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 40 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 40 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMULLD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMULLD_XMM_XMM_XMMM128 : Code.EVEX_VPMULLD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULLD</code> instruction<hr>
	 * <p>
	 * <code>VPMULLD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 40 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 40 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulld(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMULLD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMULLD_YMM_YMM_YMMM256 : Code.EVEX_VPMULLD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULLD</code> instruction<hr>
	 * <p>
	 * <code>VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 40 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmulld(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULLQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 40 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 40 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 40 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 40 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULLQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 40 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULLQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 40 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULLW</code> instruction<hr>
	 * <p>
	 * <code>VPMULLW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D5 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULLW_XMM_XMM_XMMM128 : Code.EVEX_VPMULLW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLW</code> instruction<hr>
	 * <p>
	 * <code>VPMULLW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D5 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG D5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULLW_YMM_YMM_YMMM256 : Code.EVEX_VPMULLW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLW</code> instruction<hr>
	 * <p>
	 * <code>VPMULLW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG D5 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULLW</code> instruction<hr>
	 * <p>
	 * <code>VPMULLW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D5 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULLW_XMM_XMM_XMMM128 : Code.EVEX_VPMULLW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULLW</code> instruction<hr>
	 * <p>
	 * <code>VPMULLW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D5 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULLW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG D5 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULLW_YMM_YMM_YMMM256 : Code.EVEX_VPMULLW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULLW</code> instruction<hr>
	 * <p>
	 * <code>VPMULLW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG D5 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmullw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULLW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPMULTISHIFTQB</code> instruction<hr>
	 * <p>
	 * <code>VPMULTISHIFTQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 83 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmultishiftqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULTISHIFTQB_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULTISHIFTQB</code> instruction<hr>
	 * <p>
	 * <code>VPMULTISHIFTQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 83 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmultishiftqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULTISHIFTQB_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULTISHIFTQB</code> instruction<hr>
	 * <p>
	 * <code>VPMULTISHIFTQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 83 /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmultishiftqb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULTISHIFTQB_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULTISHIFTQB</code> instruction<hr>
	 * <p>
	 * <code>VPMULTISHIFTQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 83 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmultishiftqb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULTISHIFTQB_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULTISHIFTQB</code> instruction<hr>
	 * <p>
	 * <code>VPMULTISHIFTQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 83 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmultishiftqb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULTISHIFTQB_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULTISHIFTQB</code> instruction<hr>
	 * <p>
	 * <code>VPMULTISHIFTQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 83 /r</code><p>
	 * <code>AVX512_VBMI</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmultishiftqb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULTISHIFTQB_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULUDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F4 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 F4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuludq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULUDQ_XMM_XMM_XMMM128 : Code.EVEX_VPMULUDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULUDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F4 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 F4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuludq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPMULUDQ_YMM_YMM_YMMM256 : Code.EVEX_VPMULUDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 F4 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuludq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULUDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULUDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F4 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 F4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuludq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMULUDQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMULUDQ_XMM_XMM_XMMM128 : Code.EVEX_VPMULUDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULUDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F4 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 F4 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuludq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPMULUDQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPMULUDQ_YMM_YMM_YMMM256 : Code.EVEX_VPMULUDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPMULUDQ</code> instruction<hr>
	 * <p>
	 * <code>VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 F4 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpmuludq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPMULUDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPOPCNTB</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTB xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntb(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTB_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTB</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTB ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntb(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTB_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTB</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTB zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 54 /r</code><p>
	 * <code>AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntb(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTB_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTB</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTB xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntb(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTB_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPOPCNTB</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTB ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntb(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTB_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPOPCNTB</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTB zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 54 /r</code><p>
	 * <code>AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntb(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTB_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPOPCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTD_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTD_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 55 /r</code><p>
	 * <code>AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTD_ZMM_K1Z_ZMMM512B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTD_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPOPCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTD_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPOPCNTD</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 55 /r</code><p>
	 * <code>AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTD_ZMM_K1Z_ZMMM512B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPOPCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntq(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTQ_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntq(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTQ_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 55 /r</code><p>
	 * <code>AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntq(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntq(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTQ_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPOPCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 55 /r</code><p>
	 * <code>AVX512VL and AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntq(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTQ_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPOPCNTQ</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 55 /r</code><p>
	 * <code>AVX512_VPOPCNTDQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntq(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTQ_ZMM_K1Z_ZMMM512B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VPOPCNTW</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTW xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntw(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTW_XMM_K1Z_XMMM128, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTW</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTW ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntw(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTW_YMM_K1Z_YMMM256, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTW</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTW zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 54 /r</code><p>
	 * <code>AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntw(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTW_ZMM_K1Z_ZMMM512, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VPOPCNTW</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTW xmm1 {k1}{z}, xmm2/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntw(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTW_XMM_K1Z_XMMM128, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPOPCNTW</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTW ymm1 {k1}{z}, ymm2/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 54 /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntw(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTW_YMM_K1Z_YMMM256, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPOPCNTW</code> instruction<hr>
	 * <p>
	 * <code>VPOPCNTW zmm1 {k1}{z}, zmm2/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 54 /r</code><p>
	 * <code>AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpopcntw(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VPOPCNTW_ZMM_K1Z_ZMMM512, dst.get(), src.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPOR</code> instruction<hr>
	 * <p>
	 * <code>VPOR xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EB /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpor(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPOR_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPOR</code> instruction<hr>
	 * <p>
	 * <code>VPOR ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EB /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpor(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPOR_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPOR</code> instruction<hr>
	 * <p>
	 * <code>VPOR xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EB /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpor(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPOR_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPOR</code> instruction<hr>
	 * <p>
	 * <code>VPOR ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EB /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpor(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPOR_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPORD</code> instruction<hr>
	 * <p>
	 * <code>VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpord(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPORD</code> instruction<hr>
	 * <p>
	 * <code>VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpord(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPORD</code> instruction<hr>
	 * <p>
	 * <code>VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 EB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpord(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPORD</code> instruction<hr>
	 * <p>
	 * <code>VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpord(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPORD</code> instruction<hr>
	 * <p>
	 * <code>VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpord(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPORD</code> instruction<hr>
	 * <p>
	 * <code>VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 EB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpord(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPORQ</code> instruction<hr>
	 * <p>
	 * <code>VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vporq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPORQ</code> instruction<hr>
	 * <p>
	 * <code>VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vporq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPORQ</code> instruction<hr>
	 * <p>
	 * <code>VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 EB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vporq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPORQ</code> instruction<hr>
	 * <p>
	 * <code>VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vporq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPORQ</code> instruction<hr>
	 * <p>
	 * <code>VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 EB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vporq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPORQ</code> instruction<hr>
	 * <p>
	 * <code>VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 EB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vporq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPORQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPPERM</code> instruction<hr>
	 * <p>
	 * <code>VPPERM xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 A3 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpperm(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPPERM_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get(), src3.get()));
	}

	/**
	 * <code>VPPERM</code> instruction<hr>
	 * <p>
	 * <code>VPPERM xmm1, xmm2, xmm3/m128, xmm4</code><p>
	 * <code>XOP.128.X8.W0 A3 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpperm(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, AsmRegisterXMM src3) {
		addInstruction(Instruction.create(Code.XOP_VPPERM_XMM_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), src3.get()));
	}

	/**
	 * <code>VPPERM</code> instruction<hr>
	 * <p>
	 * <code>VPPERM xmm1, xmm2, xmm3, xmm4/m128</code><p>
	 * <code>XOP.128.X8.W1 A3 /r /is4</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpperm(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, AsmMemoryOperand src3) {
		addInstruction(Instruction.create(Code.XOP_VPPERM_XMM_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get(), src3.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPROLD</code> instruction<hr>
	 * <p>
	 * <code>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprold(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLD_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPROLD</code> instruction<hr>
	 * <p>
	 * <code>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprold(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLD_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPROLD</code> instruction<hr>
	 * <p>
	 * <code>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /1 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprold(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPROLD</code> instruction<hr>
	 * <p>
	 * <code>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprold(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLD_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPROLD</code> instruction<hr>
	 * <p>
	 * <code>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprold(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLD_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPROLD</code> instruction<hr>
	 * <p>
	 * <code>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /1 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprold(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPROLQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPROLQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPROLQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 72 /1 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPROLQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPROLQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 72 /1 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPROLQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 72 /1 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPROLQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPROLVD</code> instruction<hr>
	 * <p>
	 * <code>VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPROLVD</code> instruction<hr>
	 * <p>
	 * <code>VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPROLVD</code> instruction<hr>
	 * <p>
	 * <code>VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPROLVD</code> instruction<hr>
	 * <p>
	 * <code>VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPROLVD</code> instruction<hr>
	 * <p>
	 * <code>VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPROLVD</code> instruction<hr>
	 * <p>
	 * <code>VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPROLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPROLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPROLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPROLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPROLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPROLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprolvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPROLVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPRORD</code> instruction<hr>
	 * <p>
	 * <code>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprord(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORD_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPRORD</code> instruction<hr>
	 * <p>
	 * <code>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprord(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORD_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPRORD</code> instruction<hr>
	 * <p>
	 * <code>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /0 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprord(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPRORD</code> instruction<hr>
	 * <p>
	 * <code>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprord(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORD_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPRORD</code> instruction<hr>
	 * <p>
	 * <code>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprord(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORD_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPRORD</code> instruction<hr>
	 * <p>
	 * <code>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /0 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprord(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPRORQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPRORQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPRORQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 72 /0 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPRORQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPRORQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 72 /0 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPRORQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 72 /0 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPRORQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPRORVD</code> instruction<hr>
	 * <p>
	 * <code>VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPRORVD</code> instruction<hr>
	 * <p>
	 * <code>VPRORVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPRORVD</code> instruction<hr>
	 * <p>
	 * <code>VPRORVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPRORVD</code> instruction<hr>
	 * <p>
	 * <code>VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPRORVD</code> instruction<hr>
	 * <p>
	 * <code>VPRORVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPRORVD</code> instruction<hr>
	 * <p>
	 * <code>VPRORVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPRORVQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPRORVQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPRORVQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPRORVQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPRORVQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPRORVQ</code> instruction<hr>
	 * <p>
	 * <code>VPRORVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprorvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPRORVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPROTB</code> instruction<hr>
	 * <p>
	 * <code>VPROTB xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 90 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPROTB</code> instruction<hr>
	 * <p>
	 * <code>VPROTB xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 90 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotb(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPROTB</code> instruction<hr>
	 * <p>
	 * <code>VPROTB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 90 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPROTB</code> instruction<hr>
	 * <p>
	 * <code>VPROTB xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C0 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotb(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPROTB</code> instruction<hr>
	 * <p>
	 * <code>VPROTB xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C0 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotb(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPROTD</code> instruction<hr>
	 * <p>
	 * <code>VPROTD xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 92 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPROTD</code> instruction<hr>
	 * <p>
	 * <code>VPROTD xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 92 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotd(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPROTD</code> instruction<hr>
	 * <p>
	 * <code>VPROTD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 92 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPROTD</code> instruction<hr>
	 * <p>
	 * <code>VPROTD xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C2 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPROTD</code> instruction<hr>
	 * <p>
	 * <code>VPROTD xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C2 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPROTQ</code> instruction<hr>
	 * <p>
	 * <code>VPROTQ xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 93 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPROTQ</code> instruction<hr>
	 * <p>
	 * <code>VPROTQ xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 93 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotq(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPROTQ</code> instruction<hr>
	 * <p>
	 * <code>VPROTQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 93 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTQ_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPROTQ</code> instruction<hr>
	 * <p>
	 * <code>VPROTQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C3 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPROTQ</code> instruction<hr>
	 * <p>
	 * <code>VPROTQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C3 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPROTW</code> instruction<hr>
	 * <p>
	 * <code>VPROTW xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 91 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPROTW</code> instruction<hr>
	 * <p>
	 * <code>VPROTW xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 91 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotw(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPROTW</code> instruction<hr>
	 * <p>
	 * <code>VPROTW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 91 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPROTW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPROTW</code> instruction<hr>
	 * <p>
	 * <code>VPROTW xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C1 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPROTW</code> instruction<hr>
	 * <p>
	 * <code>VPROTW xmm1, xmm2/m128, imm8</code><p>
	 * <code>XOP.128.X8.W0 C1 /r ib</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vprotw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VPSADBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSADBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F6 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsadbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSADBW_XMM_XMM_XMMM128 : Code.EVEX_VPSADBW_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VPSADBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F6 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSADBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F6 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsadbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSADBW_YMM_YMM_YMMM256 : Code.EVEX_VPSADBW_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VPSADBW zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F6 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsadbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSADBW_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VPSADBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F6 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSADBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F6 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsadbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSADBW_XMM_XMM_XMMM128 : Code.EVEX_VPSADBW_XMM_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VPSADBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F6 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSADBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F6 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsadbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSADBW_YMM_YMM_YMMM256 : Code.EVEX_VPSADBW_YMM_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSADBW</code> instruction<hr>
	 * <p>
	 * <code>VPSADBW zmm1, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F6 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsadbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSADBW_ZMM_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSCATTERDD</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERDD vm32x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W0 A0 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterdd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERDD_VM32X_K1_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERDD</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERDD vm32y {k1}, ymm1</code><p>
	 * <code>EVEX.256.66.0F38.W0 A0 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterdd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERDD_VM32Y_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERDD</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERDD vm32z {k1}, zmm1</code><p>
	 * <code>EVEX.512.66.0F38.W0 A0 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterdd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERDD_VM32Z_K1_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERDQ vm32x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W1 A0 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterdq(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERDQ_VM32X_K1_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERDQ vm32x {k1}, ymm1</code><p>
	 * <code>EVEX.256.66.0F38.W1 A0 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterdq(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERDQ_VM32X_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERDQ vm32y {k1}, zmm1</code><p>
	 * <code>EVEX.512.66.0F38.W1 A0 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterdq(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERDQ_VM32Y_K1_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERQD</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERQD vm64x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W0 A1 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSCATTERQD vm64y {k1}, xmm1</code><p>
	 * <code>EVEX.256.66.0F38.W0 A1 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterqd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		if (Register.isXMM(dst.index.get())) {
			code = Code.EVEX_VPSCATTERQD_VM64X_K1_XMM;
		} else if (Register.isYMM(dst.index.get())) {
			code = Code.EVEX_VPSCATTERQD_VM64Y_K1_XMM;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VPSCATTERQD, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERQD</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERQD vm64z {k1}, ymm1</code><p>
	 * <code>EVEX.512.66.0F38.W0 A1 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterqd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERQD_VM64Z_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERQQ vm64x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W1 A1 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterqq(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERQQ_VM64X_K1_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERQQ vm64y {k1}, ymm1</code><p>
	 * <code>EVEX.256.66.0F38.W1 A1 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterqq(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERQQ_VM64Y_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSCATTERQQ</code> instruction<hr>
	 * <p>
	 * <code>VPSCATTERQQ vm64z {k1}, zmm1</code><p>
	 * <code>EVEX.512.66.0F38.W1 A1 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpscatterqq(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VPSCATTERQQ_VM64Z_K1_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VPSHAB</code> instruction<hr>
	 * <p>
	 * <code>VPSHAB xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 98 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshab(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAB_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHAB</code> instruction<hr>
	 * <p>
	 * <code>VPSHAB xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 98 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshab(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAB_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHAB</code> instruction<hr>
	 * <p>
	 * <code>VPSHAB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 98 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshab(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHAD</code> instruction<hr>
	 * <p>
	 * <code>VPSHAD xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 9A /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshad(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAD_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHAD</code> instruction<hr>
	 * <p>
	 * <code>VPSHAD xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 9A /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshad(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAD_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHAD</code> instruction<hr>
	 * <p>
	 * <code>VPSHAD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 9A /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshad(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHAQ xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 9B /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshaq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAQ_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHAQ xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 9B /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshaq(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAQ_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHAQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 9B /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshaq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAQ_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHAW</code> instruction<hr>
	 * <p>
	 * <code>VPSHAW xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 99 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshaw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAW_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHAW</code> instruction<hr>
	 * <p>
	 * <code>VPSHAW xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 99 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshaw(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAW_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHAW</code> instruction<hr>
	 * <p>
	 * <code>VPSHAW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 99 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshaw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHAW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHLB</code> instruction<hr>
	 * <p>
	 * <code>VPSHLB xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 94 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLB_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHLB</code> instruction<hr>
	 * <p>
	 * <code>VPSHLB xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 94 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlb(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLB_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHLB</code> instruction<hr>
	 * <p>
	 * <code>VPSHLB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 94 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHLD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLD xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 96 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLD_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHLD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLD xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 96 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshld(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLD_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHLD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 96 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLD_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHLDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDD_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDD_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 71 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDD_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDD_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 71 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 71 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 71 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 71 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 71 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 71 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 71 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 71 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 71 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHLDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 70 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 70 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 70 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHLDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 70 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHLDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 70 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHLDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 70 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHLDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDW_XMM_K1Z_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDW_YMM_K1Z_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 70 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDW_XMM_K1Z_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDW_YMM_K1Z_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHLDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 70 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshldw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHLDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLQ xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 97 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLQ_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLQ xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 97 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlq(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLQ_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHLQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 97 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLQ_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLW xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 95 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLW_XMM_XMMM128_XMM, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSHLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLW xmm1, xmm2/m128, xmm3</code><p>
	 * <code>XOP.128.X9.W0 95 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlw(AsmRegisterXMM dst, AsmMemoryOperand src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLW_XMM_XMMM128_XMM, dst.get(), src1.toMemoryOperand(getBitness()), src2.get()));
	}

	/**
	 * <code>VPSHLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHLW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>XOP.128.X9.W1 95 /r</code><p>
	 * <code>XOP</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshlw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.XOP_VPSHLW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSHRDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDD_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDD_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 73 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDD_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDD_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 73 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 73 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 73 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 73 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 73 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDVD</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 73 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 73 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 73 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 73 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSHRDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 72 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 72 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 72 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHRDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 72 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHRDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 72 /r</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHRDVW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 72 /r</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHRDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 72 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDW_XMM_K1Z_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 72 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDW_YMM_K1Z_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 72 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 72 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDW_XMM_K1Z_XMM_XMMM128_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 72 /r ib</code><p>
	 * <code>AVX512VL and AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDW_YMM_K1Z_YMM_YMMM256_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHRDW</code> instruction<hr>
	 * <p>
	 * <code>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 72 /r ib</code><p>
	 * <code>AVX512_VBMI2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshrdw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHRDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFB_XMM_XMM_XMMM128 : Code.EVEX_VPSHUFB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHUFB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFB_YMM_YMM_YMMM256 : Code.EVEX_VPSHUFB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHUFB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHUFB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFB_XMM_XMM_XMMM128 : Code.EVEX_VPSHUFB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHUFB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFB_YMM_YMM_YMMM256 : Code.EVEX_VPSHUFB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHUFB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.WIG 00 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHUFBITQMB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFBITQMB k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 8F /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufbitqmb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHUFBITQMB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFBITQMB k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 8F /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufbitqmb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHUFBITQMB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFBITQMB k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 8F /r</code><p>
	 * <code>AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufbitqmb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSHUFBITQMB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFBITQMB k1 {k2}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 8F /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufbitqmb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHUFBITQMB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFBITQMB k1 {k2}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 8F /r</code><p>
	 * <code>AVX512VL and AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufbitqmb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHUFBITQMB</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFBITQMB k1 {k2}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 8F /r</code><p>
	 * <code>AVX512_BITALG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufbitqmb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSHUFD</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFD xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 70 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFD_XMM_XMMM128_IMM8 : Code.EVEX_VPSHUFD_XMM_K1Z_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFD</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 70 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufd(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFD_YMM_YMMM256_IMM8 : Code.EVEX_VPSHUFD_YMM_K1Z_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFD</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 70 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufd(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFD</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFD xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 70 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPSHUFD_XMM_K1Z_XMMM128B32_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSHUFD_XMM_XMMM128_IMM8 : Code.EVEX_VPSHUFD_XMM_K1Z_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSHUFD</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 70 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufd(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		if (src1.isBroadcast()) {
			code = Code.EVEX_VPSHUFD_YMM_K1Z_YMMM256B32_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSHUFD_YMM_YMMM256_IMM8 : Code.EVEX_VPSHUFD_YMM_K1Z_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSHUFD</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 70 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufd(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFHW xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufhw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFHW_XMM_XMMM128_IMM8 : Code.EVEX_VPSHUFHW_XMM_K1Z_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFHW ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufhw(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFHW_YMM_YMMM256_IMM8 : Code.EVEX_VPSHUFHW_YMM_K1Z_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufhw(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFHW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFHW xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufhw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFHW_XMM_XMMM128_IMM8 : Code.EVEX_VPSHUFHW_XMM_K1Z_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFHW ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufhw(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFHW_YMM_YMMM256_IMM8 : Code.EVEX_VPSHUFHW_YMM_K1Z_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFHW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.F3.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshufhw(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFHW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFLW xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshuflw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFLW_XMM_XMMM128_IMM8 : Code.EVEX_VPSHUFLW_XMM_K1Z_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFLW ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshuflw(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFLW_YMM_YMMM256_IMM8 : Code.EVEX_VPSHUFLW_YMM_K1Z_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshuflw(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFLW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFLW xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshuflw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFLW_XMM_XMMM128_IMM8 : Code.EVEX_VPSHUFLW_XMM_K1Z_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFLW ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshuflw(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSHUFLW_YMM_YMMM256_IMM8 : Code.EVEX_VPSHUFLW_YMM_K1Z_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSHUFLW</code> instruction<hr>
	 * <p>
	 * <code>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.F2.0F.WIG 70 /r ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpshuflw(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSHUFLW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSIGNB</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 08 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSIGNB</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 08 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNB_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSIGNB</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 08 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNB_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSIGNB</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 08 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNB_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSIGND</code> instruction<hr>
	 * <p>
	 * <code>VPSIGND xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 0A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGND_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSIGND</code> instruction<hr>
	 * <p>
	 * <code>VPSIGND ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 0A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGND_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSIGND</code> instruction<hr>
	 * <p>
	 * <code>VPSIGND xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 0A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGND_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSIGND</code> instruction<hr>
	 * <p>
	 * <code>VPSIGND ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 0A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGND_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSIGNW</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 09 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSIGNW</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 09 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPSIGNW</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 09 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNW_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSIGNW</code> instruction<hr>
	 * <p>
	 * <code>VPSIGNW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 09 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsignw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPSIGNW_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F2 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 F2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLD_XMM_XMM_XMMM128 : Code.EVEX_VPSLLD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG F2 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W0 F2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLD_YMM_YMM_XMMM128 : Code.EVEX_VPSLLD_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W0 F2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F2 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 F2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLD_XMM_XMM_XMMM128 : Code.EVEX_VPSLLD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG F2 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W0 F2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLD_YMM_YMM_XMMM128 : Code.EVEX_VPSLLD_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W0 F2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLD xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 72 /6 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLD_XMM_XMM_IMM8 : Code.EVEX_VPSLLD_XMM_K1Z_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLD ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 72 /6 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLD_YMM_YMM_IMM8 : Code.EVEX_VPSLLD_YMM_K1Z_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /6 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLD_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLD_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSLLD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /6 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslld(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSLLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLDQ xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslldq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLDQ_XMM_XMM_IMM8 : Code.EVEX_VPSLLDQ_XMM_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPSLLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLDQ ymm1, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLDQ ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslldq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLDQ_YMM_YMM_IMM8 : Code.EVEX_VPSLLDQ_YMM_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPSLLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLDQ zmm1, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslldq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLDQ_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPSLLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslldq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLDQ_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPSLLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLDQ ymm1, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslldq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLDQ_YMM_YMMM256_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPSLLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLDQ zmm1, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 73 /7 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpslldq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLDQ_ZMM_ZMMM512_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F3 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 F3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLQ_XMM_XMM_XMMM128 : Code.EVEX_VPSLLQ_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG F3 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W1 F3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLQ_YMM_YMM_XMMM128 : Code.EVEX_VPSLLQ_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W1 F3 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F3 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 F3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLQ_XMM_XMM_XMMM128 : Code.EVEX_VPSLLQ_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG F3 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W1 F3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLQ_YMM_YMM_XMMM128 : Code.EVEX_VPSLLQ_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W1 F3 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 73 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLQ xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 73 /6 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLQ_XMM_XMM_IMM8 : Code.EVEX_VPSLLQ_XMM_K1Z_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 73 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLQ ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 73 /6 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLQ_YMM_YMM_IMM8 : Code.EVEX_VPSLLQ_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 73 /6 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 73 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 73 /6 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSLLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 73 /6 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSLLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLVD_XMM_XMM_XMMM128 : Code.EVEX_VPSLLVD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLVD_YMM_YMM_YMMM256 : Code.EVEX_VPSLLVD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 47 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSLLVD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSLLVD_XMM_XMM_XMMM128 : Code.EVEX_VPSLLVD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSLLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSLLVD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSLLVD_YMM_YMM_YMMM256 : Code.EVEX_VPSLLVD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSLLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 47 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSLLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLVQ_XMM_XMM_XMMM128 : Code.EVEX_VPSLLVQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLVQ_YMM_YMM_YMMM256 : Code.EVEX_VPSLLVQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 47 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSLLVQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSLLVQ_XMM_XMM_XMMM128 : Code.EVEX_VPSLLVQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSLLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 47 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 47 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSLLVQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSLLVQ_YMM_YMM_YMMM256 : Code.EVEX_VPSLLVQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSLLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 47 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSLLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 12 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 12 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 12 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F1 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLW_XMM_XMM_XMMM128 : Code.EVEX_VPSLLW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG F1 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.WIG F1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLW_YMM_YMM_XMMM128 : Code.EVEX_VPSLLW_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.WIG F1 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F1 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLW_XMM_XMM_XMMM128 : Code.EVEX_VPSLLW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG F1 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.WIG F1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLW_YMM_YMM_XMMM128 : Code.EVEX_VPSLLW_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.WIG F1 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLW xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLW_XMM_XMM_IMM8 : Code.EVEX_VPSLLW_XMM_K1Z_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSLLW ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSLLW_YMM_YMM_IMM8 : Code.EVEX_VPSLLW_YMM_K1Z_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLW_XMM_K1Z_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLW_YMM_K1Z_YMMM256_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSLLW</code> instruction<hr>
	 * <p>
	 * <code>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 71 /6 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsllw(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E2 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAD_XMM_XMM_XMMM128 : Code.EVEX_VPSRAD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG E2 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W0 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAD_YMM_YMM_XMMM128 : Code.EVEX_VPSRAD_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W0 E2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E2 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAD_XMM_XMM_XMMM128 : Code.EVEX_VPSRAD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG E2 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W0 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAD_YMM_YMM_XMMM128 : Code.EVEX_VPSRAD_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W0 E2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAD xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 72 /4 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAD_XMM_XMM_IMM8 : Code.EVEX_VPSRAD_XMM_K1Z_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAD ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 72 /4 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAD_YMM_YMM_IMM8 : Code.EVEX_VPSRAD_YMM_K1Z_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /4 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAD_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAD_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRAD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /4 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrad(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W1 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W1 E2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W1 E2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W1 E2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 72 /4 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 72 /4 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRAQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 72 /4 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRAVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 46 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAVD_XMM_XMM_XMMM128 : Code.EVEX_VPSRAVD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 46 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAVD_YMM_YMM_YMMM256 : Code.EVEX_VPSRAVD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 46 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 46 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSRAVD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSRAVD_XMM_XMM_XMMM128 : Code.EVEX_VPSRAVD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRAVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 46 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSRAVD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSRAVD_YMM_YMM_YMMM256 : Code.EVEX_VPSRAVD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRAVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 46 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRAVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 46 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRAVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 46 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRAVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 46 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRAVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 11 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 11 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 11 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 11 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 11 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 11 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsravw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E1 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAW_XMM_XMM_XMMM128 : Code.EVEX_VPSRAW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG E1 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.WIG E1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAW_YMM_YMM_XMMM128 : Code.EVEX_VPSRAW_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.WIG E1 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E1 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAW_XMM_XMM_XMMM128 : Code.EVEX_VPSRAW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG E1 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.WIG E1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAW_YMM_YMM_XMMM128 : Code.EVEX_VPSRAW_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.WIG E1 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAW xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAW_XMM_XMM_IMM8 : Code.EVEX_VPSRAW_XMM_K1Z_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRAW ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRAW_YMM_YMM_IMM8 : Code.EVEX_VPSRAW_YMM_K1Z_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAW_XMM_K1Z_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAW_YMM_K1Z_YMMM256_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSRAW</code> instruction<hr>
	 * <p>
	 * <code>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 71 /4 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsraw(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D2 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 D2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLD_XMM_XMM_XMMM128 : Code.EVEX_VPSRLD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG D2 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W0 D2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLD_YMM_YMM_XMMM128 : Code.EVEX_VPSRLD_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W0 D2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D2 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W0 D2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLD_XMM_XMM_XMMM128 : Code.EVEX_VPSRLD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG D2 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W0 D2 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLD_YMM_YMM_XMMM128 : Code.EVEX_VPSRLD_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W0 D2 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLD xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 72 /2 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLD_XMM_XMM_IMM8 : Code.EVEX_VPSRLD_XMM_K1Z_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLD ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 72 /2 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLD_YMM_YMM_IMM8 : Code.EVEX_VPSRLD_YMM_K1Z_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /2 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W0 72 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLD_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W0 72 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLD_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRLD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W0 72 /2 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrld(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMMM512B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLDQ xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrldq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLDQ_XMM_XMM_IMM8 : Code.EVEX_VPSRLDQ_XMM_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPSRLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLDQ ymm1, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLDQ ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrldq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLDQ_YMM_YMM_IMM8 : Code.EVEX_VPSRLDQ_YMM_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPSRLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLDQ zmm1, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrldq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLDQ_ZMM_ZMMM512_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VPSRLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLDQ xmm1, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrldq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLDQ_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPSRLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLDQ ymm1, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrldq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLDQ_YMM_YMMM256_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPSRLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLDQ zmm1, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 73 /3 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrldq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLDQ_ZMM_ZMMM512_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D3 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 D3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLQ_XMM_XMM_XMMM128 : Code.EVEX_VPSRLQ_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG D3 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W1 D3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLQ_YMM_YMM_XMMM128 : Code.EVEX_VPSRLQ_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W1 D3 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D3 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.W1 D3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLQ_XMM_XMM_XMMM128 : Code.EVEX_VPSRLQ_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG D3 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.W1 D3 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLQ_YMM_YMM_XMMM128 : Code.EVEX_VPSRLQ_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.W1 D3 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 73 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLQ xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 73 /2 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLQ_XMM_XMM_IMM8 : Code.EVEX_VPSRLQ_XMM_K1Z_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 73 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLQ ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 73 /2 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLQ_YMM_YMM_IMM8 : Code.EVEX_VPSRLQ_YMM_K1Z_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 73 /2 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 73 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLQ_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 73 /2 ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLQ_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRLQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 73 /2 ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlq(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMMM512B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VPSRLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLVD_XMM_XMM_XMMM128 : Code.EVEX_VPSRLVD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLVD_YMM_YMM_YMMM256 : Code.EVEX_VPSRLVD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 45 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSRLVD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSRLVD_XMM_XMM_XMMM128 : Code.EVEX_VPSRLVD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSRLVD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSRLVD_YMM_YMM_YMMM256 : Code.EVEX_VPSRLVD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRLVD</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 45 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLVQ_XMM_XMM_XMMM128 : Code.EVEX_VPSRLVQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLVQ_YMM_YMM_YMMM256 : Code.EVEX_VPSRLVQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 45 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F38.W1 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSRLVQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSRLVQ_XMM_XMM_XMMM128 : Code.EVEX_VPSRLVQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F38.W1 45 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 45 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSRLVQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSRLVQ_YMM_YMM_YMMM256 : Code.EVEX_VPSRLVQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRLVQ</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 45 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSRLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 10 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVW_XMM_K1Z_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 10 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVW_YMM_K1Z_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLVW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 10 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlvw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLVW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D1 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLW_XMM_XMM_XMMM128 : Code.EVEX_VPSRLW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG D1 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.WIG D1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLW_YMM_YMM_XMMM128 : Code.EVEX_VPSRLW_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.WIG D1 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D1 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLW_XMM_XMM_XMMM128 : Code.EVEX_VPSRLW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW ymm1, ymm2, xmm3/m128</code><p>
	 * <code>VEX.256.66.0F.WIG D1 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128</code><p>
	 * <code>EVEX.256.66.0F.WIG D1 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLW_YMM_YMM_XMMM128 : Code.EVEX_VPSRLW_YMM_K1Z_YMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128</code><p>
	 * <code>EVEX.512.66.0F.WIG D1 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLW xmm1, xmm2, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLW_XMM_XMM_IMM8 : Code.EVEX_VPSRLW_XMM_K1Z_XMMM128_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSRLW ymm1, ymm2, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSRLW_YMM_YMM_IMM8 : Code.EVEX_VPSRLW_YMM_K1Z_YMMM256_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</code><p>
	 * <code>EVEX.128.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLW_XMM_K1Z_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</code><p>
	 * <code>EVEX.256.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLW_YMM_K1Z_YMMM256_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSRLW</code> instruction<hr>
	 * <p>
	 * <code>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</code><p>
	 * <code>EVEX.512.66.0F.WIG 71 /2 ib</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsrlw(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMMM512_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags);
	}

	/**
	 * <code>VPSUBB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F8 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBB_XMM_XMM_XMMM128 : Code.EVEX_VPSUBB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F8 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBB_YMM_YMM_YMMM256 : Code.EVEX_VPSUBB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F8 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F8 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBB_XMM_XMM_XMMM128 : Code.EVEX_VPSUBB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F8 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBB_YMM_YMM_YMMM256 : Code.EVEX_VPSUBB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F8 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPSUBD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FA /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 FA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBD_XMM_XMM_XMMM128 : Code.EVEX_VPSUBD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPSUBD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FA /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 FA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBD_YMM_YMM_YMMM256 : Code.EVEX_VPSUBD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 FA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPSUBD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FA /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 FA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSUBD_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSUBD_XMM_XMM_XMMM128 : Code.EVEX_VPSUBD_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPSUBD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FA /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 FA /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSUBD_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSUBD_YMM_YMM_YMMM256 : Code.EVEX_VPSUBD_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSUBD</code> instruction<hr>
	 * <p>
	 * <code>VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 FA /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPSUBQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FB /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 FB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBQ_XMM_XMM_XMMM128 : Code.EVEX_VPSUBQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPSUBQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FB /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 FB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBQ_YMM_YMM_YMMM256 : Code.EVEX_VPSUBQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 FB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPSUBQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG FB /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 FB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSUBQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSUBQ_XMM_XMM_XMMM128 : Code.EVEX_VPSUBQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPSUBQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG FB /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 FB /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPSUBQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPSUBQ_YMM_YMM_YMMM256 : Code.EVEX_VPSUBQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSUBQ</code> instruction<hr>
	 * <p>
	 * <code>VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 FB /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPSUBSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E8 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSB_XMM_XMM_XMMM128 : Code.EVEX_VPSUBSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E8 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSB_YMM_YMM_YMMM256 : Code.EVEX_VPSUBSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E8 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E8 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSB_XMM_XMM_XMMM128 : Code.EVEX_VPSUBSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E8 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSB_YMM_YMM_YMMM256 : Code.EVEX_VPSUBSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E8 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E9 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSW_XMM_XMM_XMMM128 : Code.EVEX_VPSUBSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E9 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSW_YMM_YMM_YMMM256 : Code.EVEX_VPSUBSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E9 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG E9 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG E9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSW_XMM_XMM_XMMM128 : Code.EVEX_VPSUBSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG E9 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG E9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBSW_YMM_YMM_YMMM256 : Code.EVEX_VPSUBSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG E9 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubsw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D8 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSB_XMM_XMM_XMMM128 : Code.EVEX_VPSUBUSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D8 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG D8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSB_YMM_YMM_YMMM256 : Code.EVEX_VPSUBUSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG D8 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBUSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSB xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D8 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusb(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSB_XMM_XMM_XMMM128 : Code.EVEX_VPSUBUSB_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSB ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D8 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG D8 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusb(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSB_YMM_YMM_YMMM256 : Code.EVEX_VPSUBUSB_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBUSB</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG D8 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusb(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBUSB_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D9 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSW_XMM_XMM_XMMM128 : Code.EVEX_VPSUBUSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D9 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG D9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSW_YMM_YMM_YMMM256 : Code.EVEX_VPSUBUSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG D9 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBUSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG D9 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG D9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSW_XMM_XMM_XMMM128 : Code.EVEX_VPSUBUSW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG D9 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG D9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBUSW_YMM_YMM_YMMM256 : Code.EVEX_VPSUBUSW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBUSW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG D9 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubusw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBUSW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F9 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBW_XMM_XMM_XMMM128 : Code.EVEX_VPSUBW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F9 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBW_YMM_YMM_YMMM256 : Code.EVEX_VPSUBW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F9 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG F9 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG F9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBW_XMM_XMM_XMMM128 : Code.EVEX_VPSUBW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG F9 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG F9 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPSUBW_YMM_YMM_YMMM256 : Code.EVEX_VPSUBW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPSUBW</code> instruction<hr>
	 * <p>
	 * <code>VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG F9 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpsubw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPSUBW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTERNLOGD</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGD_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPTERNLOGD</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGD_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPTERNLOGD</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 25 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPTERNLOGD</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGD_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTERNLOGD</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGD_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTERNLOGD</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 25 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTERNLOGQ</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPTERNLOGQ</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPTERNLOGQ</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 25 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VPTERNLOGQ</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGQ_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTERNLOGQ</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 25 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGQ_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTERNLOGQ</code> instruction<hr>
	 * <p>
	 * <code>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 25 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpternlogq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VPTERNLOGQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTEST</code> instruction<hr>
	 * <p>
	 * <code>VPTEST xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 17 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptest(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VPTEST_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VPTEST</code> instruction<hr>
	 * <p>
	 * <code>VPTEST ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 17 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptest(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VPTEST_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VPTEST</code> instruction<hr>
	 * <p>
	 * <code>VPTEST xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.WIG 17 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptest(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VPTEST_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPTEST</code> instruction<hr>
	 * <p>
	 * <code>VPTEST ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.WIG 17 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptest(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VPTEST_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPTESTMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMB k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMB k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMB k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMB k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMB k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMB k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W0 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMW k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMW k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMW k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMW k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMW k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTMW k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F38.W1 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestmw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTNMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMB k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.F3.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmb(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMB k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.F3.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmb(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMB k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.F3.0F38.W0 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmb(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMB k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.F3.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmb(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTNMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMB k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.F3.0F38.W0 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmb(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTNMB</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMB k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.F3.0F38.W0 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmb(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTNMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmd(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmd(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W0 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmd(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmd(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTNMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W0 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmd(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTNMD</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W0 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmd(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTNMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmq(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmq(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W1 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmq(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.F3.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmq(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTNMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.F3.0F38.W1 27 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmq(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTNMQ</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.F3.0F38.W1 27 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmq(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPTESTNMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMW k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.F3.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmw(AsmRegisterK dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMW k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.F3.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmw(AsmRegisterK dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMW k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.F3.0F38.W1 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmw(AsmRegisterK dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPTESTNMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMW k2 {k1}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.F3.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmw(AsmRegisterK dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTNMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMW k2 {k1}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.F3.0F38.W1 26 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmw(AsmRegisterK dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPTESTNMW</code> instruction<hr>
	 * <p>
	 * <code>VPTESTNMW k2 {k1}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.F3.0F38.W1 26 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vptestnmw(AsmRegisterK dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 68 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHBW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 68 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHBW_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHBW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 68 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHBW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 68 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHBW_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHBW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHBW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 68 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHBW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 68 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHBW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 68 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHBW_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHBW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 68 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHBW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 68 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHBW_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHBW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKHBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHBW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 68 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHBW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 6A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHDQ_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 6A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHDQ_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 6A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHDQ_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6A /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 6A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKHDQ_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHDQ_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6A /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 6A /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKHDQ_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHDQ_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKHDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 6A /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHDQ_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHQDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 6D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHQDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHQDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHQDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6D /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 6D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHQDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHQDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 6D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHQDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHQDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6D /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 6D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKHQDQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHQDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHQDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHQDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6D /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 6D /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKHQDQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHQDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHQDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKHQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 6D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHQDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHWD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 69 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHWD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 69 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhwd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHWD_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHWD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHWD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 69 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHWD ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 69 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhwd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHWD_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHWD_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHWD zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 69 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhwd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHWD_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHWD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 69 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHWD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 69 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhwd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHWD_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKHWD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHWD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 69 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKHWD ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 69 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhwd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKHWD_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKHWD_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKHWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKHWD zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 69 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckhwd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKHWD_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 60 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLBW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 60 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLBW_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLBW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 60 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLBW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 60 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLBW_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLBW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLBW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 60 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLBW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLBW xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 60 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLBW xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 60 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklbw(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLBW_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLBW_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLBW ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 60 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLBW ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 60 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklbw(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLBW_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLBW_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKLBW</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLBW zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 60 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklbw(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLBW_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 62 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckldq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLDQ_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 62 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckldq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLDQ_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 62 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckldq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLDQ_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 62 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckldq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKLDQ_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLDQ_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 62 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 62 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckldq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKLDQ_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLDQ_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKLDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 62 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpckldq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLDQ_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLQDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 6C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLQDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLQDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLQDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 6C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLQDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLQDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 6C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLQDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLQDQ xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 6C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 6C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklqdq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKLQDQ_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLQDQ_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLQDQ_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLQDQ ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 6C /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 6C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklqdq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VPUNPCKLQDQ_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLQDQ_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLQDQ_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKLQDQ</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 6C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklqdq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLQDQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLWD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 61 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLWD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 61 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklwd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLWD_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLWD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLWD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 61 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLWD ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 61 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklwd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLWD_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLWD_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLWD zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 61 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklwd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLWD_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLWD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 61 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLWD xmm1 {k1}{z}, xmm2, xmm3/m128</code><p>
	 * <code>EVEX.128.66.0F.WIG 61 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklwd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLWD_XMM_XMM_XMMM128 : Code.EVEX_VPUNPCKLWD_XMM_K1Z_XMM_XMMM128;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLWD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 61 /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VPUNPCKLWD ymm1 {k1}{z}, ymm2, ymm3/m256</code><p>
	 * <code>EVEX.256.66.0F.WIG 61 /r</code><p>
	 * <code>AVX512VL and AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklwd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VPUNPCKLWD_YMM_YMM_YMMM256 : Code.EVEX_VPUNPCKLWD_YMM_K1Z_YMM_YMMM256;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPUNPCKLWD</code> instruction<hr>
	 * <p>
	 * <code>VPUNPCKLWD zmm1 {k1}{z}, zmm2, zmm3/m512</code><p>
	 * <code>EVEX.512.66.0F.WIG 61 /r</code><p>
	 * <code>AVX512BW</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpunpcklwd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPUNPCKLWD_ZMM_K1Z_ZMM_ZMMM512, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VPXOR</code> instruction<hr>
	 * <p>
	 * <code>VPXOR xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EF /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxor(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPXOR_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPXOR</code> instruction<hr>
	 * <p>
	 * <code>VPXOR ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EF /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxor(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.VEX_VPXOR_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VPXOR</code> instruction<hr>
	 * <p>
	 * <code>VPXOR xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG EF /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxor(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPXOR_XMM_XMM_XMMM128, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPXOR</code> instruction<hr>
	 * <p>
	 * <code>VPXOR ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG EF /r</code><p>
	 * <code>AVX2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxor(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VPXOR_YMM_YMM_YMMM256, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VPXORD</code> instruction<hr>
	 * <p>
	 * <code>VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxord(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPXORD</code> instruction<hr>
	 * <p>
	 * <code>VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxord(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPXORD</code> instruction<hr>
	 * <p>
	 * <code>VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 EF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxord(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPXORD</code> instruction<hr>
	 * <p>
	 * <code>VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F.W0 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxord(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORD_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPXORD</code> instruction<hr>
	 * <p>
	 * <code>VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F.W0 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxord(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORD_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPXORD</code> instruction<hr>
	 * <p>
	 * <code>VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F.W0 EF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxord(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORD_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPXORQ</code> instruction<hr>
	 * <p>
	 * <code>VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxorq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPXORQ</code> instruction<hr>
	 * <p>
	 * <code>VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxorq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPXORQ</code> instruction<hr>
	 * <p>
	 * <code>VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 EF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxorq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VPXORQ</code> instruction<hr>
	 * <p>
	 * <code>VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxorq(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORQ_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPXORQ</code> instruction<hr>
	 * <p>
	 * <code>VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 EF /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxorq(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORQ_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VPXORQ</code> instruction<hr>
	 * <p>
	 * <code>VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 EF /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vpxorq(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VPXORQ_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPD</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPD_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VRANGEPD</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPD_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VRANGEPD</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 50 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangepd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPD</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangepd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPD_XMM_K1Z_XMM_XMMM128B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPD</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangepd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPD_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPD</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 50 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangepd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPS</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangeps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPS_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VRANGEPS</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangeps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPS_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VRANGEPS</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 50 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangeps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPS</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangeps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPS_XMM_K1Z_XMM_XMMM128B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPS</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 50 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangeps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPS_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGEPS</code> instruction<hr>
	 * <p>
	 * <code>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 50 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangeps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGEPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGESD</code> instruction<hr>
	 * <p>
	 * <code>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 51 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGESD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGESD</code> instruction<hr>
	 * <p>
	 * <code>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 51 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGESD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGESS</code> instruction<hr>
	 * <p>
	 * <code>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 51 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGESS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRANGESS</code> instruction<hr>
	 * <p>
	 * <code>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 51 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrangess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRANGESS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRCP14PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PD_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCP14PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14pd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PD_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCP14PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 4C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14pd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PD_ZMM_K1Z_ZMMM512B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCP14PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PD_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP14PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PD_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP14PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 4C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PD_ZMM_K1Z_ZMMM512B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP14PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PS_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCP14PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PS_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCP14PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 4C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PS_ZMM_K1Z_ZMMM512B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCP14PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PS_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP14PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PS_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP14PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 4C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14PS_ZMM_K1Z_ZMMM512B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP14SD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 4D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14SD_XMM_K1Z_XMM_XMMM64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VRCP14SD</code> instruction<hr>
	 * <p>
	 * <code>VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 4D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14SD_XMM_K1Z_XMM_XMMM64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VRCP14SS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 4D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14SS_XMM_K1Z_XMM_XMMM32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VRCP14SS</code> instruction<hr>
	 * <p>
	 * <code>VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 4D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp14ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP14SS_XMM_K1Z_XMM_XMMM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VRCP28PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 CA /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28pd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28PD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP28PD</code> instruction<hr>
	 * <p>
	 * <code>VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 CA /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28PD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP28PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 CA /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28ps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28PS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP28PS</code> instruction<hr>
	 * <p>
	 * <code>VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 CA /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28PS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCP28SD</code> instruction<hr>
	 * <p>
	 * <code>VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 CB /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28SD_XMM_K1Z_XMM_XMMM64_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VRCP28SD</code> instruction<hr>
	 * <p>
	 * <code>VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 CB /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28SD_XMM_K1Z_XMM_XMMM64_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VRCP28SS</code> instruction<hr>
	 * <p>
	 * <code>VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 CB /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28SS_XMM_K1Z_XMM_XMMM32_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VRCP28SS</code> instruction<hr>
	 * <p>
	 * <code>VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 CB /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcp28ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCP28SS_XMM_K1Z_XMM_XMMM32_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VRCPPH</code> instruction<hr>
	 * <p>
	 * <code>VRCPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCPPH_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCPPH</code> instruction<hr>
	 * <p>
	 * <code>VRCPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpph(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCPPH_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCPPH</code> instruction<hr>
	 * <p>
	 * <code>VRCPPH zmm1 {k1}{z}, zmm2/m512/m16bcst</code><p>
	 * <code>EVEX.512.66.MAP6.W0 4C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpph(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRCPPH_ZMM_K1Z_ZMMM512B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRCPPH</code> instruction<hr>
	 * <p>
	 * <code>VRCPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCPPH_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCPPH</code> instruction<hr>
	 * <p>
	 * <code>VRCPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 4C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCPPH_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCPPH</code> instruction<hr>
	 * <p>
	 * <code>VRCPPH zmm1 {k1}{z}, zmm2/m512/m16bcst</code><p>
	 * <code>EVEX.512.66.MAP6.W0 4C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpph(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRCPPH_ZMM_K1Z_ZMMM512B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRCPPS</code> instruction<hr>
	 * <p>
	 * <code>VRCPPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 53 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VRCPPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VRCPPS</code> instruction<hr>
	 * <p>
	 * <code>VRCPPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 53 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VRCPPS_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VRCPPS</code> instruction<hr>
	 * <p>
	 * <code>VRCPPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 53 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VRCPPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VRCPPS</code> instruction<hr>
	 * <p>
	 * <code>VRCPPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 53 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VRCPPS_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VRCPSH</code> instruction<hr>
	 * <p>
	 * <code>VRCPSH xmm1 {k1}{z}, xmm2, xmm3/m16</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 4D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCPSH_XMM_K1Z_XMM_XMMM16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VRCPSH</code> instruction<hr>
	 * <p>
	 * <code>VRCPSH xmm1 {k1}{z}, xmm2, xmm3/m16</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 4D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRCPSH_XMM_K1Z_XMM_XMMM16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VRCPSS</code> instruction<hr>
	 * <p>
	 * <code>VRCPSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 53 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VRCPSS_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VRCPSS</code> instruction<hr>
	 * <p>
	 * <code>VRCPSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 53 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrcpss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VRCPSS_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VREDUCEPD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducepd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPD_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VREDUCEPD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducepd(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPD_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VREDUCEPD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 56 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducepd(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducepd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPD_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducepd(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPD_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 56 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducepd(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceph(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPH_XMM_K1Z_XMMM128B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VREDUCEPH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceph(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPH_YMM_K1Z_YMMM256B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VREDUCEPH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceph(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceph(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPH_XMM_K1Z_XMMM128B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceph(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPH_YMM_K1Z_YMMM256B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceph(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPS_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VREDUCEPS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceps(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPS_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VREDUCEPS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceps(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPS_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceps(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPS_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCEPS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 56 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreduceps(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCEPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VREDUCESD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 57 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCESD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VREDUCESD</code> instruction<hr>
	 * <p>
	 * <code>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 57 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCESD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VREDUCESH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 57 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducesh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCESH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VREDUCESH</code> instruction<hr>
	 * <p>
	 * <code>VREDUCESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 57 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducesh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCESH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VREDUCESS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 57 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCESS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VREDUCESS</code> instruction<hr>
	 * <p>
	 * <code>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 57 /r ib</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vreducess(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VREDUCESS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRNDSCALEPD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 09 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalepd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPD_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VRNDSCALEPD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 09 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalepd(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPD_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VRNDSCALEPD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 09 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalepd(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W1 09 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalepd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPD_XMM_K1Z_XMMM128B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 09 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalepd(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPD_YMM_K1Z_YMMM256B64_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 09 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalepd(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleph(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPH_XMM_K1Z_XMMM128B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VRNDSCALEPH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleph(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPH_YMM_K1Z_YMMM256B16_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VRNDSCALEPH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleph(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</code><p>
	 * <code>EVEX.128.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleph(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPH_XMM_K1Z_XMMM128B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</code><p>
	 * <code>EVEX.256.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleph(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPH_YMM_K1Z_YMMM256B16_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleph(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPS_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VRNDSCALEPS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleps(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPS_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.get(), imm), dst.flags);
	}

	/**
	 * <code>VRNDSCALEPS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleps(AsmRegisterZMM dst, AsmRegisterZMM src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, dst.get(), src1.get(), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPS_XMM_K1Z_XMMM128B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleps(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPS_YMM_K1Z_YMMM256B32_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALEPS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 08 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaleps(AsmRegisterZMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALEPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, dst.get(), src1.toMemoryOperand(getBitness()), imm), dst.flags | src1.flags);
	}

	/**
	 * <code>VRNDSCALESD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 0B /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALESD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRNDSCALESD</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W1 0B /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalesd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALESD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRNDSCALESH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 0A /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalesh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALESH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRNDSCALESH</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</code><p>
	 * <code>EVEX.LIG.0F3A.W0 0A /r ib</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscalesh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALESH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRNDSCALESS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 0A /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaless(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALESS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.get(), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VRNDSCALESS</code> instruction<hr>
	 * <p>
	 * <code>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</code><p>
	 * <code>EVEX.LIG.66.0F3A.W0 0A /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrndscaless(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VRNDSCALESS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VROUNDPD</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 09 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundpd(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPD_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VROUNDPD</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 09 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundpd(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPD_YMM_YMMM256_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VROUNDPD</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPD xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 09 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundpd(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPD_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VROUNDPD</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPD ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 09 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundpd(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPD_YMM_YMMM256_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VROUNDPS</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 08 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundps(AsmRegisterXMM dst, AsmRegisterXMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPS_XMM_XMMM128_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VROUNDPS</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPS ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 08 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundps(AsmRegisterYMM dst, AsmRegisterYMM src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPS_YMM_YMMM256_IMM8, dst.get(), src1.get(), imm));
	}

	/**
	 * <code>VROUNDPS</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPS xmm1, xmm2/m128, imm8</code><p>
	 * <code>VEX.128.66.0F3A.WIG 08 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundps(AsmRegisterXMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPS_XMM_XMMM128_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VROUNDPS</code> instruction<hr>
	 * <p>
	 * <code>VROUNDPS ymm1, ymm2/m256, imm8</code><p>
	 * <code>VEX.256.66.0F3A.WIG 08 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundps(AsmRegisterYMM dst, AsmMemoryOperand src1, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDPS_YMM_YMMM256_IMM8, dst.get(), src1.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VROUNDSD</code> instruction<hr>
	 * <p>
	 * <code>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.66.0F3A.WIG 0B /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDSD_XMM_XMM_XMMM64_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VROUNDSD</code> instruction<hr>
	 * <p>
	 * <code>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</code><p>
	 * <code>VEX.LIG.66.0F3A.WIG 0B /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDSD_XMM_XMM_XMMM64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VROUNDSS</code> instruction<hr>
	 * <p>
	 * <code>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.66.0F3A.WIG 0A /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDSS_XMM_XMM_XMMM32_IMM8, dst.get(), src1.get(), src2.get(), imm));
	}

	/**
	 * <code>VROUNDSS</code> instruction<hr>
	 * <p>
	 * <code>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</code><p>
	 * <code>VEX.LIG.66.0F3A.WIG 0A /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vroundss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.VEX_VROUNDSS_XMM_XMM_XMMM32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>VRSQRT14PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14pd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PD_XMM_K1Z_XMMM128B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14pd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PD_YMM_K1Z_YMMM256B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 4E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14pd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PD_ZMM_K1Z_ZMMM512B64, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14pd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PD_XMM_K1Z_XMMM128B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT14PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14pd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PD_YMM_K1Z_YMMM256B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT14PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F38.W1 4E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PD_ZMM_K1Z_ZMMM512B64, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT14PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PS_XMM_K1Z_XMMM128B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PS_YMM_K1Z_YMMM256B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 4E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PS_ZMM_K1Z_ZMMM512B32, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PS_XMM_K1Z_XMMM128B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT14PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PS_YMM_K1Z_YMMM256B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT14PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</code><p>
	 * <code>EVEX.512.66.0F38.W0 4E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14PS_ZMM_K1Z_ZMMM512B32, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT14SD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 4F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14SD_XMM_K1Z_XMM_XMMM64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14SD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 4F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14SD_XMM_K1Z_XMM_XMMM64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VRSQRT14SS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 4F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14SS_XMM_K1Z_XMM_XMMM32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VRSQRT14SS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 4F /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt14ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT14SS_XMM_K1Z_XMM_XMMM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VRSQRT28PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 CC /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28pd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28PD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT28PD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W1 CC /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28pd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28PD_ZMM_K1Z_ZMMM512B64_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT28PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 CC /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28ps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28PS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT28PS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</code><p>
	 * <code>EVEX.512.66.0F38.W0 CC /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28ps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28PS_ZMM_K1Z_ZMMM512B32_SAE, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRT28SD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 CD /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28SD_XMM_K1Z_XMM_XMMM64_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VRSQRT28SD</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 CD /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28sd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28SD_XMM_K1Z_XMM_XMMM64_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VRSQRT28SS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 CD /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28SS_XMM_K1Z_XMM_XMMM32_SAE, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VRSQRT28SS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 CD /r</code><p>
	 * <code>AVX512ER</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrt28ss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRT28SS_XMM_K1Z_XMM_XMMM32_SAE, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VRSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTPH_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtph(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTPH_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst</code><p>
	 * <code>EVEX.512.66.MAP6.W0 4E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtph(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTPH_ZMM_K1Z_ZMMM512B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VRSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTPH_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 4E /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTPH_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst</code><p>
	 * <code>EVEX.512.66.MAP6.W0 4E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtph(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTPH_ZMM_K1Z_ZMMM512B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VRSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 52 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VRSQRTPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VRSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 52 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VRSQRTPS_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VRSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 52 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VRSQRTPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VRSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 52 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VRSQRTPS_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VRSQRTSH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 4F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTSH_XMM_K1Z_XMM_XMMM16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VRSQRTSH</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 4F /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VRSQRTSH_XMM_K1Z_XMM_XMMM16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VRSQRTSS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 52 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.VEX_VRSQRTSS_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.get()));
	}

	/**
	 * <code>VRSQRTSS</code> instruction<hr>
	 * <p>
	 * <code>VRSQRTSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 52 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vrsqrtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.VEX_VRSQRTSS_XMM_XMM_XMMM32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VSCALEFPD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSCALEFPD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSCALEFPD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F38.W1 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPD_XMM_K1Z_XMM_XMMM128B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F38.W1 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPD_YMM_K1Z_YMM_YMMM256B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W1 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSCALEFPH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSCALEFPH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 2C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.66.MAP6.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.66.MAP6.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.66.MAP6.W0 2C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSCALEFPS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSCALEFPS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.66.0F38.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPS_XMM_K1Z_XMM_XMMM128B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.66.0F38.W0 2C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPS_YMM_K1Z_YMM_YMMM256B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFPS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.66.0F38.W0 2C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFSD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFSD_XMM_K1Z_XMM_XMMM64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFSD</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W1 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFSD_XMM_K1Z_XMM_XMMM64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFSH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 2D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFSH</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.66.MAP6.W0 2D /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFSS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFSS_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCALEFSS</code> instruction<hr>
	 * <p>
	 * <code>VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.66.0F38.W0 2D /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscalefss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSCALEFSS_XMM_K1Z_XMM_XMMM32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSCATTERDPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERDPD vm32x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W1 A2 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterdpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERDPD_VM32X_K1_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERDPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERDPD vm32x {k1}, ymm1</code><p>
	 * <code>EVEX.256.66.0F38.W1 A2 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterdpd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERDPD_VM32X_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERDPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERDPD vm32y {k1}, zmm1</code><p>
	 * <code>EVEX.512.66.0F38.W1 A2 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterdpd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERDPD_VM32Y_K1_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERDPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERDPS vm32x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W0 A2 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterdps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERDPS_VM32X_K1_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERDPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERDPS vm32y {k1}, ymm1</code><p>
	 * <code>EVEX.256.66.0F38.W0 A2 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterdps(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERDPS_VM32Y_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERDPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERDPS vm32z {k1}, zmm1</code><p>
	 * <code>EVEX.512.66.0F38.W0 A2 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterdps(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERDPS_VM32Z_K1_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERPF0DPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF0DPD vm32y {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C6 /5 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf0dpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF0DPD_VM32Y_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERPF0DPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF0DPS vm32z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C6 /5 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf0dps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF0DPS_VM32Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERPF0QPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF0QPD vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C7 /5 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf0qpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF0QPD_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERPF0QPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF0QPS vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C7 /5 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf0qps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF0QPS_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERPF1DPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF1DPD vm32y {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C6 /6 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf1dpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF1DPD_VM32Y_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERPF1DPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF1DPS vm32z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C6 /6 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf1dps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF1DPS_VM32Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERPF1QPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF1QPD vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W1 C7 /6 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf1qpd(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF1QPD_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERPF1QPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERPF1QPS vm64z {k1}</code><p>
	 * <code>EVEX.512.66.0F38.W0 C7 /6 /vsib</code><p>
	 * <code>AVX512PF</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterpf1qps(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERPF1QPS_VM64Z_K1, dst.toMemoryOperand(getBitness())), dst.flags);
	}

	/**
	 * <code>VSCATTERQPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERQPD vm64x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W1 A3 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterqpd(AsmMemoryOperand dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERQPD_VM64X_K1_XMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERQPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERQPD vm64y {k1}, ymm1</code><p>
	 * <code>EVEX.256.66.0F38.W1 A3 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterqpd(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERQPD_VM64Y_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERQPD</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERQPD vm64z {k1}, zmm1</code><p>
	 * <code>EVEX.512.66.0F38.W1 A3 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterqpd(AsmMemoryOperand dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERQPD_VM64Z_K1_ZMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERQPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERQPS vm64x {k1}, xmm1</code><p>
	 * <code>EVEX.128.66.0F38.W0 A3 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSCATTERQPS vm64y {k1}, xmm1</code><p>
	 * <code>EVEX.256.66.0F38.W0 A3 /vsib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterqps(AsmMemoryOperand dst, AsmRegisterXMM src) {
		int code;
		if (Register.isXMM(dst.index.get())) {
			code = Code.EVEX_VSCATTERQPS_VM64X_K1_XMM;
		} else if (Register.isYMM(dst.index.get())) {
			code = Code.EVEX_VSCATTERQPS_VM64Y_K1_XMM;
		} else {
			throw noOpCodeFoundFor(Mnemonic.VSCATTERQPS, dst, src);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSCATTERQPS</code> instruction<hr>
	 * <p>
	 * <code>VSCATTERQPS vm64z {k1}, ymm1</code><p>
	 * <code>EVEX.512.66.0F38.W0 A3 /vsib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vscatterqps(AsmMemoryOperand dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSCATTERQPS_VM64Z_K1_YMM, dst.toMemoryOperand(getBitness()), src.get()), dst.flags);
	}

	/**
	 * <code>VSHUFF32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 23 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF32X4_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFF32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 23 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF32X4_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFF32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 23 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF32X4_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFF32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 23 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF32X4_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFF64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 23 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF64X2_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFF64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 23 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF64X2_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFF64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 23 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF64X2_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFF64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 23 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshuff64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFF64X2_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFI32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 43 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI32X4_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFI32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 43 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI32X4_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFI32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W0 43 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi32x4(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI32X4_YMM_K1Z_YMM_YMMM256B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFI32X4</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W0 43 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi32x4(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI32X4_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFI64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 43 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI64X2_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFI64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 43 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI64X2_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFI64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F3A.W1 43 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi64x2(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI64X2_YMM_K1Z_YMM_YMMM256B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFI64X2</code> instruction<hr>
	 * <p>
	 * <code>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F3A.W1 43 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufi64x2(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFI64X2_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFPD</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSHUFPD_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VSHUFPD_XMM_K1Z_XMM_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFPD</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSHUFPD_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VSHUFPD_YMM_K1Z_YMM_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFPD</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C6 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFPD</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.66.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</code><p>
	 * <code>EVEX.128.66.0F.W1 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSHUFPD_XMM_K1Z_XMM_XMMM128B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VSHUFPD_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VSHUFPD_XMM_K1Z_XMM_XMMM128B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFPD</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.66.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</code><p>
	 * <code>EVEX.256.66.0F.W1 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSHUFPD_YMM_K1Z_YMM_YMMM256B64_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VSHUFPD_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VSHUFPD_YMM_K1Z_YMM_YMMM256B64_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFPD</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</code><p>
	 * <code>EVEX.512.66.0F.W1 C6 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFPS</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSHUFPS_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VSHUFPS_XMM_K1Z_XMM_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFPS</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2, int imm) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSHUFPS_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VSHUFPS_YMM_K1Z_YMM_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFPS</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C6 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.get(), imm), dst.flags);
	}

	/**
	 * <code>VSHUFPS</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</code><p>
	 * <code>VEX.128.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</code><p>
	 * <code>EVEX.128.0F.W0 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSHUFPS_XMM_K1Z_XMM_XMMM128B32_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VSHUFPS_XMM_XMM_XMMM128_IMM8 : Code.EVEX_VSHUFPS_XMM_K1Z_XMM_XMMM128B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFPS</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</code><p>
	 * <code>VEX.256.0F.WIG C6 /r ib</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</code><p>
	 * <code>EVEX.256.0F.W0 C6 /r ib</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2, int imm) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSHUFPS_YMM_K1Z_YMM_YMMM256B32_IMM8;
		} else code = getInstructionPreferVex() ? Code.VEX_VSHUFPS_YMM_YMM_YMMM256_IMM8 : Code.EVEX_VSHUFPS_YMM_K1Z_YMM_YMMM256B32_IMM8;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSHUFPS</code> instruction<hr>
	 * <p>
	 * <code>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</code><p>
	 * <code>EVEX.512.0F.W0 C6 /r ib</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vshufps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2, int imm) {
		addInstruction(Instruction.create(Code.EVEX_VSHUFPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, dst.get(), src1.get(), src2.toMemoryOperand(getBitness()), imm), dst.flags | src2.flags);
	}

	/**
	 * <code>VSQRTPD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTPD_XMM_XMMM128 : Code.EVEX_VSQRTPD_XMM_K1Z_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VSQRTPD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtpd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTPD_YMM_YMMM256 : Code.EVEX_VSQRTPD_YMM_K1Z_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VSQRTPD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtpd(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPD_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VSQRTPD_XMM_K1Z_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VSQRTPD_XMM_XMMM128 : Code.EVEX_VSQRTPD_XMM_K1Z_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtpd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VSQRTPD_YMM_K1Z_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VSQRTPD_YMM_YMMM256 : Code.EVEX_VSQRTPD_YMM_K1Z_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtpd(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPD_ZMM_K1Z_ZMMM512B64_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtph(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPH_XMM_K1Z_XMMM128B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtph(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPH_YMM_K1Z_YMMM256B16, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 51 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtph(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPH_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtph(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPH_XMM_K1Z_XMMM128B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtph(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPH_YMM_K1Z_YMMM256B16, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 51 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtph(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPH_ZMM_K1Z_ZMMM512B16_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTPS_XMM_XMMM128 : Code.EVEX_VSQRTPS_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTPS_YMM_YMMM256 : Code.EVEX_VSQRTPS_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.get()), dst.flags);
	}

	/**
	 * <code>VSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtps(AsmRegisterZMM dst, AsmRegisterZMM src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPS_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.get()), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VSQRTPS_XMM_K1Z_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VSQRTPS_XMM_XMMM128 : Code.EVEX_VSQRTPS_XMM_K1Z_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 51 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		int code;
		if (src.isBroadcast()) {
			code = Code.EVEX_VSQRTPS_YMM_K1Z_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VSQRTPS_YMM_YMMM256 : Code.EVEX_VSQRTPS_YMM_K1Z_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTPS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtps(AsmRegisterZMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTPS_ZMM_K1Z_ZMMM512B32_ER, dst.get(), src.toMemoryOperand(getBitness())), dst.flags | src.flags);
	}

	/**
	 * <code>VSQRTSD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTSD_XMM_XMM_XMMM64 : Code.EVEX_VSQRTSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSQRTSD</code> instruction<hr>
	 * <p>
	 * <code>VSQRTSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTSD_XMM_XMM_XMMM64 : Code.EVEX_VSQRTSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSQRTSH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 51 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSQRTSH</code> instruction<hr>
	 * <p>
	 * <code>VSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 51 /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSQRTSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSQRTSS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTSS_XMM_XMM_XMMM32 : Code.EVEX_VSQRTSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSQRTSS</code> instruction<hr>
	 * <p>
	 * <code>VSQRTSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 51 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 51 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsqrtss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSQRTSS_XMM_XMM_XMMM32 : Code.EVEX_VSQRTSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSTMXCSR</code> instruction<hr>
	 * <p>
	 * <code>VSTMXCSR m32</code><p>
	 * <code>VEX.LZ.0F.WIG AE /3</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vstmxcsr(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.VEX_VSTMXCSR_M32, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VSUBPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBPD_XMM_XMM_XMMM128 : Code.EVEX_VSUBPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VSUBPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBPD_YMM_YMM_YMMM256 : Code.EVEX_VSUBPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VSUBPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSUBPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VSUBPD_XMM_XMM_XMMM128 : Code.EVEX_VSUBPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VSUBPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSUBPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VSUBPD_YMM_YMM_YMMM256 : Code.EVEX_VSUBPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPD</code> instruction<hr>
	 * <p>
	 * <code>VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</code><p>
	 * <code>EVEX.512.66.0F.W1 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPH</code> instruction<hr>
	 * <p>
	 * <code>VSUBPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSUBPH</code> instruction<hr>
	 * <p>
	 * <code>VSUBPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSUBPH</code> instruction<hr>
	 * <p>
	 * <code>VSUBPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 5C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPH</code> instruction<hr>
	 * <p>
	 * <code>VSUBPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</code><p>
	 * <code>EVEX.128.MAP5.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubph(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPH_XMM_K1Z_XMM_XMMM128B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPH</code> instruction<hr>
	 * <p>
	 * <code>VSUBPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</code><p>
	 * <code>EVEX.256.MAP5.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubph(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPH_YMM_K1Z_YMM_YMMM256B16, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPH</code> instruction<hr>
	 * <p>
	 * <code>VSUBPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</code><p>
	 * <code>EVEX.512.MAP5.W0 5C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubph(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VSUBPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBPS_XMM_XMM_XMMM128 : Code.EVEX_VSUBPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VSUBPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBPS_YMM_YMM_YMMM256 : Code.EVEX_VSUBPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VSUBPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSUBPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VSUBPS_XMM_XMM_XMMM128 : Code.EVEX_VSUBPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VSUBPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 5C /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VSUBPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VSUBPS_YMM_YMM_YMMM256 : Code.EVEX_VSUBPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBPS</code> instruction<hr>
	 * <p>
	 * <code>VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</code><p>
	 * <code>EVEX.512.0F.W0 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VSUBSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBSD_XMM_XMM_XMMM64 : Code.EVEX_VSUBSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBSD</code> instruction<hr>
	 * <p>
	 * <code>VSUBSD xmm1, xmm2, xmm3/m64</code><p>
	 * <code>VEX.LIG.F2.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</code><p>
	 * <code>EVEX.LIG.F2.0F.W1 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubsd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBSD_XMM_XMM_XMMM64 : Code.EVEX_VSUBSD_XMM_K1Z_XMM_XMMM64_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBSH</code> instruction<hr>
	 * <p>
	 * <code>VSUBSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBSH</code> instruction<hr>
	 * <p>
	 * <code>VSUBSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</code><p>
	 * <code>EVEX.LIG.F3.MAP5.W0 5C /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubsh(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VSUBSH_XMM_K1Z_XMM_XMMM16_ER, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VSUBSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBSS_XMM_XMM_XMMM32 : Code.EVEX_VSUBSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags | src2.flags);
	}

	/**
	 * <code>VSUBSS</code> instruction<hr>
	 * <p>
	 * <code>VSUBSS xmm1, xmm2, xmm3/m32</code><p>
	 * <code>VEX.LIG.F3.0F.WIG 5C /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</code><p>
	 * <code>EVEX.LIG.F3.0F.W0 5C /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vsubss(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VSUBSS_XMM_XMM_XMMM32 : Code.EVEX_VSUBSS_XMM_K1Z_XMM_XMMM32_ER;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VTESTPD</code> instruction<hr>
	 * <p>
	 * <code>VTESTPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VTESTPD</code> instruction<hr>
	 * <p>
	 * <code>VTESTPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestpd(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPD_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VTESTPD</code> instruction<hr>
	 * <p>
	 * <code>VTESTPD xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VTESTPD</code> instruction<hr>
	 * <p>
	 * <code>VTESTPD ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0F /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestpd(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPD_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VTESTPS</code> instruction<hr>
	 * <p>
	 * <code>VTESTPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>VTESTPS</code> instruction<hr>
	 * <p>
	 * <code>VTESTPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestps(AsmRegisterYMM dst, AsmRegisterYMM src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPS_YMM_YMMM256, dst.get(), src.get()));
	}

	/**
	 * <code>VTESTPS</code> instruction<hr>
	 * <p>
	 * <code>VTESTPS xmm1, xmm2/m128</code><p>
	 * <code>VEX.128.66.0F38.W0 0E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VTESTPS</code> instruction<hr>
	 * <p>
	 * <code>VTESTPS ymm1, ymm2/m256</code><p>
	 * <code>VEX.256.66.0F38.W0 0E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vtestps(AsmRegisterYMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.VEX_VTESTPS_YMM_YMMM256, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>VUCOMISD</code> instruction<hr>
	 * <p>
	 * <code>VUCOMISD xmm1, xmm2/m64</code><p>
	 * <code>VEX.LIG.66.0F.WIG 2E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUCOMISD xmm1, xmm2/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F.W1 2E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vucomisd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUCOMISD_XMM_XMMM64 : Code.EVEX_VUCOMISD_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VUCOMISD</code> instruction<hr>
	 * <p>
	 * <code>VUCOMISD xmm1, xmm2/m64</code><p>
	 * <code>VEX.LIG.66.0F.WIG 2E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUCOMISD xmm1, xmm2/m64{sae}</code><p>
	 * <code>EVEX.LIG.66.0F.W1 2E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vucomisd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUCOMISD_XMM_XMMM64 : Code.EVEX_VUCOMISD_XMM_XMMM64_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VUCOMISH</code> instruction<hr>
	 * <p>
	 * <code>VUCOMISH xmm1, xmm2/m16{sae}</code><p>
	 * <code>EVEX.LIG.MAP5.W0 2E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vucomish(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.EVEX_VUCOMISH_XMM_XMMM16_SAE, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VUCOMISH</code> instruction<hr>
	 * <p>
	 * <code>VUCOMISH xmm1, xmm2/m16{sae}</code><p>
	 * <code>EVEX.LIG.MAP5.W0 2E /r</code><p>
	 * <code>AVX512-FP16</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vucomish(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.EVEX_VUCOMISH_XMM_XMMM16_SAE, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VUCOMISS</code> instruction<hr>
	 * <p>
	 * <code>VUCOMISS xmm1, xmm2/m32</code><p>
	 * <code>VEX.LIG.0F.WIG 2E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUCOMISS xmm1, xmm2/m32{sae}</code><p>
	 * <code>EVEX.LIG.0F.W0 2E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vucomiss(AsmRegisterXMM dst, AsmRegisterXMM src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUCOMISS_XMM_XMMM32 : Code.EVEX_VUCOMISS_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.get()), src.flags);
	}

	/**
	 * <code>VUCOMISS</code> instruction<hr>
	 * <p>
	 * <code>VUCOMISS xmm1, xmm2/m32</code><p>
	 * <code>VEX.LIG.0F.WIG 2E /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUCOMISS xmm1, xmm2/m32{sae}</code><p>
	 * <code>EVEX.LIG.0F.W0 2E /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vucomiss(AsmRegisterXMM dst, AsmMemoryOperand src) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUCOMISS_XMM_XMMM32 : Code.EVEX_VUCOMISS_XMM_XMMM32_SAE;
		addInstruction(Instruction.create(code, dst.get(), src.toMemoryOperand(getBitness())), src.flags);
	}

	/**
	 * <code>VUNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPD_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKHPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPD_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKHPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKHPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKHPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPD_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKHPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKHPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPD_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKHPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKHPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKHPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPS_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKHPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPS_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKHPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKHPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKHPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPS_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKHPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 15 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKHPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 15 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKHPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKHPS_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKHPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKHPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKHPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 15 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpckhps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKHPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPD_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKLPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPD_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKLPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKLPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKLPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPD_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKLPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKLPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPD_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKLPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKLPD</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKLPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPS_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKLPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPS_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKLPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKLPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VUNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKLPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPS_XMM_XMM_XMMM128 : Code.EVEX_VUNPCKLPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 14 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 14 /r</code><p>
	 * <code>AVX512VL and AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VUNPCKLPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VUNPCKLPS_YMM_YMM_YMMM256 : Code.EVEX_VUNPCKLPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VUNPCKLPS</code> instruction<hr>
	 * <p>
	 * <code>VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 14 /r</code><p>
	 * <code>AVX512F</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vunpcklps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VUNPCKLPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VXORPD</code> instruction<hr>
	 * <p>
	 * <code>VXORPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VXORPD_XMM_XMM_XMMM128 : Code.EVEX_VXORPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VXORPD</code> instruction<hr>
	 * <p>
	 * <code>VXORPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VXORPD_YMM_YMM_YMMM256 : Code.EVEX_VXORPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VXORPD</code> instruction<hr>
	 * <p>
	 * <code>VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 57 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VXORPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VXORPD</code> instruction<hr>
	 * <p>
	 * <code>VXORPD xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.66.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</code><p>
	 * <code>EVEX.128.66.0F.W1 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorpd(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VXORPD_XMM_K1Z_XMM_XMMM128B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VXORPD_XMM_XMM_XMMM128 : Code.EVEX_VXORPD_XMM_K1Z_XMM_XMMM128B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VXORPD</code> instruction<hr>
	 * <p>
	 * <code>VXORPD ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.66.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</code><p>
	 * <code>EVEX.256.66.0F.W1 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorpd(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VXORPD_YMM_K1Z_YMM_YMMM256B64;
		} else code = getInstructionPreferVex() ? Code.VEX_VXORPD_YMM_YMM_YMMM256 : Code.EVEX_VXORPD_YMM_K1Z_YMM_YMMM256B64;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VXORPD</code> instruction<hr>
	 * <p>
	 * <code>VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</code><p>
	 * <code>EVEX.512.66.0F.W1 57 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorpd(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VXORPD_ZMM_K1Z_ZMM_ZMMM512B64, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VXORPS</code> instruction<hr>
	 * <p>
	 * <code>VXORPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmRegisterXMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VXORPS_XMM_XMM_XMMM128 : Code.EVEX_VXORPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VXORPS</code> instruction<hr>
	 * <p>
	 * <code>VXORPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmRegisterYMM src2) {
		int code;
		code = getInstructionPreferVex() ? Code.VEX_VXORPS_YMM_YMM_YMMM256 : Code.EVEX_VXORPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VXORPS</code> instruction<hr>
	 * <p>
	 * <code>VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 57 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmRegisterZMM src2) {
		addInstruction(Instruction.create(Code.EVEX_VXORPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.get()), dst.flags);
	}

	/**
	 * <code>VXORPS</code> instruction<hr>
	 * <p>
	 * <code>VXORPS xmm1, xmm2, xmm3/m128</code><p>
	 * <code>VEX.128.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</code><p>
	 * <code>EVEX.128.0F.W0 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorps(AsmRegisterXMM dst, AsmRegisterXMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VXORPS_XMM_K1Z_XMM_XMMM128B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VXORPS_XMM_XMM_XMMM128 : Code.EVEX_VXORPS_XMM_K1Z_XMM_XMMM128B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VXORPS</code> instruction<hr>
	 * <p>
	 * <code>VXORPS ymm1, ymm2, ymm3/m256</code><p>
	 * <code>VEX.256.0F.WIG 57 /r</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</code><p>
	 * <code>EVEX.256.0F.W0 57 /r</code><p>
	 * <code>AVX512VL and AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorps(AsmRegisterYMM dst, AsmRegisterYMM src1, AsmMemoryOperand src2) {
		int code;
		if (src2.isBroadcast()) {
			code = Code.EVEX_VXORPS_YMM_K1Z_YMM_YMMM256B32;
		} else code = getInstructionPreferVex() ? Code.VEX_VXORPS_YMM_YMM_YMMM256 : Code.EVEX_VXORPS_YMM_K1Z_YMM_YMMM256B32;
		addInstruction(Instruction.create(code, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VXORPS</code> instruction<hr>
	 * <p>
	 * <code>VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</code><p>
	 * <code>EVEX.512.0F.W0 57 /r</code><p>
	 * <code>AVX512DQ</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vxorps(AsmRegisterZMM dst, AsmRegisterZMM src1, AsmMemoryOperand src2) {
		addInstruction(Instruction.create(Code.EVEX_VXORPS_ZMM_K1Z_ZMM_ZMMM512B32, dst.get(), src1.get(), src2.toMemoryOperand(getBitness())), dst.flags | src2.flags);
	}

	/**
	 * <code>VZEROALL</code> instruction<hr>
	 * <p>
	 * <code>VZEROALL</code><p>
	 * <code>VEX.256.0F.WIG 77</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vzeroall() {
		addInstruction(Instruction.create(Code.VEX_VZEROALL));
	}

	/**
	 * <code>VZEROUPPER</code> instruction<hr>
	 * <p>
	 * <code>VZEROUPPER</code><p>
	 * <code>VEX.128.0F.WIG 77</code><p>
	 * <code>AVX</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void vzeroupper() {
		addInstruction(Instruction.create(Code.VEX_VZEROUPPER));
	}

	/**
	 * <code>WAIT</code> instruction<hr>
	 * <p>
	 * <code>WAIT</code><p>
	 * <code>9B</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wait_() {
		addInstruction(Instruction.create(Code.WAIT));
	}

	/**
	 * <code>WBINVD</code> instruction<hr>
	 * <p>
	 * <code>WBINVD</code><p>
	 * <code>0F 09</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wbinvd() {
		addInstruction(Instruction.create(Code.WBINVD));
	}

	/**
	 * <code>WBNOINVD</code> instruction<hr>
	 * <p>
	 * <code>WBNOINVD</code><p>
	 * <code>F3 0F 09</code><p>
	 * <code>WBNOINVD</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wbnoinvd() {
		addInstruction(Instruction.create(Code.WBNOINVD));
	}

	/**
	 * <code>WRFSBASE</code> instruction<hr>
	 * <p>
	 * <code>WRFSBASE r32</code><p>
	 * <code>F3 0F AE /2</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void wrfsbase(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.WRFSBASE_R32, dst.get()));
	}

	/**
	 * <code>WRFSBASE</code> instruction<hr>
	 * <p>
	 * <code>WRFSBASE r64</code><p>
	 * <code>F3 o64 0F AE /2</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void wrfsbase(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.WRFSBASE_R64, dst.get()));
	}

	/**
	 * <code>WRGSBASE</code> instruction<hr>
	 * <p>
	 * <code>WRGSBASE r32</code><p>
	 * <code>F3 0F AE /3</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void wrgsbase(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.WRGSBASE_R32, dst.get()));
	}

	/**
	 * <code>WRGSBASE</code> instruction<hr>
	 * <p>
	 * <code>WRGSBASE r64</code><p>
	 * <code>F3 o64 0F AE /3</code><p>
	 * <code>FSGSBASE</code><p>
	 * <code>64-bit</code>
	 */
	public void wrgsbase(AsmRegister64 dst) {
		addInstruction(Instruction.create(Code.WRGSBASE_R64, dst.get()));
	}

	/**
	 * <code>WRMSR</code> instruction<hr>
	 * <p>
	 * <code>WRMSR</code><p>
	 * <code>0F 30</code><p>
	 * <code>MSR</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wrmsr() {
		addInstruction(Instruction.create(Code.WRMSR));
	}

	/**
	 * <code>WRPKRU</code> instruction<hr>
	 * <p>
	 * <code>WRPKRU</code><p>
	 * <code>NP 0F 01 EF</code><p>
	 * <code>PKU</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wrpkru() {
		addInstruction(Instruction.create(Code.WRPKRU));
	}

	/**
	 * <code>WRSHR</code> instruction<hr>
	 * <p>
	 * <code>WRSHR r/m32</code><p>
	 * <code>0F 37 /0</code><p>
	 * <code>Cyrix 6x86MX, M II, III</code><p>
	 * <code>16/32-bit</code>
	 */
	public void wrshr(AsmRegister32 dst) {
		addInstruction(Instruction.create(Code.WRSHR_RM32, dst.get()));
	}

	/**
	 * <code>WRSHR</code> instruction<hr>
	 * <p>
	 * <code>WRSHR r/m32</code><p>
	 * <code>0F 37 /0</code><p>
	 * <code>Cyrix 6x86MX, M II, III</code><p>
	 * <code>16/32-bit</code>
	 */
	public void wrshr(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.WRSHR_RM32, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>WRSSD</code> instruction<hr>
	 * <p>
	 * <code>WRSSD m32, r32</code><p>
	 * <code>NP 0F 38 F6 /r</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wrssd(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.WRSSD_M32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>WRSSQ</code> instruction<hr>
	 * <p>
	 * <code>WRSSQ m64, r64</code><p>
	 * <code>NP o64 0F 38 F6 /r</code><p>
	 * <code>CET_SS</code><p>
	 * <code>64-bit</code>
	 */
	public void wrssq(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.WRSSQ_M64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>WRUDBG</code> instruction<hr>
	 * <p>
	 * <code>WRUDBG</code><p>
	 * <code>0F 0F</code><p>
	 * <code>UDBG</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wrudbg() {
		addInstruction(Instruction.create(Code.WRUDBG));
	}

	/**
	 * <code>WRUSSD</code> instruction<hr>
	 * <p>
	 * <code>WRUSSD m32, r32</code><p>
	 * <code>66 0F 38 F5 /r</code><p>
	 * <code>CET_SS</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void wrussd(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.WRUSSD_M32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>WRUSSQ</code> instruction<hr>
	 * <p>
	 * <code>WRUSSQ m64, r64</code><p>
	 * <code>66 o64 0F 38 F5 /r</code><p>
	 * <code>CET_SS</code><p>
	 * <code>64-bit</code>
	 */
	public void wrussq(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.WRUSSQ_M64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XABORT</code> instruction<hr>
	 * <p>
	 * <code>XABORT imm8</code><p>
	 * <code>C6 F8 ib</code><p>
	 * <code>RTM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xabort(int imm) {
		addInstruction(Instruction.create(Code.XABORT_IMM8, imm));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m8, r8</code><p>
	 * <code>0F C0 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xadd(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.XADD_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m8, r8</code><p>
	 * <code>0F C0 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xadd(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.XADD_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m16, r16</code><p>
	 * <code>o16 0F C1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xadd(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.XADD_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m16, r16</code><p>
	 * <code>o16 0F C1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xadd(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.XADD_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m32, r32</code><p>
	 * <code>o32 0F C1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xadd(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XADD_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m32, r32</code><p>
	 * <code>o32 0F C1 /r</code><p>
	 * <code>486+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xadd(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XADD_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m64, r64</code><p>
	 * <code>o64 0F C1 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xadd(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XADD_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>XADD</code> instruction<hr>
	 * <p>
	 * <code>XADD r/m64, r64</code><p>
	 * <code>o64 0F C1 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xadd(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XADD_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XBEGIN</code> instruction<hr>
	 * <p>
	 * <code>XBEGIN rel16</code><p>
	 * <code>o16 C7 F8 cw</code><p>
	 * <code>RTM</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XBEGIN rel32</code><p>
	 * <code>o32 C7 F8 cd</code><p>
	 * <code>RTM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xbegin(CodeLabel dst) {
		addInstruction(Instruction.createXbegin(getBitness(), dst.id));
	}

	/**
	 * <code>XBEGIN</code> instruction<hr>
	 * <p>
	 * <code>XBEGIN rel16</code><p>
	 * <code>o16 C7 F8 cw</code><p>
	 * <code>RTM</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XBEGIN rel32</code><p>
	 * <code>o32 C7 F8 cd</code><p>
	 * <code>RTM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xbegin(long dst) {
		addInstruction(Instruction.createXbegin(getBitness(), dst));
	}

	/**
	 * <code>XBTS</code> instruction<hr>
	 * <p>
	 * <code>XBTS r16, r/m16</code><p>
	 * <code>o16 0F A6 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xbts(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.XBTS_R16_RM16, dst.get(), src.get()));
	}

	/**
	 * <code>XBTS</code> instruction<hr>
	 * <p>
	 * <code>XBTS r32, r/m32</code><p>
	 * <code>o32 0F A6 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xbts(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XBTS_R32_RM32, dst.get(), src.get()));
	}

	/**
	 * <code>XBTS</code> instruction<hr>
	 * <p>
	 * <code>XBTS r16, r/m16</code><p>
	 * <code>o16 0F A6 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xbts(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XBTS_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XBTS</code> instruction<hr>
	 * <p>
	 * <code>XBTS r32, r/m32</code><p>
	 * <code>o32 0F A6 /r</code><p>
	 * <code>386 A0</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xbts(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XBTS_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r/m8, r8</code><p>
	 * <code>86 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xchg(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.XCHG_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r/m8, r8</code><p>
	 * <code>86 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xchg(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.XCHG_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r16, AX</code><p>
	 * <code>o16 90+rw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XCHG r/m16, r16</code><p>
	 * <code>o16 87 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xchg(AsmRegister16 dst, AsmRegister16 src) {
		int code;
		code = src.getRegister() == Register.AX ? Code.XCHG_R16_AX : Code.XCHG_RM16_R16;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r/m16, r16</code><p>
	 * <code>o16 87 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xchg(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.XCHG_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r32, EAX</code><p>
	 * <code>o32 90+rd</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XCHG r/m32, r32</code><p>
	 * <code>o32 87 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xchg(AsmRegister32 dst, AsmRegister32 src) {
		int code;
		code = src.getRegister() == Register.EAX ? Code.XCHG_R32_EAX : Code.XCHG_RM32_R32;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r/m32, r32</code><p>
	 * <code>o32 87 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xchg(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XCHG_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r64, RAX</code><p>
	 * <code>o64 90+ro</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XCHG r/m64, r64</code><p>
	 * <code>o64 87 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xchg(AsmRegister64 dst, AsmRegister64 src) {
		int code;
		code = src.getRegister() == Register.RAX ? Code.XCHG_R64_RAX : Code.XCHG_RM64_R64;
		addInstruction(Instruction.create(code, dst.get(), src.get()));
	}

	/**
	 * <code>XCHG</code> instruction<hr>
	 * <p>
	 * <code>XCHG r/m64, r64</code><p>
	 * <code>o64 87 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xchg(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XCHG_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XCRYPTCBC</code> instruction<hr>
	 * <p>
	 * <code>XCRYPTCBC</code><p>
	 * <code>a64 F3 0F A7 D0</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTCBC</code><p>
	 * <code>a32 F3 0F A7 D0</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTCBC</code><p>
	 * <code>a16 F3 0F A7 D0</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xcryptcbc() {
		int code;
		if (getBitness() == 64) {
			code = Code.XCRYPTCBC_64;
		} else code = getBitness() >= 32 ? Code.XCRYPTCBC_32 : Code.XCRYPTCBC_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XCRYPTCFB</code> instruction<hr>
	 * <p>
	 * <code>XCRYPTCFB</code><p>
	 * <code>a64 F3 0F A7 E0</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTCFB</code><p>
	 * <code>a32 F3 0F A7 E0</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTCFB</code><p>
	 * <code>a16 F3 0F A7 E0</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xcryptcfb() {
		int code;
		if (getBitness() == 64) {
			code = Code.XCRYPTCFB_64;
		} else code = getBitness() >= 32 ? Code.XCRYPTCFB_32 : Code.XCRYPTCFB_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XCRYPTCTR</code> instruction<hr>
	 * <p>
	 * <code>XCRYPTCTR</code><p>
	 * <code>a64 F3 0F A7 D8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTCTR</code><p>
	 * <code>a32 F3 0F A7 D8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTCTR</code><p>
	 * <code>a16 F3 0F A7 D8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xcryptctr() {
		int code;
		if (getBitness() == 64) {
			code = Code.XCRYPTCTR_64;
		} else code = getBitness() >= 32 ? Code.XCRYPTCTR_32 : Code.XCRYPTCTR_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XCRYPTECB</code> instruction<hr>
	 * <p>
	 * <code>XCRYPTECB</code><p>
	 * <code>a64 F3 0F A7 C8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTECB</code><p>
	 * <code>a32 F3 0F A7 C8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTECB</code><p>
	 * <code>a16 F3 0F A7 C8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xcryptecb() {
		int code;
		if (getBitness() == 64) {
			code = Code.XCRYPTECB_64;
		} else code = getBitness() >= 32 ? Code.XCRYPTECB_32 : Code.XCRYPTECB_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XCRYPTOFB</code> instruction<hr>
	 * <p>
	 * <code>XCRYPTOFB</code><p>
	 * <code>a64 F3 0F A7 E8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTOFB</code><p>
	 * <code>a32 F3 0F A7 E8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XCRYPTOFB</code><p>
	 * <code>a16 F3 0F A7 E8</code><p>
	 * <code>PADLOCK_ACE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xcryptofb() {
		int code;
		if (getBitness() == 64) {
			code = Code.XCRYPTOFB_64;
		} else code = getBitness() >= 32 ? Code.XCRYPTOFB_32 : Code.XCRYPTOFB_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XEND</code> instruction<hr>
	 * <p>
	 * <code>XEND</code><p>
	 * <code>NP 0F 01 D5</code><p>
	 * <code>RTM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xend() {
		addInstruction(Instruction.create(Code.XEND));
	}

	/**
	 * <code>XGETBV</code> instruction<hr>
	 * <p>
	 * <code>XGETBV</code><p>
	 * <code>NP 0F 01 D0</code><p>
	 * <code>XSAVE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xgetbv() {
		addInstruction(Instruction.create(Code.XGETBV));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m8, r8</code><p>
	 * <code>30 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister8 dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.XOR_RM8_R8, dst.get(), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m8, r8</code><p>
	 * <code>30 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmMemoryOperand dst, AsmRegister8 src) {
		addInstruction(Instruction.create(Code.XOR_RM8_R8, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m16, r16</code><p>
	 * <code>o16 31 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister16 dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.XOR_RM16_R16, dst.get(), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m16, r16</code><p>
	 * <code>o16 31 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmMemoryOperand dst, AsmRegister16 src) {
		addInstruction(Instruction.create(Code.XOR_RM16_R16, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m32, r32</code><p>
	 * <code>o32 31 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister32 dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOR_RM32_R32, dst.get(), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m32, r32</code><p>
	 * <code>o32 31 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmMemoryOperand dst, AsmRegister32 src) {
		addInstruction(Instruction.create(Code.XOR_RM32_R32, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m64, r64</code><p>
	 * <code>o64 31 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xor(AsmRegister64 dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOR_RM64_R64, dst.get(), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m64, r64</code><p>
	 * <code>o64 31 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xor(AsmMemoryOperand dst, AsmRegister64 src) {
		addInstruction(Instruction.create(Code.XOR_RM64_R64, dst.toMemoryOperand(getBitness()), src.get()));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r8, r/m8</code><p>
	 * <code>32 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister8 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOR_R8_RM8, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r16, r/m16</code><p>
	 * <code>o16 33 /r</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister16 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOR_R16_RM16, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r32, r/m32</code><p>
	 * <code>o32 33 /r</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister32 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOR_R32_RM32, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r64, r/m64</code><p>
	 * <code>o64 33 /r</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xor(AsmRegister64 dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XOR_R64_RM64, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR AL, imm8</code><p>
	 * <code>34 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m8, imm8</code><p>
	 * <code>80 /6 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister8 dst, int imm) {
		int code;
		code = dst.getRegister() == Register.AL ? Code.XOR_AL_IMM8 : Code.XOR_RM8_IMM8;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR AX, imm16</code><p>
	 * <code>o16 35 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m16, imm16</code><p>
	 * <code>o16 81 /6 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m16, imm8</code><p>
	 * <code>o16 83 /6 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister16 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.AX) {
			code = Code.XOR_AX_IMM16;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.XOR_RM16_IMM8 : Code.XOR_RM16_IMM16;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR EAX, imm32</code><p>
	 * <code>o32 35 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m32, imm32</code><p>
	 * <code>o32 81 /6 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m32, imm8</code><p>
	 * <code>o32 83 /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmRegister32 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.EAX) {
			code = Code.XOR_EAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.XOR_RM32_IMM8 : Code.XOR_RM32_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR RAX, imm32</code><p>
	 * <code>o64 35 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m64, imm32</code><p>
	 * <code>o64 81 /6 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m64, imm8</code><p>
	 * <code>o64 83 /6 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code>
	 */
	public void xor(AsmRegister64 dst, int imm) {
		int code;
		if (dst.getRegister() == Register.RAX) {
			code = Code.XOR_RAX_IMM32;
		} else code = imm >= -0x80 && imm <= 0x7F ? Code.XOR_RM64_IMM8 : Code.XOR_RM64_IMM32;
		addInstruction(Instruction.create(code, dst.get(), imm));
	}

	/**
	 * <code>XOR</code> instruction<hr>
	 * <p>
	 * <code>XOR r/m64, imm32</code><p>
	 * <code>o64 81 /6 id</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m64, imm8</code><p>
	 * <code>o64 83 /6 ib</code><p>
	 * <code>X64</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m32, imm32</code><p>
	 * <code>o32 81 /6 id</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m32, imm8</code><p>
	 * <code>o32 83 /6 ib</code><p>
	 * <code>386+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m16, imm16</code><p>
	 * <code>o16 81 /6 iw</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m16, imm8</code><p>
	 * <code>o16 83 /6 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XOR r/m8, imm8</code><p>
	 * <code>80 /6 ib</code><p>
	 * <code>8086+</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xor(AsmMemoryOperand dst, int imm) {
		int code;
		if (dst.size == MemoryOperandSize.QWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.XOR_RM64_IMM8 : Code.XOR_RM64_IMM32;
		} else if (dst.size == MemoryOperandSize.DWORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.XOR_RM32_IMM8 : Code.XOR_RM32_IMM32;
		} else if (dst.size == MemoryOperandSize.WORD) {
			code = imm >= -0x80 && imm <= 0x7F ? Code.XOR_RM16_IMM8 : Code.XOR_RM16_IMM16;
		} else if (dst.size == MemoryOperandSize.BYTE) {
			code = Code.XOR_RM8_IMM8;
		} else {
			throw noOpCodeFoundFor(Mnemonic.XOR, dst, imm);
		}
		addInstruction(Instruction.create(code, dst.toMemoryOperand(getBitness()), imm));
	}

	/**
	 * <code>XORPD</code> instruction<hr>
	 * <p>
	 * <code>XORPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 57 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xorpd(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XORPD_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>XORPD</code> instruction<hr>
	 * <p>
	 * <code>XORPD xmm1, xmm2/m128</code><p>
	 * <code>66 0F 57 /r</code><p>
	 * <code>SSE2</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xorpd(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XORPD_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XORPS</code> instruction<hr>
	 * <p>
	 * <code>XORPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 57 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xorps(AsmRegisterXMM dst, AsmRegisterXMM src) {
		addInstruction(Instruction.create(Code.XORPS_XMM_XMMM128, dst.get(), src.get()));
	}

	/**
	 * <code>XORPS</code> instruction<hr>
	 * <p>
	 * <code>XORPS xmm1, xmm2/m128</code><p>
	 * <code>NP 0F 57 /r</code><p>
	 * <code>SSE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xorps(AsmRegisterXMM dst, AsmMemoryOperand src) {
		addInstruction(Instruction.create(Code.XORPS_XMM_XMMM128, dst.get(), src.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XRESLDTRK</code> instruction<hr>
	 * <p>
	 * <code>XRESLDTRK</code><p>
	 * <code>F2 0F 01 E9</code><p>
	 * <code>TSXLDTRK</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xresldtrk() {
		addInstruction(Instruction.create(Code.XRESLDTRK));
	}

	/**
	 * <code>XRSTOR</code> instruction<hr>
	 * <p>
	 * <code>XRSTOR mem</code><p>
	 * <code>NP 0F AE /5</code><p>
	 * <code>XSAVE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xrstor(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XRSTOR_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XRSTOR64</code> instruction<hr>
	 * <p>
	 * <code>XRSTOR64 mem</code><p>
	 * <code>NP o64 0F AE /5</code><p>
	 * <code>XSAVE</code><p>
	 * <code>64-bit</code>
	 */
	public void xrstor64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XRSTOR64_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XRSTORS</code> instruction<hr>
	 * <p>
	 * <code>XRSTORS mem</code><p>
	 * <code>NP 0F C7 /3</code><p>
	 * <code>XSAVES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xrstors(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XRSTORS_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XRSTORS64</code> instruction<hr>
	 * <p>
	 * <code>XRSTORS64 mem</code><p>
	 * <code>NP o64 0F C7 /3</code><p>
	 * <code>XSAVES</code><p>
	 * <code>64-bit</code>
	 */
	public void xrstors64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XRSTORS64_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVE</code> instruction<hr>
	 * <p>
	 * <code>XSAVE mem</code><p>
	 * <code>NP 0F AE /4</code><p>
	 * <code>XSAVE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xsave(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVE_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVE64</code> instruction<hr>
	 * <p>
	 * <code>XSAVE64 mem</code><p>
	 * <code>NP o64 0F AE /4</code><p>
	 * <code>XSAVE</code><p>
	 * <code>64-bit</code>
	 */
	public void xsave64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVE64_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVEC</code> instruction<hr>
	 * <p>
	 * <code>XSAVEC mem</code><p>
	 * <code>NP 0F C7 /4</code><p>
	 * <code>XSAVEC</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xsavec(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVEC_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVEC64</code> instruction<hr>
	 * <p>
	 * <code>XSAVEC64 mem</code><p>
	 * <code>NP o64 0F C7 /4</code><p>
	 * <code>XSAVEC</code><p>
	 * <code>64-bit</code>
	 */
	public void xsavec64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVEC64_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVEOPT</code> instruction<hr>
	 * <p>
	 * <code>XSAVEOPT mem</code><p>
	 * <code>NP 0F AE /6</code><p>
	 * <code>XSAVEOPT</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xsaveopt(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVEOPT_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVEOPT64</code> instruction<hr>
	 * <p>
	 * <code>XSAVEOPT64 mem</code><p>
	 * <code>NP o64 0F AE /6</code><p>
	 * <code>XSAVEOPT</code><p>
	 * <code>64-bit</code>
	 */
	public void xsaveopt64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVEOPT64_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVES</code> instruction<hr>
	 * <p>
	 * <code>XSAVES mem</code><p>
	 * <code>NP 0F C7 /5</code><p>
	 * <code>XSAVES</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xsaves(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVES_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSAVES64</code> instruction<hr>
	 * <p>
	 * <code>XSAVES64 mem</code><p>
	 * <code>NP o64 0F C7 /5</code><p>
	 * <code>XSAVES</code><p>
	 * <code>64-bit</code>
	 */
	public void xsaves64(AsmMemoryOperand dst) {
		addInstruction(Instruction.create(Code.XSAVES64_MEM, dst.toMemoryOperand(getBitness())));
	}

	/**
	 * <code>XSETBV</code> instruction<hr>
	 * <p>
	 * <code>XSETBV</code><p>
	 * <code>NP 0F 01 D1</code><p>
	 * <code>XSAVE</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xsetbv() {
		addInstruction(Instruction.create(Code.XSETBV));
	}

	/**
	 * <code>XSHA1</code> instruction<hr>
	 * <p>
	 * <code>XSHA1</code><p>
	 * <code>a64 F3 0F A6 C8</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XSHA1</code><p>
	 * <code>a32 F3 0F A6 C8</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XSHA1</code><p>
	 * <code>a16 F3 0F A6 C8</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xsha1() {
		int code;
		if (getBitness() == 64) {
			code = Code.XSHA1_64;
		} else code = getBitness() >= 32 ? Code.XSHA1_32 : Code.XSHA1_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XSHA256</code> instruction<hr>
	 * <p>
	 * <code>XSHA256</code><p>
	 * <code>a64 F3 0F A6 D0</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XSHA256</code><p>
	 * <code>a32 F3 0F A6 D0</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XSHA256</code><p>
	 * <code>a16 F3 0F A6 D0</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xsha256() {
		int code;
		if (getBitness() == 64) {
			code = Code.XSHA256_64;
		} else code = getBitness() >= 32 ? Code.XSHA256_32 : Code.XSHA256_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XSHA512</code> instruction<hr>
	 * <p>
	 * <code>XSHA512</code><p>
	 * <code>a64 F3 0F A6 E0</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XSHA512</code><p>
	 * <code>a32 F3 0F A6 E0</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XSHA512</code><p>
	 * <code>a16 F3 0F A6 E0</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xsha512() {
		int code;
		if (getBitness() == 64) {
			code = Code.XSHA512_64;
		} else code = getBitness() >= 32 ? Code.XSHA512_32 : Code.XSHA512_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XSHA512_ALT</code> instruction<hr>
	 * <p>
	 * <code>XSHA512_ALT</code><p>
	 * <code>a64 F3 0F A6 D8</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XSHA512_ALT</code><p>
	 * <code>a32 F3 0F A6 D8</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XSHA512_ALT</code><p>
	 * <code>a16 F3 0F A6 D8</code><p>
	 * <code>PADLOCK_PHE</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xsha512_alt() {
		int code;
		if (getBitness() == 64) {
			code = Code.XSHA512_ALT_64;
		} else code = getBitness() >= 32 ? Code.XSHA512_ALT_32 : Code.XSHA512_ALT_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XSTORE</code> instruction<hr>
	 * <p>
	 * <code>XSTORE</code><p>
	 * <code>a64 0F A7 C0</code><p>
	 * <code>PADLOCK_RNG</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XSTORE</code><p>
	 * <code>a32 0F A7 C0</code><p>
	 * <code>PADLOCK_RNG</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XSTORE</code><p>
	 * <code>a16 0F A7 C0</code><p>
	 * <code>PADLOCK_RNG</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xstore() {
		int code;
		if (getBitness() == 64) {
			code = Code.XSTORE_64;
		} else code = getBitness() >= 32 ? Code.XSTORE_32 : Code.XSTORE_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XSTORE_ALT</code> instruction<hr>
	 * <p>
	 * <code>XSTORE_ALT</code><p>
	 * <code>a64 F3 0F A7 F8</code><p>
	 * <code>PADLOCK_RNG</code><p>
	 * <code>64-bit</code><hr>
	 * <p>
	 * <code>XSTORE_ALT</code><p>
	 * <code>a32 F3 0F A7 F8</code><p>
	 * <code>PADLOCK_RNG</code><p>
	 * <code>16/32/64-bit</code><hr>
	 * <p>
	 * <code>XSTORE_ALT</code><p>
	 * <code>a16 F3 0F A7 F8</code><p>
	 * <code>PADLOCK_RNG</code><p>
	 * <code>16/32-bit</code>
	 */
	public void xstore_alt() {
		int code;
		if (getBitness() == 64) {
			code = Code.XSTORE_ALT_64;
		} else code = getBitness() >= 32 ? Code.XSTORE_ALT_32 : Code.XSTORE_ALT_16;
		addInstruction(Instruction.create(code));
	}

	/**
	 * <code>XSUSLDTRK</code> instruction<hr>
	 * <p>
	 * <code>XSUSLDTRK</code><p>
	 * <code>F2 0F 01 E8</code><p>
	 * <code>TSXLDTRK</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xsusldtrk() {
		addInstruction(Instruction.create(Code.XSUSLDTRK));
	}

	/**
	 * <code>XTEST</code> instruction<hr>
	 * <p>
	 * <code>XTEST</code><p>
	 * <code>NP 0F 01 D6</code><p>
	 * <code>HLE or RTM</code><p>
	 * <code>16/32/64-bit</code>
	 */
	public void xtest() {
		addInstruction(Instruction.create(Code.XTEST));
	}

	/**
	 * <code>ZERO_BYTES</code> instruction<hr>
	 * <p>
	 * A zero-sized instruction.<!-- --> Can be used as a label.<!-- -->
	 */
	public void zero_bytes() {
		addInstruction(Instruction.create(Code.ZERO_BYTES));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0) {
		addInstruction(Instruction.createDeclareByte(imm0));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8, int imm9) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8, int imm9, int imm10) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8, int imm9, int imm10, int imm11) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8, int imm9, int imm10, int imm11, int imm12) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8, int imm9, int imm10, int imm11, int imm12, int imm13) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8, int imm9, int imm10, int imm11, int imm12, int imm13, int imm14) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13, imm14));
	}

	/**
	 * Creates a <code>db</code> asm directive with type <code>byte</code>
	 */
	public void db(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7, int imm8, int imm9, int imm10, int imm11, int imm12, int imm13, int imm14, int imm15) {
		addInstruction(Instruction.createDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13, imm14, imm15));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0) {
		addInstruction(Instruction.createDeclareWord(imm0));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0, int imm1) {
		addInstruction(Instruction.createDeclareWord(imm0, imm1));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0, int imm1, int imm2) {
		addInstruction(Instruction.createDeclareWord(imm0, imm1, imm2));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0, int imm1, int imm2, int imm3) {
		addInstruction(Instruction.createDeclareWord(imm0, imm1, imm2, imm3));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0, int imm1, int imm2, int imm3, int imm4) {
		addInstruction(Instruction.createDeclareWord(imm0, imm1, imm2, imm3, imm4));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5) {
		addInstruction(Instruction.createDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6) {
		addInstruction(Instruction.createDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5, imm6));
	}

	/**
	 * Creates a <code>dw</code> asm directive with type <code>short</code>
	 */
	public void dw(int imm0, int imm1, int imm2, int imm3, int imm4, int imm5, int imm6, int imm7) {
		addInstruction(Instruction.createDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>int</code>
	 */
	public void dd(int imm0) {
		addInstruction(Instruction.createDeclareDword(imm0));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>int</code>
	 */
	public void dd(int imm0, int imm1) {
		addInstruction(Instruction.createDeclareDword(imm0, imm1));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>int</code>
	 */
	public void dd(int imm0, int imm1, int imm2) {
		addInstruction(Instruction.createDeclareDword(imm0, imm1, imm2));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>int</code>
	 */
	public void dd(int imm0, int imm1, int imm2, int imm3) {
		addInstruction(Instruction.createDeclareDword(imm0, imm1, imm2, imm3));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>float</code>
	 */
	public void dd(float imm0) {
		addInstruction(Instruction.createDeclareDword(Float.floatToRawIntBits(imm0)));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>float</code>
	 */
	public void dd(float imm0, float imm1) {
		addInstruction(Instruction.createDeclareDword(Float.floatToRawIntBits(imm0), Float.floatToRawIntBits(imm1)));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>float</code>
	 */
	public void dd(float imm0, float imm1, float imm2) {
		addInstruction(Instruction.createDeclareDword(Float.floatToRawIntBits(imm0), Float.floatToRawIntBits(imm1), Float.floatToRawIntBits(imm2)));
	}

	/**
	 * Creates a <code>dd</code> asm directive with type <code>float</code>
	 */
	public void dd(float imm0, float imm1, float imm2, float imm3) {
		addInstruction(Instruction.createDeclareDword(Float.floatToRawIntBits(imm0), Float.floatToRawIntBits(imm1), Float.floatToRawIntBits(imm2), Float.floatToRawIntBits(imm3)));
	}

	/**
	 * Creates a <code>dq</code> asm directive with type <code>long</code>
	 */
	public void dq(long imm0) {
		addInstruction(Instruction.createDeclareQword(imm0));
	}

	/**
	 * Creates a <code>dq</code> asm directive with type <code>long</code>
	 */
	public void dq(long imm0, long imm1) {
		addInstruction(Instruction.createDeclareQword(imm0, imm1));
	}

	/**
	 * Creates a <code>dq</code> asm directive with type <code>double</code>
	 */
	public void dq(double imm0) {
		addInstruction(Instruction.createDeclareQword(Double.doubleToRawLongBits(imm0)));
	}

	/**
	 * Creates a <code>dq</code> asm directive with type <code>double</code>
	 */
	public void dq(double imm0, double imm1) {
		addInstruction(Instruction.createDeclareQword(Double.doubleToRawLongBits(imm0), Double.doubleToRawLongBits(imm1)));
	}
	// GENERATOR-END: Code
}
