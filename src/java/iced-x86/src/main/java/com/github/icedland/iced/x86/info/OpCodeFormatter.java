// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

package com.github.icedland.iced.x86.info;

import com.github.icedland.iced.x86.Code;

final class OpCodeFormatter {
	String format() {
		boolean isInstruction = false; //TODO:
		int code = Code.INVALID; //TODO:
		if (!isInstruction) {
			switch (code) {
			// GENERATOR-BEGIN: OpCodeFmtNotInstructionString
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			case Code.INVALID:
				return "<invalid>";
			case Code.DECLAREBYTE:
				return "<db>";
			case Code.DECLAREWORD:
				return "<dw>";
			case Code.DECLAREDWORD:
				return "<dd>";
			case Code.DECLAREQWORD:
				return "<dq>";
			case Code.ZERO_BYTES:
				return "<zero_bytes>";
			// GENERATOR-END: OpCodeFmtNotInstructionString
			default:
				throw new UnsupportedOperationException();
			}
		}

		hasVsib(); //TODO:
		hasModRM(); //TODO:
		throw new UnsupportedOperationException(); // TODO:
	}

	private boolean hasModRM() {
		int opCount = 0; //TODO:
		for (int i = 0; i < opCount; i++) {
			int opKind = 0; //TODO:
			switch (opKind) {
			// GENERATOR-BEGIN: HasModRM
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			case OpCodeOperandKind.MEM:
			case OpCodeOperandKind.MEM_MPX:
			case OpCodeOperandKind.MEM_MIB:
			case OpCodeOperandKind.MEM_VSIB32X:
			case OpCodeOperandKind.MEM_VSIB64X:
			case OpCodeOperandKind.MEM_VSIB32Y:
			case OpCodeOperandKind.MEM_VSIB64Y:
			case OpCodeOperandKind.MEM_VSIB32Z:
			case OpCodeOperandKind.MEM_VSIB64Z:
			case OpCodeOperandKind.R8_OR_MEM:
			case OpCodeOperandKind.R16_OR_MEM:
			case OpCodeOperandKind.R32_OR_MEM:
			case OpCodeOperandKind.R32_OR_MEM_MPX:
			case OpCodeOperandKind.R64_OR_MEM:
			case OpCodeOperandKind.R64_OR_MEM_MPX:
			case OpCodeOperandKind.MM_OR_MEM:
			case OpCodeOperandKind.XMM_OR_MEM:
			case OpCodeOperandKind.YMM_OR_MEM:
			case OpCodeOperandKind.ZMM_OR_MEM:
			case OpCodeOperandKind.BND_OR_MEM_MPX:
			case OpCodeOperandKind.K_OR_MEM:
			case OpCodeOperandKind.R8_REG:
			case OpCodeOperandKind.R16_REG:
			case OpCodeOperandKind.R16_REG_MEM:
			case OpCodeOperandKind.R16_RM:
			case OpCodeOperandKind.R32_REG:
			case OpCodeOperandKind.R32_REG_MEM:
			case OpCodeOperandKind.R32_RM:
			case OpCodeOperandKind.R64_REG:
			case OpCodeOperandKind.R64_REG_MEM:
			case OpCodeOperandKind.R64_RM:
			case OpCodeOperandKind.SEG_REG:
			case OpCodeOperandKind.K_REG:
			case OpCodeOperandKind.KP1_REG:
			case OpCodeOperandKind.K_RM:
			case OpCodeOperandKind.MM_REG:
			case OpCodeOperandKind.MM_RM:
			case OpCodeOperandKind.XMM_REG:
			case OpCodeOperandKind.XMM_RM:
			case OpCodeOperandKind.YMM_REG:
			case OpCodeOperandKind.YMM_RM:
			case OpCodeOperandKind.ZMM_REG:
			case OpCodeOperandKind.ZMM_RM:
			case OpCodeOperandKind.CR_REG:
			case OpCodeOperandKind.DR_REG:
			case OpCodeOperandKind.TR_REG:
			case OpCodeOperandKind.BND_REG:
			case OpCodeOperandKind.SIBMEM:
			case OpCodeOperandKind.TMM_REG:
			case OpCodeOperandKind.TMM_RM:
				return true;
			// GENERATOR-END: HasModRM
			default:
				break;
			}
		}
		throw new UnsupportedOperationException(); // TODO:
	}

	private boolean hasVsib() {
		int opCount = 0; //TODO:
		for (int i = 0; i < opCount; i++) {
			int opKind = 0; //TODO:
			switch (opKind) {
			// GENERATOR-BEGIN: HasVsib
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			case OpCodeOperandKind.MEM_VSIB32X:
			case OpCodeOperandKind.MEM_VSIB64X:
			case OpCodeOperandKind.MEM_VSIB32Y:
			case OpCodeOperandKind.MEM_VSIB64Y:
			case OpCodeOperandKind.MEM_VSIB32Z:
			case OpCodeOperandKind.MEM_VSIB64Z:
				return true;
			// GENERATOR-END: HasVsib
			default:
				break;
			}
		}
		throw new UnsupportedOperationException(); // TODO:
	}
}

