// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

package com.github.icedland.iced.x86;

/**
 * Control flow
 */
public final class FlowControl {
	private FlowControl() {
	}

	/**
	 * The next instruction that will be executed is the next instruction in the instruction stream
	 */
	public static final int NEXT = 0;
	/**
	 * It's an unconditional branch instruction: <code>JMP NEAR</code>, <code>JMP FAR</code>
	 */
	public static final int UNCONDITIONAL_BRANCH = 1;
	/**
	 * It's an unconditional indirect branch: <code>JMP NEAR reg</code>, <code>JMP NEAR [mem]</code>, <code>JMP FAR [mem]</code>
	 */
	public static final int INDIRECT_BRANCH = 2;
	/**
	 * It's a conditional branch instruction: <code>Jcc SHORT</code>, <code>Jcc NEAR</code>, <code>LOOP</code>, <code>LOOPcc</code>, <code>JRCXZ</code>, <code>JKccD SHORT</code>, <code>JKccD NEAR</code>
	 */
	public static final int CONDITIONAL_BRANCH = 3;
	/**
	 * It's a return instruction: <code>RET NEAR</code>, <code>RET FAR</code>, <code>IRET</code>, <code>SYSRET</code>, <code>SYSEXIT</code>, <code>RSM</code>, <code>SKINIT</code>, <code>RDM</code>, <code>UIRET</code>
	 */
	public static final int RETURN = 4;
	/**
	 * It's a call instruction: <code>CALL NEAR</code>, <code>CALL FAR</code>, <code>SYSCALL</code>, <code>SYSENTER</code>, <code>VMLAUNCH</code>, <code>VMRESUME</code>, <code>VMCALL</code>, <code>VMMCALL</code>, <code>VMGEXIT</code>, <code>VMRUN</code>, <code>TDCALL</code>, <code>SEAMCALL</code>, <code>SEAMRET</code>
	 */
	public static final int CALL = 5;
	/**
	 * It's an indirect call instruction: <code>CALL NEAR reg</code>, <code>CALL NEAR [mem]</code>, <code>CALL FAR [mem]</code>
	 */
	public static final int INDIRECT_CALL = 6;
	/**
	 * It's an interrupt instruction: <code>INT n</code>, <code>INT3</code>, <code>INT1</code>, <code>INTO</code>, <code>SMINT</code>, <code>DMINT</code>
	 */
	public static final int INTERRUPT = 7;
	/**
	 * It's <code>XBEGIN</code>
	 */
	public static final int XBEGIN_XABORT_XEND = 8;
	/**
	 * It's an invalid instruction, eg.<!-- --> {@link com.github.icedland.iced.x86.Code#INVALID}, <code>UD0</code>, <code>UD1</code>, <code>UD2</code>
	 */
	public static final int EXCEPTION = 9;
}
