// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

package com.github.icedland.iced.x86.info;

import com.github.icedland.iced.x86.Code;

final class InstructionFormatter {
	String format() {
		boolean isInstruction = false; //TODO:
		int code = Code.INVALID; //TODO:
		if (!isInstruction) {
			switch (code) {
			// GENERATOR-BEGIN: InstrFmtNotInstructionString
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			case Code.INVALID:
				return "<invalid>";
			case Code.DECLAREBYTE:
				return "<db>";
			case Code.DECLAREWORD:
				return "<dw>";
			case Code.DECLAREDWORD:
				return "<dd>";
			case Code.DECLAREQWORD:
				return "<dq>";
			case Code.ZERO_BYTES:
				return "ZERO_BYTES";
			// GENERATOR-END: InstrFmtNotInstructionString
			default:
				throw new UnsupportedOperationException();
			}
		}

		switch (code) {
		// GENERATOR-BEGIN: PrintImpliedOps
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		case Code.TPAUSE_R32:
		case Code.TPAUSE_R64:
		case Code.UMWAIT_R32:
		case Code.UMWAIT_R64:
			writeOpSeparator();
			write("<EDX>", false);
			writeOpSeparator();
			write("<EAX>", false);
			break;
		case Code.PBLENDVB_XMM_XMMM128:
		case Code.BLENDVPS_XMM_XMMM128:
		case Code.BLENDVPD_XMM_XMMM128:
		case Code.SHA256RNDS2_XMM_XMMM128:
			writeOpSeparator();
			write("<XMM0>", true);
			break;
		case Code.AESENCWIDE128KL_M384:
		case Code.AESDECWIDE128KL_M384:
		case Code.AESENCWIDE256KL_M512:
		case Code.AESDECWIDE256KL_M512:
			writeOpSeparator();
			write("<XMM0-7>", true);
			break;
		case Code.LOADIWKEY_XMM_XMM:
			writeOpSeparator();
			write("<EAX>", true);
			writeOpSeparator();
			write("<XMM0>", true);
			break;
		case Code.ENCODEKEY128_R32_R32:
			writeOpSeparator();
			write("<XMM0-2>", true);
			writeOpSeparator();
			write("<XMM4-6>", true);
			break;
		case Code.ENCODEKEY256_R32_R32:
			writeOpSeparator();
			write("<XMM0-6>", true);
			break;
		case Code.HRESET_IMM8:
			writeOpSeparator();
			write("<EAX>", true);
			break;
		// GENERATOR-END: PrintImpliedOps

		default:
			break;
		}

		throw new UnsupportedOperationException(); // TODO:
	}

	private void write(String s, boolean upper) {
		throw new UnsupportedOperationException(); // TODO:
	}

	private void writeOpSeparator() {
		throw new UnsupportedOperationException(); // TODO:
	}
}
